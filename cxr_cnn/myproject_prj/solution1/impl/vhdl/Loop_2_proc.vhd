-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2019.2
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity Loop_2_proc is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    out_r_TDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
    out_r_TVALID : OUT STD_LOGIC;
    out_r_TREADY : IN STD_LOGIC;
    out_r_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0);
    p_read : IN STD_LOGIC_VECTOR (0 downto 0);
    tmp_data_V_0 : IN STD_LOGIC_VECTOR (19 downto 0);
    tmp_data_V_1 : IN STD_LOGIC_VECTOR (19 downto 0);
    tmp_data_V_2 : IN STD_LOGIC_VECTOR (19 downto 0) );
end;


architecture behav of Loop_2_proc is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (10 downto 0) := "00000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (10 downto 0) := "00000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (10 downto 0) := "00000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (10 downto 0) := "00000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (10 downto 0) := "00000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (10 downto 0) := "00001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (10 downto 0) := "00010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (10 downto 0) := "00100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (10 downto 0) := "01000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (10 downto 0) := "10000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv20_0 : STD_LOGIC_VECTOR (19 downto 0) := "00000000000000000000";
    constant ap_const_lv12_FFF : STD_LOGIC_VECTOR (11 downto 0) := "111111111111";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv5_D : STD_LOGIC_VECTOR (4 downto 0) := "01101";
    constant ap_const_lv32_FFFFFFE8 : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111111101000";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv20_FFFFF : STD_LOGIC_VECTOR (19 downto 0) := "11111111111111111111";
    constant ap_const_lv32_FFFFFFE7 : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111111100111";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_lv31_0 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000000";
    constant ap_const_lv20_FFFE8 : STD_LOGIC_VECTOR (19 downto 0) := "11111111111111101000";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv8_7F : STD_LOGIC_VECTOR (7 downto 0) := "01111111";
    constant ap_const_lv8_7E : STD_LOGIC_VECTOR (7 downto 0) := "01111110";
    constant ap_const_lv8_8 : STD_LOGIC_VECTOR (7 downto 0) := "00001000";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal out_r_TDATA_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal ap_block_state1 : BOOLEAN;
    signal j_fu_157_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal j_reg_483 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal regslice_both_out_data_U_apdone_blk : STD_LOGIC;
    signal last_fu_169_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal last_reg_488 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln31_fu_151_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_V_3_fu_174_p5 : STD_LOGIC_VECTOR (19 downto 0);
    signal tmp_V_3_reg_493 : STD_LOGIC_VECTOR (19 downto 0);
    signal p_Result_12_reg_499 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_V_fu_194_p2 : STD_LOGIC_VECTOR (19 downto 0);
    signal tmp_V_reg_505 : STD_LOGIC_VECTOR (19 downto 0);
    signal icmp_ln935_fu_200_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln935_reg_510 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal tmp_V_4_fu_205_p3 : STD_LOGIC_VECTOR (19 downto 0);
    signal tmp_V_4_reg_515 : STD_LOGIC_VECTOR (19 downto 0);
    signal l_fu_228_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal l_reg_523 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln943_fu_236_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln943_reg_528 : STD_LOGIC_VECTOR (7 downto 0);
    signal sub_ln944_fu_240_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln944_reg_533 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal trunc_ln944_fu_245_p1 : STD_LOGIC_VECTOR (19 downto 0);
    signal trunc_ln944_reg_540 : STD_LOGIC_VECTOR (19 downto 0);
    signal sub_ln947_fu_253_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal sub_ln947_reg_545 : STD_LOGIC_VECTOR (4 downto 0);
    signal lsb_index_fu_259_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal lsb_index_reg_550 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal tmp_reg_556 : STD_LOGIC_VECTOR (30 downto 0);
    signal icmp_ln947_1_fu_288_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln947_1_reg_561 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln958_fu_294_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln958_reg_566 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln958_fu_299_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln958_reg_571 : STD_LOGIC_VECTOR (31 downto 0);
    signal or_ln_i_fu_351_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal or_ln_i_reg_576 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal icmp_ln958_fu_365_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln958_reg_591 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_370_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal lshr_ln958_reg_601 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal grp_fu_378_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal shl_ln958_reg_606 : STD_LOGIC_VECTOR (63 downto 0);
    signal m_5_reg_611 : STD_LOGIC_VECTOR (62 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal tmp_23_reg_616 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln964_fu_420_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln964_reg_621 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal j3_0_i_reg_140 : STD_LOGIC_VECTOR (1 downto 0);
    signal icmp_ln32_fu_163_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_s_fu_210_p4 : STD_LOGIC_VECTOR (19 downto 0);
    signal p_Result_13_fu_220_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln947_fu_249_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln947_fu_274_p1 : STD_LOGIC_VECTOR (19 downto 0);
    signal lshr_ln947_fu_277_p2 : STD_LOGIC_VECTOR (19 downto 0);
    signal p_Result_10_fu_283_p2 : STD_LOGIC_VECTOR (19 downto 0);
    signal icmp_ln947_fu_304_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_22_fu_314_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln949_fu_327_p2 : STD_LOGIC_VECTOR (19 downto 0);
    signal p_Result_7_fu_332_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln949_fu_321_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln949_fu_339_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal a_fu_309_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln949_fu_345_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_370_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_378_p0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_378_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln958_fu_384_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln961_fu_393_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal m_1_fu_387_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal m_2_fu_396_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal sub_ln964_fu_430_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln964_fu_435_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal m_6_fu_427_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_169_i_fu_440_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_Result_14_fu_447_p5 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln738_fu_459_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln739_fu_463_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (10 downto 0);
    signal out_r_TDATA_int : STD_LOGIC_VECTOR (31 downto 0);
    signal out_r_TVALID_int : STD_LOGIC;
    signal out_r_TREADY_int : STD_LOGIC;
    signal regslice_both_out_data_U_vld_out : STD_LOGIC;
    signal regslice_both_out_last_V_U_apdone_blk : STD_LOGIC;
    signal regslice_both_out_last_V_U_ack_in_dummy : STD_LOGIC;
    signal regslice_both_out_last_V_U_vld_out : STD_LOGIC;

    component myproject_axi_mux_32_20_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (19 downto 0);
        din1 : IN STD_LOGIC_VECTOR (19 downto 0);
        din2 : IN STD_LOGIC_VECTOR (19 downto 0);
        din3 : IN STD_LOGIC_VECTOR (1 downto 0);
        dout : OUT STD_LOGIC_VECTOR (19 downto 0) );
    end component;


    component myproject_axi_lshr_32ns_32ns_32_2_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        OP : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component myproject_axi_shl_64ns_32ns_64_2_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        OP : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component regslice_both IS
    generic (
        DataWidth : INTEGER );
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        data_in : IN STD_LOGIC_VECTOR (DataWidth-1 downto 0);
        vld_in : IN STD_LOGIC;
        ack_in : OUT STD_LOGIC;
        data_out : OUT STD_LOGIC_VECTOR (DataWidth-1 downto 0);
        vld_out : OUT STD_LOGIC;
        ack_out : IN STD_LOGIC;
        apdone_blk : OUT STD_LOGIC );
    end component;



begin
    myproject_axi_mux_32_20_1_1_U585 : component myproject_axi_mux_32_20_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 20,
        din1_WIDTH => 20,
        din2_WIDTH => 20,
        din3_WIDTH => 2,
        dout_WIDTH => 20)
    port map (
        din0 => tmp_data_V_0,
        din1 => tmp_data_V_1,
        din2 => tmp_data_V_2,
        din3 => j3_0_i_reg_140,
        dout => tmp_V_3_fu_174_p5);

    myproject_axi_lshr_32ns_32ns_32_2_1_U586 : component myproject_axi_lshr_32ns_32ns_32_2_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        OP => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_370_p0,
        din1 => add_ln958_reg_566,
        ce => ap_const_logic_1,
        dout => grp_fu_370_p2);

    myproject_axi_shl_64ns_32ns_64_2_1_U587 : component myproject_axi_shl_64ns_32ns_64_2_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        OP => 0,
        din0_WIDTH => 64,
        din1_WIDTH => 32,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_378_p0,
        din1 => grp_fu_378_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_378_p2);

    regslice_both_out_data_U : component regslice_both
    generic map (
        DataWidth => 32)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        data_in => out_r_TDATA_int,
        vld_in => out_r_TVALID_int,
        ack_in => out_r_TREADY_int,
        data_out => out_r_TDATA,
        vld_out => regslice_both_out_data_U_vld_out,
        ack_out => out_r_TREADY,
        apdone_blk => regslice_both_out_data_U_apdone_blk);

    regslice_both_out_last_V_U : component regslice_both
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        data_in => last_reg_488,
        vld_in => out_r_TVALID_int,
        ack_in => regslice_both_out_last_V_U_ack_in_dummy,
        data_out => out_r_TLAST,
        vld_out => regslice_both_out_last_V_U_vld_out,
        ack_out => out_r_TREADY,
        apdone_blk => regslice_both_out_last_V_U_apdone_blk);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((icmp_ln31_fu_151_p2 = ap_const_lv1_1) and (regslice_both_out_data_U_apdone_blk = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    j3_0_i_reg_140_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((out_r_TREADY_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state11))) then 
                j3_0_i_reg_140 <= j_reg_483;
            elsif ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                j3_0_i_reg_140 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln935_reg_510 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                add_ln958_reg_566 <= add_ln958_fu_294_p2;
                icmp_ln947_1_reg_561 <= icmp_ln947_1_fu_288_p2;
                lsb_index_reg_550 <= lsb_index_fu_259_p2;
                sub_ln958_reg_571 <= sub_ln958_fu_299_p2;
                tmp_reg_556 <= lsb_index_fu_259_p2(31 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                icmp_ln935_reg_510 <= icmp_ln935_fu_200_p2;
                l_reg_523 <= l_fu_228_p3;
                tmp_V_4_reg_515 <= tmp_V_4_fu_205_p3;
                trunc_ln943_reg_528 <= trunc_ln943_fu_236_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln935_reg_510 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state6))) then
                icmp_ln958_reg_591 <= icmp_ln958_fu_365_p2;
                    or_ln_i_reg_576(0) <= or_ln_i_fu_351_p3(0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((regslice_both_out_data_U_apdone_blk = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                j_reg_483 <= j_fu_157_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln31_fu_151_p2 = ap_const_lv1_0) and (regslice_both_out_data_U_apdone_blk = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                last_reg_488 <= last_fu_169_p2;
                p_Result_12_reg_499 <= tmp_V_3_fu_174_p5(19 downto 19);
                tmp_V_3_reg_493 <= tmp_V_3_fu_174_p5;
                tmp_V_reg_505 <= tmp_V_fu_194_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln935_reg_510 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state7))) then
                lshr_ln958_reg_601 <= grp_fu_370_p2;
                shl_ln958_reg_606 <= grp_fu_378_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln935_reg_510 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state8))) then
                m_5_reg_611 <= m_2_fu_396_p2(63 downto 1);
                tmp_23_reg_616 <= m_2_fu_396_p2(25 downto 25);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln935_reg_510 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state9))) then
                    select_ln964_reg_621(0) <= select_ln964_fu_420_p3(0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln935_reg_510 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                sub_ln944_reg_533 <= sub_ln944_fu_240_p2;
                sub_ln947_reg_545 <= sub_ln947_fu_253_p2;
                trunc_ln944_reg_540 <= trunc_ln944_fu_245_p1;
            end if;
        end if;
    end process;
    or_ln_i_reg_576(31 downto 1) <= "0000000000000000000000000000000";
    select_ln964_reg_621(7 downto 1) <= "0111111";

    ap_NS_fsm_assign_proc : process (ap_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state2, regslice_both_out_data_U_apdone_blk, icmp_ln31_fu_151_p2, out_r_TREADY_int)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((icmp_ln31_fu_151_p2 = ap_const_lv1_1) and (regslice_both_out_data_U_apdone_blk = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                elsif (((icmp_ln31_fu_151_p2 = ap_const_lv1_0) and (regslice_both_out_data_U_apdone_blk = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                if (((out_r_TREADY_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state10))) then
                    ap_NS_fsm <= ap_ST_fsm_state11;
                else
                    ap_NS_fsm <= ap_ST_fsm_state10;
                end if;
            when ap_ST_fsm_state11 => 
                if (((out_r_TREADY_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state11))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state11;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXX";
        end case;
    end process;
    a_fu_309_p2 <= (icmp_ln947_fu_304_p2 and icmp_ln947_1_reg_561);
    add_ln949_fu_327_p2 <= std_logic_vector(signed(ap_const_lv20_FFFE8) + signed(trunc_ln944_reg_540));
    add_ln958_fu_294_p2 <= std_logic_vector(signed(ap_const_lv32_FFFFFFE7) + signed(sub_ln944_reg_533));
    add_ln964_fu_435_p2 <= std_logic_vector(unsigned(sub_ln964_fu_430_p2) + unsigned(select_ln964_reg_621));
    and_ln949_fu_339_p2 <= (xor_ln949_fu_321_p2 and p_Result_7_fu_332_p3);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_block_state1_assign_proc : process(ap_start, ap_done_reg)
    begin
                ap_block_state1 <= ((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1));
    end process;


    ap_done_assign_proc : process(ap_done_reg, ap_CS_fsm_state2, regslice_both_out_data_U_apdone_blk, icmp_ln31_fu_151_p2)
    begin
        if (((icmp_ln31_fu_151_p2 = ap_const_lv1_1) and (regslice_both_out_data_U_apdone_blk = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2, regslice_both_out_data_U_apdone_blk, icmp_ln31_fu_151_p2)
    begin
        if (((icmp_ln31_fu_151_p2 = ap_const_lv1_1) and (regslice_both_out_data_U_apdone_blk = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    bitcast_ln739_fu_463_p1 <= trunc_ln738_fu_459_p1;
    grp_fu_370_p0 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_V_4_reg_515),32));
    grp_fu_378_p0 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_V_4_reg_515),64));
    grp_fu_378_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sub_ln958_reg_571),64));
    icmp_ln31_fu_151_p2 <= "1" when (j3_0_i_reg_140 = ap_const_lv2_3) else "0";
    icmp_ln32_fu_163_p2 <= "1" when (j3_0_i_reg_140 = ap_const_lv2_2) else "0";
    icmp_ln935_fu_200_p2 <= "1" when (tmp_V_3_reg_493 = ap_const_lv20_0) else "0";
    icmp_ln947_1_fu_288_p2 <= "0" when (p_Result_10_fu_283_p2 = ap_const_lv20_0) else "1";
    icmp_ln947_fu_304_p2 <= "1" when (signed(tmp_reg_556) > signed(ap_const_lv31_0)) else "0";
    icmp_ln958_fu_365_p2 <= "1" when (signed(lsb_index_reg_550) > signed(ap_const_lv32_0)) else "0";
    j_fu_157_p2 <= std_logic_vector(unsigned(j3_0_i_reg_140) + unsigned(ap_const_lv2_1));
    
    l_fu_228_p3_proc : process(p_Result_13_fu_220_p3)
    begin
        l_fu_228_p3 <= std_logic_vector(to_unsigned(32, 32));
        for i in 0 to 32 - 1 loop
            if p_Result_13_fu_220_p3(i) = '1' then
                l_fu_228_p3 <= std_logic_vector(to_unsigned(i,32));
                exit;
            end if;
        end loop;
    end process;

    last_fu_169_p2 <= (p_read and icmp_ln32_fu_163_p2);
    lsb_index_fu_259_p2 <= std_logic_vector(signed(ap_const_lv32_FFFFFFE8) + signed(sub_ln944_reg_533));
    lshr_ln947_fu_277_p2 <= std_logic_vector(shift_right(unsigned(ap_const_lv20_FFFFF),to_integer(unsigned('0' & zext_ln947_fu_274_p1(20-1 downto 0)))));
    m_1_fu_387_p3 <= 
        zext_ln958_fu_384_p1 when (icmp_ln958_reg_591(0) = '1') else 
        shl_ln958_reg_606;
    m_2_fu_396_p2 <= std_logic_vector(unsigned(zext_ln961_fu_393_p1) + unsigned(m_1_fu_387_p3));
    m_6_fu_427_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(m_5_reg_611),64));
    or_ln949_fu_345_p2 <= (and_ln949_fu_339_p2 or a_fu_309_p2);
    or_ln_i_fu_351_p3 <= (ap_const_lv31_0 & or_ln949_fu_345_p2);

    out_r_TDATA_blk_n_assign_proc : process(ap_CS_fsm_state10, ap_CS_fsm_state11, out_r_TREADY_int)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state10))) then 
            out_r_TDATA_blk_n <= out_r_TREADY_int;
        else 
            out_r_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    out_r_TDATA_int <= 
        ap_const_lv32_0 when (icmp_ln935_reg_510(0) = '1') else 
        bitcast_ln739_fu_463_p1;
    out_r_TVALID <= regslice_both_out_data_U_vld_out;

    out_r_TVALID_int_assign_proc : process(ap_CS_fsm_state10, out_r_TREADY_int)
    begin
        if (((out_r_TREADY_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state10))) then 
            out_r_TVALID_int <= ap_const_logic_1;
        else 
            out_r_TVALID_int <= ap_const_logic_0;
        end if; 
    end process;

    p_Result_10_fu_283_p2 <= (tmp_V_4_reg_515 and lshr_ln947_fu_277_p2);
    p_Result_13_fu_220_p3 <= (ap_const_lv12_FFF & p_Result_s_fu_210_p4);
    p_Result_14_fu_447_p5 <= (m_6_fu_427_p1(63 downto 32) & tmp_169_i_fu_440_p3 & m_6_fu_427_p1(22 downto 0));
    p_Result_7_fu_332_p3 <= tmp_V_4_reg_515(to_integer(unsigned(add_ln949_fu_327_p2)) downto to_integer(unsigned(add_ln949_fu_327_p2))) when (to_integer(unsigned(add_ln949_fu_327_p2))>= 0 and to_integer(unsigned(add_ln949_fu_327_p2))<=19) else "-";
    
    p_Result_s_fu_210_p4_proc : process(tmp_V_4_fu_205_p3)
    variable vlo_cpy : STD_LOGIC_VECTOR(20+32 - 1 downto 0);
    variable vhi_cpy : STD_LOGIC_VECTOR(20+32 - 1 downto 0);
    variable v0_cpy : STD_LOGIC_VECTOR(20 - 1 downto 0);
    variable p_Result_s_fu_210_p4_i : integer;
    variable section : STD_LOGIC_VECTOR(20 - 1 downto 0);
    variable tmp_mask : STD_LOGIC_VECTOR(20 - 1 downto 0);
    variable resvalue, res_value, res_mask : STD_LOGIC_VECTOR(20 - 1 downto 0);
    begin
        vlo_cpy := (others => '0');
        vlo_cpy(5 - 1 downto 0) := ap_const_lv32_13(5 - 1 downto 0);
        vhi_cpy := (others => '0');
        vhi_cpy(5 - 1 downto 0) := ap_const_lv32_0(5 - 1 downto 0);
        v0_cpy := tmp_V_4_fu_205_p3;
        if (vlo_cpy(5 - 1 downto 0) > vhi_cpy(5 - 1 downto 0)) then
            vhi_cpy(5-1 downto 0) := std_logic_vector(20-1-unsigned(ap_const_lv32_0(5-1 downto 0)));
            vlo_cpy(5-1 downto 0) := std_logic_vector(20-1-unsigned(ap_const_lv32_13(5-1 downto 0)));
            for p_Result_s_fu_210_p4_i in 0 to 20-1 loop
                v0_cpy(p_Result_s_fu_210_p4_i) := tmp_V_4_fu_205_p3(20-1-p_Result_s_fu_210_p4_i);
            end loop;
        end if;
        res_value := std_logic_vector(shift_right(unsigned(v0_cpy), to_integer(unsigned('0' & vlo_cpy(5-1 downto 0)))));

        section := (others=>'0');
        section(5-1 downto 0) := std_logic_vector(unsigned(vhi_cpy(5-1 downto 0)) - unsigned(vlo_cpy(5-1 downto 0)));
        tmp_mask := (others => '1');
        res_mask := std_logic_vector(shift_left(unsigned(tmp_mask),to_integer(unsigned('0' & section(20-1 downto 0)))));
        res_mask := res_mask(20-2 downto 0) & '0';
        resvalue := res_value and not res_mask;
        p_Result_s_fu_210_p4 <= resvalue(20-1 downto 0);
    end process;

    select_ln964_fu_420_p3 <= 
        ap_const_lv8_7F when (tmp_23_reg_616(0) = '1') else 
        ap_const_lv8_7E;
    sub_ln944_fu_240_p2 <= std_logic_vector(unsigned(ap_const_lv32_14) - unsigned(l_reg_523));
    sub_ln947_fu_253_p2 <= std_logic_vector(unsigned(ap_const_lv5_D) - unsigned(trunc_ln947_fu_249_p1));
    sub_ln958_fu_299_p2 <= std_logic_vector(unsigned(ap_const_lv32_19) - unsigned(sub_ln944_reg_533));
    sub_ln964_fu_430_p2 <= std_logic_vector(unsigned(ap_const_lv8_8) - unsigned(trunc_ln943_reg_528));
    tmp_169_i_fu_440_p3 <= (p_Result_12_reg_499 & add_ln964_fu_435_p2);
    tmp_22_fu_314_p3 <= lsb_index_reg_550(31 downto 31);
    tmp_V_4_fu_205_p3 <= 
        tmp_V_reg_505 when (p_Result_12_reg_499(0) = '1') else 
        tmp_V_3_reg_493;
    tmp_V_fu_194_p2 <= std_logic_vector(unsigned(ap_const_lv20_0) - unsigned(tmp_V_3_fu_174_p5));
    trunc_ln738_fu_459_p1 <= p_Result_14_fu_447_p5(32 - 1 downto 0);
    trunc_ln943_fu_236_p1 <= l_fu_228_p3(8 - 1 downto 0);
    trunc_ln944_fu_245_p1 <= sub_ln944_fu_240_p2(20 - 1 downto 0);
    trunc_ln947_fu_249_p1 <= sub_ln944_fu_240_p2(5 - 1 downto 0);
    xor_ln949_fu_321_p2 <= (tmp_22_fu_314_p3 xor ap_const_lv1_1);
    zext_ln947_fu_274_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sub_ln947_reg_545),20));
    zext_ln958_fu_384_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lshr_ln958_reg_601),64));
    zext_ln961_fu_393_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln_i_reg_576),64));
end behav;
