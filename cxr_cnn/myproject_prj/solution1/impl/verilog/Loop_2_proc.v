// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module Loop_2_proc (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        out_r_TDATA,
        out_r_TVALID,
        out_r_TREADY,
        out_r_TLAST,
        p_read,
        tmp_data_V_0,
        tmp_data_V_1,
        tmp_data_V_2
);

parameter    ap_ST_fsm_state1 = 11'd1;
parameter    ap_ST_fsm_state2 = 11'd2;
parameter    ap_ST_fsm_state3 = 11'd4;
parameter    ap_ST_fsm_state4 = 11'd8;
parameter    ap_ST_fsm_state5 = 11'd16;
parameter    ap_ST_fsm_state6 = 11'd32;
parameter    ap_ST_fsm_state7 = 11'd64;
parameter    ap_ST_fsm_state8 = 11'd128;
parameter    ap_ST_fsm_state9 = 11'd256;
parameter    ap_ST_fsm_state10 = 11'd512;
parameter    ap_ST_fsm_state11 = 11'd1024;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
output  [31:0] out_r_TDATA;
output   out_r_TVALID;
input   out_r_TREADY;
output  [0:0] out_r_TLAST;
input  [0:0] p_read;
input  [19:0] tmp_data_V_0;
input  [19:0] tmp_data_V_1;
input  [19:0] tmp_data_V_2;

reg ap_done;
reg ap_idle;
reg ap_ready;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [10:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    out_r_TDATA_blk_n;
wire    ap_CS_fsm_state10;
wire    ap_CS_fsm_state11;
reg    ap_block_state1;
wire   [1:0] j_fu_157_p2;
reg   [1:0] j_reg_483;
wire    ap_CS_fsm_state2;
wire    regslice_both_out_data_U_apdone_blk;
wire   [0:0] last_fu_169_p2;
reg   [0:0] last_reg_488;
wire   [0:0] icmp_ln31_fu_151_p2;
wire   [19:0] tmp_V_3_fu_174_p5;
reg   [19:0] tmp_V_3_reg_493;
reg   [0:0] p_Result_12_reg_499;
wire   [19:0] tmp_V_fu_194_p2;
reg   [19:0] tmp_V_reg_505;
wire   [0:0] icmp_ln935_fu_200_p2;
reg   [0:0] icmp_ln935_reg_510;
wire    ap_CS_fsm_state3;
wire   [19:0] tmp_V_4_fu_205_p3;
reg   [19:0] tmp_V_4_reg_515;
reg   [31:0] l_fu_228_p3;
reg   [31:0] l_reg_523;
wire   [7:0] trunc_ln943_fu_236_p1;
reg   [7:0] trunc_ln943_reg_528;
wire   [31:0] sub_ln944_fu_240_p2;
reg   [31:0] sub_ln944_reg_533;
wire    ap_CS_fsm_state4;
wire   [19:0] trunc_ln944_fu_245_p1;
reg   [19:0] trunc_ln944_reg_540;
wire   [4:0] sub_ln947_fu_253_p2;
reg   [4:0] sub_ln947_reg_545;
wire   [31:0] lsb_index_fu_259_p2;
reg   [31:0] lsb_index_reg_550;
wire    ap_CS_fsm_state5;
reg   [30:0] tmp_reg_556;
wire   [0:0] icmp_ln947_1_fu_288_p2;
reg   [0:0] icmp_ln947_1_reg_561;
wire   [31:0] add_ln958_fu_294_p2;
reg   [31:0] add_ln958_reg_566;
wire   [31:0] sub_ln958_fu_299_p2;
reg   [31:0] sub_ln958_reg_571;
wire   [31:0] or_ln_i_fu_351_p3;
reg   [31:0] or_ln_i_reg_576;
wire    ap_CS_fsm_state6;
wire   [0:0] icmp_ln958_fu_365_p2;
reg   [0:0] icmp_ln958_reg_591;
wire   [31:0] grp_fu_370_p2;
reg   [31:0] lshr_ln958_reg_601;
wire    ap_CS_fsm_state7;
wire   [63:0] grp_fu_378_p2;
reg   [63:0] shl_ln958_reg_606;
reg   [62:0] m_5_reg_611;
wire    ap_CS_fsm_state8;
reg   [0:0] tmp_23_reg_616;
wire   [7:0] select_ln964_fu_420_p3;
reg   [7:0] select_ln964_reg_621;
wire    ap_CS_fsm_state9;
reg   [1:0] j3_0_i_reg_140;
wire   [0:0] icmp_ln32_fu_163_p2;
reg   [19:0] p_Result_s_fu_210_p4;
wire   [31:0] p_Result_13_fu_220_p3;
wire   [4:0] trunc_ln947_fu_249_p1;
wire   [19:0] zext_ln947_fu_274_p1;
wire   [19:0] lshr_ln947_fu_277_p2;
wire   [19:0] p_Result_10_fu_283_p2;
wire   [0:0] icmp_ln947_fu_304_p2;
wire   [0:0] tmp_22_fu_314_p3;
wire   [19:0] add_ln949_fu_327_p2;
wire   [0:0] p_Result_7_fu_332_p3;
wire   [0:0] xor_ln949_fu_321_p2;
wire   [0:0] and_ln949_fu_339_p2;
wire   [0:0] a_fu_309_p2;
wire   [0:0] or_ln949_fu_345_p2;
wire   [31:0] grp_fu_370_p0;
wire   [63:0] grp_fu_378_p0;
wire   [63:0] grp_fu_378_p1;
wire   [63:0] zext_ln958_fu_384_p1;
wire   [63:0] zext_ln961_fu_393_p1;
wire   [63:0] m_1_fu_387_p3;
wire   [63:0] m_2_fu_396_p2;
wire   [7:0] sub_ln964_fu_430_p2;
wire   [7:0] add_ln964_fu_435_p2;
wire   [63:0] m_6_fu_427_p1;
wire   [8:0] tmp_169_i_fu_440_p3;
wire   [63:0] p_Result_14_fu_447_p5;
wire   [31:0] trunc_ln738_fu_459_p1;
wire   [31:0] bitcast_ln739_fu_463_p1;
reg   [10:0] ap_NS_fsm;
wire   [31:0] out_r_TDATA_int;
reg    out_r_TVALID_int;
wire    out_r_TREADY_int;
wire    regslice_both_out_data_U_vld_out;
wire    regslice_both_out_last_V_U_apdone_blk;
wire    regslice_both_out_last_V_U_ack_in_dummy;
wire    regslice_both_out_last_V_U_vld_out;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 11'd1;
end

myproject_axi_mux_32_20_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 20 ),
    .din1_WIDTH( 20 ),
    .din2_WIDTH( 20 ),
    .din3_WIDTH( 2 ),
    .dout_WIDTH( 20 ))
myproject_axi_mux_32_20_1_1_U585(
    .din0(tmp_data_V_0),
    .din1(tmp_data_V_1),
    .din2(tmp_data_V_2),
    .din3(j3_0_i_reg_140),
    .dout(tmp_V_3_fu_174_p5)
);

myproject_axi_lshr_32ns_32ns_32_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .OP( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
myproject_axi_lshr_32ns_32ns_32_2_1_U586(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_370_p0),
    .din1(add_ln958_reg_566),
    .ce(1'b1),
    .dout(grp_fu_370_p2)
);

myproject_axi_shl_64ns_32ns_64_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .OP( 0 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 64 ))
myproject_axi_shl_64ns_32ns_64_2_1_U587(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_378_p0),
    .din1(grp_fu_378_p1),
    .ce(1'b1),
    .dout(grp_fu_378_p2)
);

regslice_both #(
    .DataWidth( 32 ))
regslice_both_out_data_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .data_in(out_r_TDATA_int),
    .vld_in(out_r_TVALID_int),
    .ack_in(out_r_TREADY_int),
    .data_out(out_r_TDATA),
    .vld_out(regslice_both_out_data_U_vld_out),
    .ack_out(out_r_TREADY),
    .apdone_blk(regslice_both_out_data_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 1 ))
regslice_both_out_last_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .data_in(last_reg_488),
    .vld_in(out_r_TVALID_int),
    .ack_in(regslice_both_out_last_V_U_ack_in_dummy),
    .data_out(out_r_TLAST),
    .vld_out(regslice_both_out_last_V_U_vld_out),
    .ack_out(out_r_TREADY),
    .apdone_blk(regslice_both_out_last_V_U_apdone_blk)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((icmp_ln31_fu_151_p2 == 1'd1) & (regslice_both_out_data_U_apdone_blk == 1'b0) & (1'b1 == ap_CS_fsm_state2))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((out_r_TREADY_int == 1'b1) & (1'b1 == ap_CS_fsm_state11))) begin
        j3_0_i_reg_140 <= j_reg_483;
    end else if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        j3_0_i_reg_140 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln935_reg_510 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
        add_ln958_reg_566 <= add_ln958_fu_294_p2;
        icmp_ln947_1_reg_561 <= icmp_ln947_1_fu_288_p2;
        lsb_index_reg_550 <= lsb_index_fu_259_p2;
        sub_ln958_reg_571 <= sub_ln958_fu_299_p2;
        tmp_reg_556 <= {{lsb_index_fu_259_p2[31:1]}};
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        icmp_ln935_reg_510 <= icmp_ln935_fu_200_p2;
        l_reg_523 <= l_fu_228_p3;
        tmp_V_4_reg_515 <= tmp_V_4_fu_205_p3;
        trunc_ln943_reg_528 <= trunc_ln943_fu_236_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln935_reg_510 == 1'd0) & (1'b1 == ap_CS_fsm_state6))) begin
        icmp_ln958_reg_591 <= icmp_ln958_fu_365_p2;
        or_ln_i_reg_576[0] <= or_ln_i_fu_351_p3[0];
    end
end

always @ (posedge ap_clk) begin
    if (((regslice_both_out_data_U_apdone_blk == 1'b0) & (1'b1 == ap_CS_fsm_state2))) begin
        j_reg_483 <= j_fu_157_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln31_fu_151_p2 == 1'd0) & (regslice_both_out_data_U_apdone_blk == 1'b0) & (1'b1 == ap_CS_fsm_state2))) begin
        last_reg_488 <= last_fu_169_p2;
        p_Result_12_reg_499 <= tmp_V_3_fu_174_p5[32'd19];
        tmp_V_3_reg_493 <= tmp_V_3_fu_174_p5;
        tmp_V_reg_505 <= tmp_V_fu_194_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln935_reg_510 == 1'd0) & (1'b1 == ap_CS_fsm_state7))) begin
        lshr_ln958_reg_601 <= grp_fu_370_p2;
        shl_ln958_reg_606 <= grp_fu_378_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln935_reg_510 == 1'd0) & (1'b1 == ap_CS_fsm_state8))) begin
        m_5_reg_611 <= {{m_2_fu_396_p2[63:1]}};
        tmp_23_reg_616 <= m_2_fu_396_p2[32'd25];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln935_reg_510 == 1'd0) & (1'b1 == ap_CS_fsm_state9))) begin
        select_ln964_reg_621[0] <= select_ln964_fu_420_p3[0];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln935_reg_510 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        sub_ln944_reg_533 <= sub_ln944_fu_240_p2;
        sub_ln947_reg_545 <= sub_ln947_fu_253_p2;
        trunc_ln944_reg_540 <= trunc_ln944_fu_245_p1;
    end
end

always @ (*) begin
    if (((icmp_ln31_fu_151_p2 == 1'd1) & (regslice_both_out_data_U_apdone_blk == 1'b0) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln31_fu_151_p2 == 1'd1) & (regslice_both_out_data_U_apdone_blk == 1'b0) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state10))) begin
        out_r_TDATA_blk_n = out_r_TREADY_int;
    end else begin
        out_r_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((out_r_TREADY_int == 1'b1) & (1'b1 == ap_CS_fsm_state10))) begin
        out_r_TVALID_int = 1'b1;
    end else begin
        out_r_TVALID_int = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln31_fu_151_p2 == 1'd1) & (regslice_both_out_data_U_apdone_blk == 1'b0) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else if (((icmp_ln31_fu_151_p2 == 1'd0) & (regslice_both_out_data_U_apdone_blk == 1'b0) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            if (((out_r_TREADY_int == 1'b1) & (1'b1 == ap_CS_fsm_state10))) begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end
        end
        ap_ST_fsm_state11 : begin
            if (((out_r_TREADY_int == 1'b1) & (1'b1 == ap_CS_fsm_state11))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign a_fu_309_p2 = (icmp_ln947_fu_304_p2 & icmp_ln947_1_reg_561);

assign add_ln949_fu_327_p2 = ($signed(20'd1048552) + $signed(trunc_ln944_reg_540));

assign add_ln958_fu_294_p2 = ($signed(32'd4294967271) + $signed(sub_ln944_reg_533));

assign add_ln964_fu_435_p2 = (sub_ln964_fu_430_p2 + select_ln964_reg_621);

assign and_ln949_fu_339_p2 = (xor_ln949_fu_321_p2 & p_Result_7_fu_332_p3);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

always @ (*) begin
    ap_block_state1 = ((ap_start == 1'b0) | (ap_done_reg == 1'b1));
end

assign bitcast_ln739_fu_463_p1 = trunc_ln738_fu_459_p1;

assign grp_fu_370_p0 = tmp_V_4_reg_515;

assign grp_fu_378_p0 = tmp_V_4_reg_515;

assign grp_fu_378_p1 = sub_ln958_reg_571;

assign icmp_ln31_fu_151_p2 = ((j3_0_i_reg_140 == 2'd3) ? 1'b1 : 1'b0);

assign icmp_ln32_fu_163_p2 = ((j3_0_i_reg_140 == 2'd2) ? 1'b1 : 1'b0);

assign icmp_ln935_fu_200_p2 = ((tmp_V_3_reg_493 == 20'd0) ? 1'b1 : 1'b0);

assign icmp_ln947_1_fu_288_p2 = ((p_Result_10_fu_283_p2 != 20'd0) ? 1'b1 : 1'b0);

assign icmp_ln947_fu_304_p2 = (($signed(tmp_reg_556) > $signed(31'd0)) ? 1'b1 : 1'b0);

assign icmp_ln958_fu_365_p2 = (($signed(lsb_index_reg_550) > $signed(32'd0)) ? 1'b1 : 1'b0);

assign j_fu_157_p2 = (j3_0_i_reg_140 + 2'd1);


always @ (p_Result_13_fu_220_p3) begin
    if (p_Result_13_fu_220_p3[0] == 1'b1) begin
        l_fu_228_p3 = 32'd0;
    end else if (p_Result_13_fu_220_p3[1] == 1'b1) begin
        l_fu_228_p3 = 32'd1;
    end else if (p_Result_13_fu_220_p3[2] == 1'b1) begin
        l_fu_228_p3 = 32'd2;
    end else if (p_Result_13_fu_220_p3[3] == 1'b1) begin
        l_fu_228_p3 = 32'd3;
    end else if (p_Result_13_fu_220_p3[4] == 1'b1) begin
        l_fu_228_p3 = 32'd4;
    end else if (p_Result_13_fu_220_p3[5] == 1'b1) begin
        l_fu_228_p3 = 32'd5;
    end else if (p_Result_13_fu_220_p3[6] == 1'b1) begin
        l_fu_228_p3 = 32'd6;
    end else if (p_Result_13_fu_220_p3[7] == 1'b1) begin
        l_fu_228_p3 = 32'd7;
    end else if (p_Result_13_fu_220_p3[8] == 1'b1) begin
        l_fu_228_p3 = 32'd8;
    end else if (p_Result_13_fu_220_p3[9] == 1'b1) begin
        l_fu_228_p3 = 32'd9;
    end else if (p_Result_13_fu_220_p3[10] == 1'b1) begin
        l_fu_228_p3 = 32'd10;
    end else if (p_Result_13_fu_220_p3[11] == 1'b1) begin
        l_fu_228_p3 = 32'd11;
    end else if (p_Result_13_fu_220_p3[12] == 1'b1) begin
        l_fu_228_p3 = 32'd12;
    end else if (p_Result_13_fu_220_p3[13] == 1'b1) begin
        l_fu_228_p3 = 32'd13;
    end else if (p_Result_13_fu_220_p3[14] == 1'b1) begin
        l_fu_228_p3 = 32'd14;
    end else if (p_Result_13_fu_220_p3[15] == 1'b1) begin
        l_fu_228_p3 = 32'd15;
    end else if (p_Result_13_fu_220_p3[16] == 1'b1) begin
        l_fu_228_p3 = 32'd16;
    end else if (p_Result_13_fu_220_p3[17] == 1'b1) begin
        l_fu_228_p3 = 32'd17;
    end else if (p_Result_13_fu_220_p3[18] == 1'b1) begin
        l_fu_228_p3 = 32'd18;
    end else if (p_Result_13_fu_220_p3[19] == 1'b1) begin
        l_fu_228_p3 = 32'd19;
    end else if (p_Result_13_fu_220_p3[20] == 1'b1) begin
        l_fu_228_p3 = 32'd20;
    end else if (p_Result_13_fu_220_p3[21] == 1'b1) begin
        l_fu_228_p3 = 32'd21;
    end else if (p_Result_13_fu_220_p3[22] == 1'b1) begin
        l_fu_228_p3 = 32'd22;
    end else if (p_Result_13_fu_220_p3[23] == 1'b1) begin
        l_fu_228_p3 = 32'd23;
    end else if (p_Result_13_fu_220_p3[24] == 1'b1) begin
        l_fu_228_p3 = 32'd24;
    end else if (p_Result_13_fu_220_p3[25] == 1'b1) begin
        l_fu_228_p3 = 32'd25;
    end else if (p_Result_13_fu_220_p3[26] == 1'b1) begin
        l_fu_228_p3 = 32'd26;
    end else if (p_Result_13_fu_220_p3[27] == 1'b1) begin
        l_fu_228_p3 = 32'd27;
    end else if (p_Result_13_fu_220_p3[28] == 1'b1) begin
        l_fu_228_p3 = 32'd28;
    end else if (p_Result_13_fu_220_p3[29] == 1'b1) begin
        l_fu_228_p3 = 32'd29;
    end else if (p_Result_13_fu_220_p3[30] == 1'b1) begin
        l_fu_228_p3 = 32'd30;
    end else if (p_Result_13_fu_220_p3[31] == 1'b1) begin
        l_fu_228_p3 = 32'd31;
    end else begin
        l_fu_228_p3 = 32'd32;
    end
end

assign last_fu_169_p2 = (p_read & icmp_ln32_fu_163_p2);

assign lsb_index_fu_259_p2 = ($signed(32'd4294967272) + $signed(sub_ln944_reg_533));

assign lshr_ln947_fu_277_p2 = 20'd1048575 >> zext_ln947_fu_274_p1;

assign m_1_fu_387_p3 = ((icmp_ln958_reg_591[0:0] === 1'b1) ? zext_ln958_fu_384_p1 : shl_ln958_reg_606);

assign m_2_fu_396_p2 = (zext_ln961_fu_393_p1 + m_1_fu_387_p3);

assign m_6_fu_427_p1 = m_5_reg_611;

assign or_ln949_fu_345_p2 = (and_ln949_fu_339_p2 | a_fu_309_p2);

assign or_ln_i_fu_351_p3 = {{31'd0}, {or_ln949_fu_345_p2}};

assign out_r_TDATA_int = ((icmp_ln935_reg_510[0:0] === 1'b1) ? 32'd0 : bitcast_ln739_fu_463_p1);

assign out_r_TVALID = regslice_both_out_data_U_vld_out;

assign p_Result_10_fu_283_p2 = (tmp_V_4_reg_515 & lshr_ln947_fu_277_p2);

assign p_Result_13_fu_220_p3 = {{12'd4095}, {p_Result_s_fu_210_p4}};

assign p_Result_14_fu_447_p5 = {{m_6_fu_427_p1[63:32]}, {tmp_169_i_fu_440_p3}, {m_6_fu_427_p1[22:0]}};

assign p_Result_7_fu_332_p3 = tmp_V_4_reg_515[add_ln949_fu_327_p2];

integer ap_tvar_int_0;

always @ (tmp_V_4_fu_205_p3) begin
    for (ap_tvar_int_0 = 20 - 1; ap_tvar_int_0 >= 0; ap_tvar_int_0 = ap_tvar_int_0 - 1) begin
        if (ap_tvar_int_0 > 19 - 0) begin
            p_Result_s_fu_210_p4[ap_tvar_int_0] = 1'b0;
        end else begin
            p_Result_s_fu_210_p4[ap_tvar_int_0] = tmp_V_4_fu_205_p3[19 - ap_tvar_int_0];
        end
    end
end

assign select_ln964_fu_420_p3 = ((tmp_23_reg_616[0:0] === 1'b1) ? 8'd127 : 8'd126);

assign sub_ln944_fu_240_p2 = (32'd20 - l_reg_523);

assign sub_ln947_fu_253_p2 = (5'd13 - trunc_ln947_fu_249_p1);

assign sub_ln958_fu_299_p2 = (32'd25 - sub_ln944_reg_533);

assign sub_ln964_fu_430_p2 = (8'd8 - trunc_ln943_reg_528);

assign tmp_169_i_fu_440_p3 = {{p_Result_12_reg_499}, {add_ln964_fu_435_p2}};

assign tmp_22_fu_314_p3 = lsb_index_reg_550[32'd31];

assign tmp_V_4_fu_205_p3 = ((p_Result_12_reg_499[0:0] === 1'b1) ? tmp_V_reg_505 : tmp_V_3_reg_493);

assign tmp_V_fu_194_p2 = (20'd0 - tmp_V_3_fu_174_p5);

assign trunc_ln738_fu_459_p1 = p_Result_14_fu_447_p5[31:0];

assign trunc_ln943_fu_236_p1 = l_fu_228_p3[7:0];

assign trunc_ln944_fu_245_p1 = sub_ln944_fu_240_p2[19:0];

assign trunc_ln947_fu_249_p1 = sub_ln944_fu_240_p2[4:0];

assign xor_ln949_fu_321_p2 = (tmp_22_fu_314_p3 ^ 1'd1);

assign zext_ln947_fu_274_p1 = sub_ln947_reg_545;

assign zext_ln958_fu_384_p1 = lshr_ln958_reg_601;

assign zext_ln961_fu_393_p1 = or_ln_i_reg_576;

always @ (posedge ap_clk) begin
    or_ln_i_reg_576[31:1] <= 31'b0000000000000000000000000000000;
    select_ln964_reg_621[7:1] <= 7'b0111111;
end

endmodule //Loop_2_proc
