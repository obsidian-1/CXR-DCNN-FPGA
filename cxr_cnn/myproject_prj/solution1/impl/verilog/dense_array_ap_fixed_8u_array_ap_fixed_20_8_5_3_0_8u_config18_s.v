// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module dense_array_ap_fixed_8u_array_ap_fixed_20_8_5_3_0_8u_config18_s (
        ap_clk,
        ap_rst,
        ap_start,
        start_full_n,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        start_out,
        start_write,
        data_stream_V_data_0_V_dout,
        data_stream_V_data_0_V_empty_n,
        data_stream_V_data_0_V_read,
        data_stream_V_data_1_V_dout,
        data_stream_V_data_1_V_empty_n,
        data_stream_V_data_1_V_read,
        data_stream_V_data_2_V_dout,
        data_stream_V_data_2_V_empty_n,
        data_stream_V_data_2_V_read,
        data_stream_V_data_3_V_dout,
        data_stream_V_data_3_V_empty_n,
        data_stream_V_data_3_V_read,
        data_stream_V_data_4_V_dout,
        data_stream_V_data_4_V_empty_n,
        data_stream_V_data_4_V_read,
        data_stream_V_data_5_V_dout,
        data_stream_V_data_5_V_empty_n,
        data_stream_V_data_5_V_read,
        data_stream_V_data_6_V_dout,
        data_stream_V_data_6_V_empty_n,
        data_stream_V_data_6_V_read,
        data_stream_V_data_7_V_dout,
        data_stream_V_data_7_V_empty_n,
        data_stream_V_data_7_V_read,
        res_stream_V_data_0_V_din,
        res_stream_V_data_0_V_full_n,
        res_stream_V_data_0_V_write,
        res_stream_V_data_1_V_din,
        res_stream_V_data_1_V_full_n,
        res_stream_V_data_1_V_write,
        res_stream_V_data_2_V_din,
        res_stream_V_data_2_V_full_n,
        res_stream_V_data_2_V_write,
        res_stream_V_data_3_V_din,
        res_stream_V_data_3_V_full_n,
        res_stream_V_data_3_V_write,
        res_stream_V_data_4_V_din,
        res_stream_V_data_4_V_full_n,
        res_stream_V_data_4_V_write,
        res_stream_V_data_5_V_din,
        res_stream_V_data_5_V_full_n,
        res_stream_V_data_5_V_write,
        res_stream_V_data_6_V_din,
        res_stream_V_data_6_V_full_n,
        res_stream_V_data_6_V_write,
        res_stream_V_data_7_V_din,
        res_stream_V_data_7_V_full_n,
        res_stream_V_data_7_V_write
);

parameter    ap_ST_fsm_state1 = 65'd1;
parameter    ap_ST_fsm_pp0_stage0 = 65'd2;
parameter    ap_ST_fsm_state4 = 65'd4;
parameter    ap_ST_fsm_state5 = 65'd8;
parameter    ap_ST_fsm_state6 = 65'd16;
parameter    ap_ST_fsm_state7 = 65'd32;
parameter    ap_ST_fsm_state8 = 65'd64;
parameter    ap_ST_fsm_state9 = 65'd128;
parameter    ap_ST_fsm_state10 = 65'd256;
parameter    ap_ST_fsm_state11 = 65'd512;
parameter    ap_ST_fsm_state12 = 65'd1024;
parameter    ap_ST_fsm_state13 = 65'd2048;
parameter    ap_ST_fsm_state14 = 65'd4096;
parameter    ap_ST_fsm_state15 = 65'd8192;
parameter    ap_ST_fsm_state16 = 65'd16384;
parameter    ap_ST_fsm_state17 = 65'd32768;
parameter    ap_ST_fsm_state18 = 65'd65536;
parameter    ap_ST_fsm_state19 = 65'd131072;
parameter    ap_ST_fsm_state20 = 65'd262144;
parameter    ap_ST_fsm_state21 = 65'd524288;
parameter    ap_ST_fsm_state22 = 65'd1048576;
parameter    ap_ST_fsm_state23 = 65'd2097152;
parameter    ap_ST_fsm_state24 = 65'd4194304;
parameter    ap_ST_fsm_state25 = 65'd8388608;
parameter    ap_ST_fsm_state26 = 65'd16777216;
parameter    ap_ST_fsm_state27 = 65'd33554432;
parameter    ap_ST_fsm_state28 = 65'd67108864;
parameter    ap_ST_fsm_state29 = 65'd134217728;
parameter    ap_ST_fsm_state30 = 65'd268435456;
parameter    ap_ST_fsm_state31 = 65'd536870912;
parameter    ap_ST_fsm_state32 = 65'd1073741824;
parameter    ap_ST_fsm_state33 = 65'd2147483648;
parameter    ap_ST_fsm_state34 = 65'd4294967296;
parameter    ap_ST_fsm_state35 = 65'd8589934592;
parameter    ap_ST_fsm_state36 = 65'd17179869184;
parameter    ap_ST_fsm_state37 = 65'd34359738368;
parameter    ap_ST_fsm_state38 = 65'd68719476736;
parameter    ap_ST_fsm_state39 = 65'd137438953472;
parameter    ap_ST_fsm_state40 = 65'd274877906944;
parameter    ap_ST_fsm_state41 = 65'd549755813888;
parameter    ap_ST_fsm_state42 = 65'd1099511627776;
parameter    ap_ST_fsm_state43 = 65'd2199023255552;
parameter    ap_ST_fsm_state44 = 65'd4398046511104;
parameter    ap_ST_fsm_state45 = 65'd8796093022208;
parameter    ap_ST_fsm_state46 = 65'd17592186044416;
parameter    ap_ST_fsm_state47 = 65'd35184372088832;
parameter    ap_ST_fsm_state48 = 65'd70368744177664;
parameter    ap_ST_fsm_state49 = 65'd140737488355328;
parameter    ap_ST_fsm_state50 = 65'd281474976710656;
parameter    ap_ST_fsm_state51 = 65'd562949953421312;
parameter    ap_ST_fsm_state52 = 65'd1125899906842624;
parameter    ap_ST_fsm_state53 = 65'd2251799813685248;
parameter    ap_ST_fsm_state54 = 65'd4503599627370496;
parameter    ap_ST_fsm_state55 = 65'd9007199254740992;
parameter    ap_ST_fsm_state56 = 65'd18014398509481984;
parameter    ap_ST_fsm_state57 = 65'd36028797018963968;
parameter    ap_ST_fsm_state58 = 65'd72057594037927936;
parameter    ap_ST_fsm_state59 = 65'd144115188075855872;
parameter    ap_ST_fsm_state60 = 65'd288230376151711744;
parameter    ap_ST_fsm_state61 = 65'd576460752303423488;
parameter    ap_ST_fsm_state62 = 65'd1152921504606846976;
parameter    ap_ST_fsm_state63 = 65'd2305843009213693952;
parameter    ap_ST_fsm_state64 = 65'd4611686018427387904;
parameter    ap_ST_fsm_state65 = 65'd9223372036854775808;
parameter    ap_ST_fsm_state66 = 65'd18446744073709551616;

input   ap_clk;
input   ap_rst;
input   ap_start;
input   start_full_n;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
output   start_out;
output   start_write;
input  [19:0] data_stream_V_data_0_V_dout;
input   data_stream_V_data_0_V_empty_n;
output   data_stream_V_data_0_V_read;
input  [19:0] data_stream_V_data_1_V_dout;
input   data_stream_V_data_1_V_empty_n;
output   data_stream_V_data_1_V_read;
input  [19:0] data_stream_V_data_2_V_dout;
input   data_stream_V_data_2_V_empty_n;
output   data_stream_V_data_2_V_read;
input  [19:0] data_stream_V_data_3_V_dout;
input   data_stream_V_data_3_V_empty_n;
output   data_stream_V_data_3_V_read;
input  [19:0] data_stream_V_data_4_V_dout;
input   data_stream_V_data_4_V_empty_n;
output   data_stream_V_data_4_V_read;
input  [19:0] data_stream_V_data_5_V_dout;
input   data_stream_V_data_5_V_empty_n;
output   data_stream_V_data_5_V_read;
input  [19:0] data_stream_V_data_6_V_dout;
input   data_stream_V_data_6_V_empty_n;
output   data_stream_V_data_6_V_read;
input  [19:0] data_stream_V_data_7_V_dout;
input   data_stream_V_data_7_V_empty_n;
output   data_stream_V_data_7_V_read;
output  [19:0] res_stream_V_data_0_V_din;
input   res_stream_V_data_0_V_full_n;
output   res_stream_V_data_0_V_write;
output  [19:0] res_stream_V_data_1_V_din;
input   res_stream_V_data_1_V_full_n;
output   res_stream_V_data_1_V_write;
output  [19:0] res_stream_V_data_2_V_din;
input   res_stream_V_data_2_V_full_n;
output   res_stream_V_data_2_V_write;
output  [19:0] res_stream_V_data_3_V_din;
input   res_stream_V_data_3_V_full_n;
output   res_stream_V_data_3_V_write;
output  [19:0] res_stream_V_data_4_V_din;
input   res_stream_V_data_4_V_full_n;
output   res_stream_V_data_4_V_write;
output  [19:0] res_stream_V_data_5_V_din;
input   res_stream_V_data_5_V_full_n;
output   res_stream_V_data_5_V_write;
output  [19:0] res_stream_V_data_6_V_din;
input   res_stream_V_data_6_V_full_n;
output   res_stream_V_data_6_V_write;
output  [19:0] res_stream_V_data_7_V_din;
input   res_stream_V_data_7_V_full_n;
output   res_stream_V_data_7_V_write;

reg ap_done;
reg ap_idle;
reg start_write;
reg data_stream_V_data_0_V_read;
reg data_stream_V_data_1_V_read;
reg data_stream_V_data_2_V_read;
reg data_stream_V_data_3_V_read;
reg data_stream_V_data_4_V_read;
reg data_stream_V_data_5_V_read;
reg data_stream_V_data_6_V_read;
reg data_stream_V_data_7_V_read;
reg res_stream_V_data_0_V_write;
reg res_stream_V_data_1_V_write;
reg res_stream_V_data_2_V_write;
reg res_stream_V_data_3_V_write;
reg res_stream_V_data_4_V_write;
reg res_stream_V_data_5_V_write;
reg res_stream_V_data_6_V_write;
reg res_stream_V_data_7_V_write;

reg    real_start;
reg    start_once_reg;
reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [64:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    internal_ap_ready;
reg    data_stream_V_data_0_V_blk_n;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage0;
reg    data_stream_V_data_1_V_blk_n;
reg    data_stream_V_data_2_V_blk_n;
reg    data_stream_V_data_3_V_blk_n;
reg    data_stream_V_data_4_V_blk_n;
reg    data_stream_V_data_5_V_blk_n;
reg    data_stream_V_data_6_V_blk_n;
reg    data_stream_V_data_7_V_blk_n;
reg    res_stream_V_data_0_V_blk_n;
wire    ap_CS_fsm_state66;
reg    res_stream_V_data_1_V_blk_n;
reg    res_stream_V_data_2_V_blk_n;
reg    res_stream_V_data_3_V_blk_n;
reg    res_stream_V_data_4_V_blk_n;
reg    res_stream_V_data_5_V_blk_n;
reg    res_stream_V_data_6_V_blk_n;
reg    res_stream_V_data_7_V_blk_n;
reg   [3:0] i_in_0_reg_428;
wire   [0:0] icmp_ln36_fu_516_p2;
reg   [0:0] icmp_ln36_reg_1672;
wire    ap_block_state2_pp0_stage0_iter0;
wire    io_acc_block_signal_op237;
reg    ap_block_state3_pp0_stage0_iter1;
reg    ap_block_pp0_stage0_11001;
wire   [3:0] i_in_fu_522_p2;
reg   [3:0] i_in_reg_1676;
reg    ap_enable_reg_pp0_iter0;
wire    ap_CS_fsm_state4;
reg   [19:0] tmp_data_0_V_reg_2026;
wire    ap_CS_fsm_state65;
reg   [19:0] tmp_data_1_V_reg_2031;
reg   [19:0] tmp_data_2_V_reg_2036;
reg   [19:0] tmp_data_3_V_reg_2041;
reg   [19:0] tmp_data_4_V_reg_2046;
reg   [19:0] tmp_data_5_V_reg_2051;
reg   [19:0] tmp_data_6_V_reg_2056;
reg   [19:0] tmp_data_7_V_reg_2061;
reg    ap_block_state1;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state2;
wire    grp_dense_wrapper_ap_fixed_20_8_5_3_0_ap_fixed_20_8_5_3_0_config18_s_fu_440_ap_start;
wire    grp_dense_wrapper_ap_fixed_20_8_5_3_0_ap_fixed_20_8_5_3_0_config18_s_fu_440_ap_done;
wire    grp_dense_wrapper_ap_fixed_20_8_5_3_0_ap_fixed_20_8_5_3_0_config18_s_fu_440_ap_idle;
wire    grp_dense_wrapper_ap_fixed_20_8_5_3_0_ap_fixed_20_8_5_3_0_config18_s_fu_440_ap_ready;
wire   [19:0] grp_dense_wrapper_ap_fixed_20_8_5_3_0_ap_fixed_20_8_5_3_0_config18_s_fu_440_ap_return_0;
wire   [19:0] grp_dense_wrapper_ap_fixed_20_8_5_3_0_ap_fixed_20_8_5_3_0_config18_s_fu_440_ap_return_1;
wire   [19:0] grp_dense_wrapper_ap_fixed_20_8_5_3_0_ap_fixed_20_8_5_3_0_config18_s_fu_440_ap_return_2;
wire   [19:0] grp_dense_wrapper_ap_fixed_20_8_5_3_0_ap_fixed_20_8_5_3_0_config18_s_fu_440_ap_return_3;
wire   [19:0] grp_dense_wrapper_ap_fixed_20_8_5_3_0_ap_fixed_20_8_5_3_0_config18_s_fu_440_ap_return_4;
wire   [19:0] grp_dense_wrapper_ap_fixed_20_8_5_3_0_ap_fixed_20_8_5_3_0_config18_s_fu_440_ap_return_5;
wire   [19:0] grp_dense_wrapper_ap_fixed_20_8_5_3_0_ap_fixed_20_8_5_3_0_config18_s_fu_440_ap_return_6;
wire   [19:0] grp_dense_wrapper_ap_fixed_20_8_5_3_0_ap_fixed_20_8_5_3_0_config18_s_fu_440_ap_return_7;
reg   [3:0] ap_phi_mux_i_in_0_phi_fu_432_p4;
reg    grp_dense_wrapper_ap_fixed_20_8_5_3_0_ap_fixed_20_8_5_3_0_config18_s_fu_440_ap_start_reg;
reg   [64:0] ap_NS_fsm;
wire    ap_NS_fsm_state4;
reg   [19:0] data_64_V_fu_92;
reg   [19:0] data_65_V_fu_96;
reg   [19:0] data_66_V_fu_100;
reg   [19:0] data_67_V_fu_104;
reg   [19:0] data_68_V_fu_108;
reg   [19:0] data_69_V_fu_112;
reg   [19:0] data_70_V_fu_116;
reg   [19:0] data_71_V_fu_120;
reg   [19:0] data_64_V_1_fu_124;
reg   [19:0] data_65_V_1_fu_128;
reg   [19:0] data_66_V_1_fu_132;
reg   [19:0] data_67_V_1_fu_136;
reg   [19:0] data_68_V_1_fu_140;
reg   [19:0] data_69_V_1_fu_144;
reg   [19:0] data_70_V_1_fu_148;
reg   [19:0] data_71_V_1_fu_152;
reg   [19:0] data_64_V_2_fu_156;
reg   [19:0] data_65_V_2_fu_160;
reg   [19:0] data_66_V_2_fu_164;
reg   [19:0] data_67_V_2_fu_168;
reg   [19:0] data_68_V_2_fu_172;
reg   [19:0] data_69_V_2_fu_176;
reg   [19:0] data_70_V_2_fu_180;
reg   [19:0] data_71_V_2_fu_184;
reg   [19:0] data_64_V_3_fu_188;
reg   [19:0] data_65_V_3_fu_192;
reg   [19:0] data_66_V_3_fu_196;
reg   [19:0] data_67_V_3_fu_200;
reg   [19:0] data_68_V_3_fu_204;
reg   [19:0] data_69_V_3_fu_208;
reg   [19:0] data_70_V_3_fu_212;
reg   [19:0] data_71_V_3_fu_216;
reg   [19:0] data_64_V_4_fu_220;
reg   [19:0] data_65_V_4_fu_224;
reg   [19:0] data_66_V_4_fu_228;
reg   [19:0] data_67_V_4_fu_232;
reg   [19:0] data_68_V_4_fu_236;
reg   [19:0] data_69_V_4_fu_240;
reg   [19:0] data_70_V_4_fu_244;
reg   [19:0] data_71_V_4_fu_248;
reg   [19:0] data_64_V_5_fu_252;
reg   [19:0] data_65_V_5_fu_256;
reg   [19:0] data_66_V_5_fu_260;
reg   [19:0] data_67_V_5_fu_264;
reg   [19:0] data_68_V_5_fu_268;
reg   [19:0] data_69_V_5_fu_272;
reg   [19:0] data_70_V_5_fu_276;
reg   [19:0] data_71_V_5_fu_280;
reg   [19:0] data_64_V_6_fu_284;
reg   [19:0] data_65_V_6_fu_288;
reg   [19:0] data_66_V_6_fu_292;
reg   [19:0] data_67_V_6_fu_296;
reg   [19:0] data_68_V_6_fu_300;
reg   [19:0] data_69_V_6_fu_304;
reg   [19:0] data_70_V_6_fu_308;
reg   [19:0] data_71_V_6_fu_312;
reg   [19:0] data_64_V_7_fu_316;
reg   [19:0] data_65_V_7_fu_320;
reg   [19:0] data_66_V_7_fu_324;
reg   [19:0] data_67_V_7_fu_328;
reg   [19:0] data_68_V_7_fu_332;
reg   [19:0] data_69_V_7_fu_336;
reg   [19:0] data_70_V_7_fu_340;
reg   [19:0] data_71_V_7_fu_344;
reg   [19:0] data_64_V_8_fu_348;
reg   [19:0] data_65_V_8_fu_352;
reg   [19:0] data_66_V_8_fu_356;
reg   [19:0] data_67_V_8_fu_360;
reg   [19:0] data_68_V_8_fu_364;
reg   [19:0] data_69_V_8_fu_368;
reg   [19:0] data_70_V_8_fu_372;
reg   [19:0] data_71_V_8_fu_376;
wire    io_acc_block_signal_op470;
reg    ap_idle_pp0;
wire    ap_enable_pp0;

// power-on initialization
initial begin
#0 start_once_reg = 1'b0;
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 65'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 grp_dense_wrapper_ap_fixed_20_8_5_3_0_ap_fixed_20_8_5_3_0_config18_s_fu_440_ap_start_reg = 1'b0;
end

dense_wrapper_ap_fixed_20_8_5_3_0_ap_fixed_20_8_5_3_0_config18_s grp_dense_wrapper_ap_fixed_20_8_5_3_0_ap_fixed_20_8_5_3_0_config18_s_fu_440(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_dense_wrapper_ap_fixed_20_8_5_3_0_ap_fixed_20_8_5_3_0_config18_s_fu_440_ap_start),
    .ap_done(grp_dense_wrapper_ap_fixed_20_8_5_3_0_ap_fixed_20_8_5_3_0_config18_s_fu_440_ap_done),
    .ap_idle(grp_dense_wrapper_ap_fixed_20_8_5_3_0_ap_fixed_20_8_5_3_0_config18_s_fu_440_ap_idle),
    .ap_ready(grp_dense_wrapper_ap_fixed_20_8_5_3_0_ap_fixed_20_8_5_3_0_config18_s_fu_440_ap_ready),
    .data_0_V_read(data_64_V_fu_92),
    .data_1_V_read(data_65_V_fu_96),
    .data_2_V_read(data_66_V_fu_100),
    .data_3_V_read(data_67_V_fu_104),
    .data_4_V_read(data_68_V_fu_108),
    .data_5_V_read(data_69_V_fu_112),
    .data_6_V_read(data_70_V_fu_116),
    .data_7_V_read(data_71_V_fu_120),
    .data_8_V_read(data_64_V_1_fu_124),
    .data_9_V_read(data_65_V_1_fu_128),
    .data_10_V_read(data_66_V_1_fu_132),
    .data_11_V_read(data_67_V_1_fu_136),
    .data_12_V_read(data_68_V_1_fu_140),
    .data_13_V_read(data_69_V_1_fu_144),
    .data_14_V_read(data_70_V_1_fu_148),
    .data_15_V_read(data_71_V_1_fu_152),
    .data_16_V_read(data_64_V_2_fu_156),
    .data_17_V_read(data_65_V_2_fu_160),
    .data_18_V_read(data_66_V_2_fu_164),
    .data_19_V_read(data_67_V_2_fu_168),
    .data_20_V_read(data_68_V_2_fu_172),
    .data_21_V_read(data_69_V_2_fu_176),
    .data_22_V_read(data_70_V_2_fu_180),
    .data_23_V_read(data_71_V_2_fu_184),
    .data_24_V_read(data_64_V_3_fu_188),
    .data_25_V_read(data_65_V_3_fu_192),
    .data_26_V_read(data_66_V_3_fu_196),
    .data_27_V_read(data_67_V_3_fu_200),
    .data_28_V_read(data_68_V_3_fu_204),
    .data_29_V_read(data_69_V_3_fu_208),
    .data_30_V_read(data_70_V_3_fu_212),
    .data_31_V_read(data_71_V_3_fu_216),
    .data_32_V_read(data_64_V_4_fu_220),
    .data_33_V_read(data_65_V_4_fu_224),
    .data_34_V_read(data_66_V_4_fu_228),
    .data_35_V_read(data_67_V_4_fu_232),
    .data_36_V_read(data_68_V_4_fu_236),
    .data_37_V_read(data_69_V_4_fu_240),
    .data_38_V_read(data_70_V_4_fu_244),
    .data_39_V_read(data_71_V_4_fu_248),
    .data_40_V_read(data_64_V_5_fu_252),
    .data_41_V_read(data_65_V_5_fu_256),
    .data_42_V_read(data_66_V_5_fu_260),
    .data_43_V_read(data_67_V_5_fu_264),
    .data_44_V_read(data_68_V_5_fu_268),
    .data_45_V_read(data_69_V_5_fu_272),
    .data_46_V_read(data_70_V_5_fu_276),
    .data_47_V_read(data_71_V_5_fu_280),
    .data_48_V_read(data_64_V_6_fu_284),
    .data_49_V_read(data_65_V_6_fu_288),
    .data_50_V_read(data_66_V_6_fu_292),
    .data_51_V_read(data_67_V_6_fu_296),
    .data_52_V_read(data_68_V_6_fu_300),
    .data_53_V_read(data_69_V_6_fu_304),
    .data_54_V_read(data_70_V_6_fu_308),
    .data_55_V_read(data_71_V_6_fu_312),
    .data_56_V_read(data_64_V_7_fu_316),
    .data_57_V_read(data_65_V_7_fu_320),
    .data_58_V_read(data_66_V_7_fu_324),
    .data_59_V_read(data_67_V_7_fu_328),
    .data_60_V_read(data_68_V_7_fu_332),
    .data_61_V_read(data_69_V_7_fu_336),
    .data_62_V_read(data_70_V_7_fu_340),
    .data_63_V_read(data_71_V_7_fu_344),
    .data_64_V_read(data_64_V_8_fu_348),
    .data_65_V_read(data_65_V_8_fu_352),
    .data_66_V_read(data_66_V_8_fu_356),
    .data_67_V_read(data_67_V_8_fu_360),
    .data_68_V_read(data_68_V_8_fu_364),
    .data_69_V_read(data_69_V_8_fu_368),
    .data_70_V_read(data_70_V_8_fu_372),
    .data_71_V_read(data_71_V_8_fu_376),
    .ap_return_0(grp_dense_wrapper_ap_fixed_20_8_5_3_0_ap_fixed_20_8_5_3_0_config18_s_fu_440_ap_return_0),
    .ap_return_1(grp_dense_wrapper_ap_fixed_20_8_5_3_0_ap_fixed_20_8_5_3_0_config18_s_fu_440_ap_return_1),
    .ap_return_2(grp_dense_wrapper_ap_fixed_20_8_5_3_0_ap_fixed_20_8_5_3_0_config18_s_fu_440_ap_return_2),
    .ap_return_3(grp_dense_wrapper_ap_fixed_20_8_5_3_0_ap_fixed_20_8_5_3_0_config18_s_fu_440_ap_return_3),
    .ap_return_4(grp_dense_wrapper_ap_fixed_20_8_5_3_0_ap_fixed_20_8_5_3_0_config18_s_fu_440_ap_return_4),
    .ap_return_5(grp_dense_wrapper_ap_fixed_20_8_5_3_0_ap_fixed_20_8_5_3_0_config18_s_fu_440_ap_return_5),
    .ap_return_6(grp_dense_wrapper_ap_fixed_20_8_5_3_0_ap_fixed_20_8_5_3_0_config18_s_fu_440_ap_return_6),
    .ap_return_7(grp_dense_wrapper_ap_fixed_20_8_5_3_0_ap_fixed_20_8_5_3_0_config18_s_fu_440_ap_return_7)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((io_acc_block_signal_op470 == 1'b1) & (1'b1 == ap_CS_fsm_state66))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter0_state2) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((~((ap_done_reg == 1'b1) | (real_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter0_state2))) begin
            ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state2);
        end else if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end else if ((~((ap_done_reg == 1'b1) | (real_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_dense_wrapper_ap_fixed_20_8_5_3_0_ap_fixed_20_8_5_3_0_config18_s_fu_440_ap_start_reg <= 1'b0;
    end else begin
        if (((1'b1 == ap_NS_fsm_state4) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
            grp_dense_wrapper_ap_fixed_20_8_5_3_0_ap_fixed_20_8_5_3_0_config18_s_fu_440_ap_start_reg <= 1'b1;
        end else if ((grp_dense_wrapper_ap_fixed_20_8_5_3_0_ap_fixed_20_8_5_3_0_config18_s_fu_440_ap_ready == 1'b1)) begin
            grp_dense_wrapper_ap_fixed_20_8_5_3_0_ap_fixed_20_8_5_3_0_config18_s_fu_440_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        start_once_reg <= 1'b0;
    end else begin
        if (((internal_ap_ready == 1'b0) & (real_start == 1'b1))) begin
            start_once_reg <= 1'b1;
        end else if ((internal_ap_ready == 1'b1)) begin
            start_once_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln36_reg_1672 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        i_in_0_reg_428 <= i_in_reg_1676;
    end else if ((~((ap_done_reg == 1'b1) | (real_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        i_in_0_reg_428 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (i_in_0_reg_428 == 4'd1))) begin
        data_64_V_1_fu_124 <= data_stream_V_data_0_V_dout;
        data_65_V_1_fu_128 <= data_stream_V_data_1_V_dout;
        data_66_V_1_fu_132 <= data_stream_V_data_2_V_dout;
        data_67_V_1_fu_136 <= data_stream_V_data_3_V_dout;
        data_68_V_1_fu_140 <= data_stream_V_data_4_V_dout;
        data_69_V_1_fu_144 <= data_stream_V_data_5_V_dout;
        data_70_V_1_fu_148 <= data_stream_V_data_6_V_dout;
        data_71_V_1_fu_152 <= data_stream_V_data_7_V_dout;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (i_in_0_reg_428 == 4'd2))) begin
        data_64_V_2_fu_156 <= data_stream_V_data_0_V_dout;
        data_65_V_2_fu_160 <= data_stream_V_data_1_V_dout;
        data_66_V_2_fu_164 <= data_stream_V_data_2_V_dout;
        data_67_V_2_fu_168 <= data_stream_V_data_3_V_dout;
        data_68_V_2_fu_172 <= data_stream_V_data_4_V_dout;
        data_69_V_2_fu_176 <= data_stream_V_data_5_V_dout;
        data_70_V_2_fu_180 <= data_stream_V_data_6_V_dout;
        data_71_V_2_fu_184 <= data_stream_V_data_7_V_dout;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (i_in_0_reg_428 == 4'd3))) begin
        data_64_V_3_fu_188 <= data_stream_V_data_0_V_dout;
        data_65_V_3_fu_192 <= data_stream_V_data_1_V_dout;
        data_66_V_3_fu_196 <= data_stream_V_data_2_V_dout;
        data_67_V_3_fu_200 <= data_stream_V_data_3_V_dout;
        data_68_V_3_fu_204 <= data_stream_V_data_4_V_dout;
        data_69_V_3_fu_208 <= data_stream_V_data_5_V_dout;
        data_70_V_3_fu_212 <= data_stream_V_data_6_V_dout;
        data_71_V_3_fu_216 <= data_stream_V_data_7_V_dout;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (i_in_0_reg_428 == 4'd4))) begin
        data_64_V_4_fu_220 <= data_stream_V_data_0_V_dout;
        data_65_V_4_fu_224 <= data_stream_V_data_1_V_dout;
        data_66_V_4_fu_228 <= data_stream_V_data_2_V_dout;
        data_67_V_4_fu_232 <= data_stream_V_data_3_V_dout;
        data_68_V_4_fu_236 <= data_stream_V_data_4_V_dout;
        data_69_V_4_fu_240 <= data_stream_V_data_5_V_dout;
        data_70_V_4_fu_244 <= data_stream_V_data_6_V_dout;
        data_71_V_4_fu_248 <= data_stream_V_data_7_V_dout;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (i_in_0_reg_428 == 4'd5))) begin
        data_64_V_5_fu_252 <= data_stream_V_data_0_V_dout;
        data_65_V_5_fu_256 <= data_stream_V_data_1_V_dout;
        data_66_V_5_fu_260 <= data_stream_V_data_2_V_dout;
        data_67_V_5_fu_264 <= data_stream_V_data_3_V_dout;
        data_68_V_5_fu_268 <= data_stream_V_data_4_V_dout;
        data_69_V_5_fu_272 <= data_stream_V_data_5_V_dout;
        data_70_V_5_fu_276 <= data_stream_V_data_6_V_dout;
        data_71_V_5_fu_280 <= data_stream_V_data_7_V_dout;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (i_in_0_reg_428 == 4'd6))) begin
        data_64_V_6_fu_284 <= data_stream_V_data_0_V_dout;
        data_65_V_6_fu_288 <= data_stream_V_data_1_V_dout;
        data_66_V_6_fu_292 <= data_stream_V_data_2_V_dout;
        data_67_V_6_fu_296 <= data_stream_V_data_3_V_dout;
        data_68_V_6_fu_300 <= data_stream_V_data_4_V_dout;
        data_69_V_6_fu_304 <= data_stream_V_data_5_V_dout;
        data_70_V_6_fu_308 <= data_stream_V_data_6_V_dout;
        data_71_V_6_fu_312 <= data_stream_V_data_7_V_dout;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (i_in_0_reg_428 == 4'd7))) begin
        data_64_V_7_fu_316 <= data_stream_V_data_0_V_dout;
        data_65_V_7_fu_320 <= data_stream_V_data_1_V_dout;
        data_66_V_7_fu_324 <= data_stream_V_data_2_V_dout;
        data_67_V_7_fu_328 <= data_stream_V_data_3_V_dout;
        data_68_V_7_fu_332 <= data_stream_V_data_4_V_dout;
        data_69_V_7_fu_336 <= data_stream_V_data_5_V_dout;
        data_70_V_7_fu_340 <= data_stream_V_data_6_V_dout;
        data_71_V_7_fu_344 <= data_stream_V_data_7_V_dout;
    end
end

always @ (posedge ap_clk) begin
    if ((~(i_in_0_reg_428 == 4'd7) & ~(i_in_0_reg_428 == 4'd6) & ~(i_in_0_reg_428 == 4'd5) & ~(i_in_0_reg_428 == 4'd4) & ~(i_in_0_reg_428 == 4'd3) & ~(i_in_0_reg_428 == 4'd2) & ~(i_in_0_reg_428 == 4'd1) & ~(i_in_0_reg_428 == 4'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        data_64_V_8_fu_348 <= data_stream_V_data_0_V_dout;
        data_65_V_8_fu_352 <= data_stream_V_data_1_V_dout;
        data_66_V_8_fu_356 <= data_stream_V_data_2_V_dout;
        data_67_V_8_fu_360 <= data_stream_V_data_3_V_dout;
        data_68_V_8_fu_364 <= data_stream_V_data_4_V_dout;
        data_69_V_8_fu_368 <= data_stream_V_data_5_V_dout;
        data_70_V_8_fu_372 <= data_stream_V_data_6_V_dout;
        data_71_V_8_fu_376 <= data_stream_V_data_7_V_dout;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (i_in_0_reg_428 == 4'd0))) begin
        data_64_V_fu_92 <= data_stream_V_data_0_V_dout;
        data_65_V_fu_96 <= data_stream_V_data_1_V_dout;
        data_66_V_fu_100 <= data_stream_V_data_2_V_dout;
        data_67_V_fu_104 <= data_stream_V_data_3_V_dout;
        data_68_V_fu_108 <= data_stream_V_data_4_V_dout;
        data_69_V_fu_112 <= data_stream_V_data_5_V_dout;
        data_70_V_fu_116 <= data_stream_V_data_6_V_dout;
        data_71_V_fu_120 <= data_stream_V_data_7_V_dout;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        i_in_reg_1676 <= i_in_fu_522_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln36_reg_1672 <= icmp_ln36_fu_516_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state65)) begin
        tmp_data_0_V_reg_2026 <= grp_dense_wrapper_ap_fixed_20_8_5_3_0_ap_fixed_20_8_5_3_0_config18_s_fu_440_ap_return_0;
        tmp_data_1_V_reg_2031 <= grp_dense_wrapper_ap_fixed_20_8_5_3_0_ap_fixed_20_8_5_3_0_config18_s_fu_440_ap_return_1;
        tmp_data_2_V_reg_2036 <= grp_dense_wrapper_ap_fixed_20_8_5_3_0_ap_fixed_20_8_5_3_0_config18_s_fu_440_ap_return_2;
        tmp_data_3_V_reg_2041 <= grp_dense_wrapper_ap_fixed_20_8_5_3_0_ap_fixed_20_8_5_3_0_config18_s_fu_440_ap_return_3;
        tmp_data_4_V_reg_2046 <= grp_dense_wrapper_ap_fixed_20_8_5_3_0_ap_fixed_20_8_5_3_0_config18_s_fu_440_ap_return_4;
        tmp_data_5_V_reg_2051 <= grp_dense_wrapper_ap_fixed_20_8_5_3_0_ap_fixed_20_8_5_3_0_config18_s_fu_440_ap_return_5;
        tmp_data_6_V_reg_2056 <= grp_dense_wrapper_ap_fixed_20_8_5_3_0_ap_fixed_20_8_5_3_0_config18_s_fu_440_ap_return_6;
        tmp_data_7_V_reg_2061 <= grp_dense_wrapper_ap_fixed_20_8_5_3_0_ap_fixed_20_8_5_3_0_config18_s_fu_440_ap_return_7;
    end
end

always @ (*) begin
    if ((icmp_ln36_fu_516_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state2 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state2 = 1'b0;
    end
end

always @ (*) begin
    if (((io_acc_block_signal_op470 == 1'b1) & (1'b1 == ap_CS_fsm_state66))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((real_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln36_reg_1672 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        ap_phi_mux_i_in_0_phi_fu_432_p4 = i_in_reg_1676;
    end else begin
        ap_phi_mux_i_in_0_phi_fu_432_p4 = i_in_0_reg_428;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        data_stream_V_data_0_V_blk_n = data_stream_V_data_0_V_empty_n;
    end else begin
        data_stream_V_data_0_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        data_stream_V_data_0_V_read = 1'b1;
    end else begin
        data_stream_V_data_0_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        data_stream_V_data_1_V_blk_n = data_stream_V_data_1_V_empty_n;
    end else begin
        data_stream_V_data_1_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        data_stream_V_data_1_V_read = 1'b1;
    end else begin
        data_stream_V_data_1_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        data_stream_V_data_2_V_blk_n = data_stream_V_data_2_V_empty_n;
    end else begin
        data_stream_V_data_2_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        data_stream_V_data_2_V_read = 1'b1;
    end else begin
        data_stream_V_data_2_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        data_stream_V_data_3_V_blk_n = data_stream_V_data_3_V_empty_n;
    end else begin
        data_stream_V_data_3_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        data_stream_V_data_3_V_read = 1'b1;
    end else begin
        data_stream_V_data_3_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        data_stream_V_data_4_V_blk_n = data_stream_V_data_4_V_empty_n;
    end else begin
        data_stream_V_data_4_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        data_stream_V_data_4_V_read = 1'b1;
    end else begin
        data_stream_V_data_4_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        data_stream_V_data_5_V_blk_n = data_stream_V_data_5_V_empty_n;
    end else begin
        data_stream_V_data_5_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        data_stream_V_data_5_V_read = 1'b1;
    end else begin
        data_stream_V_data_5_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        data_stream_V_data_6_V_blk_n = data_stream_V_data_6_V_empty_n;
    end else begin
        data_stream_V_data_6_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        data_stream_V_data_6_V_read = 1'b1;
    end else begin
        data_stream_V_data_6_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        data_stream_V_data_7_V_blk_n = data_stream_V_data_7_V_empty_n;
    end else begin
        data_stream_V_data_7_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        data_stream_V_data_7_V_read = 1'b1;
    end else begin
        data_stream_V_data_7_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((io_acc_block_signal_op470 == 1'b1) & (1'b1 == ap_CS_fsm_state66))) begin
        internal_ap_ready = 1'b1;
    end else begin
        internal_ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (start_full_n == 1'b0))) begin
        real_start = 1'b0;
    end else begin
        real_start = ap_start;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state66)) begin
        res_stream_V_data_0_V_blk_n = res_stream_V_data_0_V_full_n;
    end else begin
        res_stream_V_data_0_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((io_acc_block_signal_op470 == 1'b1) & (1'b1 == ap_CS_fsm_state66))) begin
        res_stream_V_data_0_V_write = 1'b1;
    end else begin
        res_stream_V_data_0_V_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state66)) begin
        res_stream_V_data_1_V_blk_n = res_stream_V_data_1_V_full_n;
    end else begin
        res_stream_V_data_1_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((io_acc_block_signal_op470 == 1'b1) & (1'b1 == ap_CS_fsm_state66))) begin
        res_stream_V_data_1_V_write = 1'b1;
    end else begin
        res_stream_V_data_1_V_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state66)) begin
        res_stream_V_data_2_V_blk_n = res_stream_V_data_2_V_full_n;
    end else begin
        res_stream_V_data_2_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((io_acc_block_signal_op470 == 1'b1) & (1'b1 == ap_CS_fsm_state66))) begin
        res_stream_V_data_2_V_write = 1'b1;
    end else begin
        res_stream_V_data_2_V_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state66)) begin
        res_stream_V_data_3_V_blk_n = res_stream_V_data_3_V_full_n;
    end else begin
        res_stream_V_data_3_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((io_acc_block_signal_op470 == 1'b1) & (1'b1 == ap_CS_fsm_state66))) begin
        res_stream_V_data_3_V_write = 1'b1;
    end else begin
        res_stream_V_data_3_V_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state66)) begin
        res_stream_V_data_4_V_blk_n = res_stream_V_data_4_V_full_n;
    end else begin
        res_stream_V_data_4_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((io_acc_block_signal_op470 == 1'b1) & (1'b1 == ap_CS_fsm_state66))) begin
        res_stream_V_data_4_V_write = 1'b1;
    end else begin
        res_stream_V_data_4_V_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state66)) begin
        res_stream_V_data_5_V_blk_n = res_stream_V_data_5_V_full_n;
    end else begin
        res_stream_V_data_5_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((io_acc_block_signal_op470 == 1'b1) & (1'b1 == ap_CS_fsm_state66))) begin
        res_stream_V_data_5_V_write = 1'b1;
    end else begin
        res_stream_V_data_5_V_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state66)) begin
        res_stream_V_data_6_V_blk_n = res_stream_V_data_6_V_full_n;
    end else begin
        res_stream_V_data_6_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((io_acc_block_signal_op470 == 1'b1) & (1'b1 == ap_CS_fsm_state66))) begin
        res_stream_V_data_6_V_write = 1'b1;
    end else begin
        res_stream_V_data_6_V_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state66)) begin
        res_stream_V_data_7_V_blk_n = res_stream_V_data_7_V_full_n;
    end else begin
        res_stream_V_data_7_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((io_acc_block_signal_op470 == 1'b1) & (1'b1 == ap_CS_fsm_state66))) begin
        res_stream_V_data_7_V_write = 1'b1;
    end else begin
        res_stream_V_data_7_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (real_start == 1'b1))) begin
        start_write = 1'b1;
    end else begin
        start_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((ap_done_reg == 1'b1) | (real_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if (~((1'b0 == ap_block_pp0_stage0_subdone) & (icmp_ln36_fu_516_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (icmp_ln36_fu_516_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state24;
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state25;
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_state26;
        end
        ap_ST_fsm_state26 : begin
            ap_NS_fsm = ap_ST_fsm_state27;
        end
        ap_ST_fsm_state27 : begin
            ap_NS_fsm = ap_ST_fsm_state28;
        end
        ap_ST_fsm_state28 : begin
            ap_NS_fsm = ap_ST_fsm_state29;
        end
        ap_ST_fsm_state29 : begin
            ap_NS_fsm = ap_ST_fsm_state30;
        end
        ap_ST_fsm_state30 : begin
            ap_NS_fsm = ap_ST_fsm_state31;
        end
        ap_ST_fsm_state31 : begin
            ap_NS_fsm = ap_ST_fsm_state32;
        end
        ap_ST_fsm_state32 : begin
            ap_NS_fsm = ap_ST_fsm_state33;
        end
        ap_ST_fsm_state33 : begin
            ap_NS_fsm = ap_ST_fsm_state34;
        end
        ap_ST_fsm_state34 : begin
            ap_NS_fsm = ap_ST_fsm_state35;
        end
        ap_ST_fsm_state35 : begin
            ap_NS_fsm = ap_ST_fsm_state36;
        end
        ap_ST_fsm_state36 : begin
            ap_NS_fsm = ap_ST_fsm_state37;
        end
        ap_ST_fsm_state37 : begin
            ap_NS_fsm = ap_ST_fsm_state38;
        end
        ap_ST_fsm_state38 : begin
            ap_NS_fsm = ap_ST_fsm_state39;
        end
        ap_ST_fsm_state39 : begin
            ap_NS_fsm = ap_ST_fsm_state40;
        end
        ap_ST_fsm_state40 : begin
            ap_NS_fsm = ap_ST_fsm_state41;
        end
        ap_ST_fsm_state41 : begin
            ap_NS_fsm = ap_ST_fsm_state42;
        end
        ap_ST_fsm_state42 : begin
            ap_NS_fsm = ap_ST_fsm_state43;
        end
        ap_ST_fsm_state43 : begin
            ap_NS_fsm = ap_ST_fsm_state44;
        end
        ap_ST_fsm_state44 : begin
            ap_NS_fsm = ap_ST_fsm_state45;
        end
        ap_ST_fsm_state45 : begin
            ap_NS_fsm = ap_ST_fsm_state46;
        end
        ap_ST_fsm_state46 : begin
            ap_NS_fsm = ap_ST_fsm_state47;
        end
        ap_ST_fsm_state47 : begin
            ap_NS_fsm = ap_ST_fsm_state48;
        end
        ap_ST_fsm_state48 : begin
            ap_NS_fsm = ap_ST_fsm_state49;
        end
        ap_ST_fsm_state49 : begin
            ap_NS_fsm = ap_ST_fsm_state50;
        end
        ap_ST_fsm_state50 : begin
            ap_NS_fsm = ap_ST_fsm_state51;
        end
        ap_ST_fsm_state51 : begin
            ap_NS_fsm = ap_ST_fsm_state52;
        end
        ap_ST_fsm_state52 : begin
            ap_NS_fsm = ap_ST_fsm_state53;
        end
        ap_ST_fsm_state53 : begin
            ap_NS_fsm = ap_ST_fsm_state54;
        end
        ap_ST_fsm_state54 : begin
            ap_NS_fsm = ap_ST_fsm_state55;
        end
        ap_ST_fsm_state55 : begin
            ap_NS_fsm = ap_ST_fsm_state56;
        end
        ap_ST_fsm_state56 : begin
            ap_NS_fsm = ap_ST_fsm_state57;
        end
        ap_ST_fsm_state57 : begin
            ap_NS_fsm = ap_ST_fsm_state58;
        end
        ap_ST_fsm_state58 : begin
            ap_NS_fsm = ap_ST_fsm_state59;
        end
        ap_ST_fsm_state59 : begin
            ap_NS_fsm = ap_ST_fsm_state60;
        end
        ap_ST_fsm_state60 : begin
            ap_NS_fsm = ap_ST_fsm_state61;
        end
        ap_ST_fsm_state61 : begin
            ap_NS_fsm = ap_ST_fsm_state62;
        end
        ap_ST_fsm_state62 : begin
            ap_NS_fsm = ap_ST_fsm_state63;
        end
        ap_ST_fsm_state63 : begin
            ap_NS_fsm = ap_ST_fsm_state64;
        end
        ap_ST_fsm_state64 : begin
            ap_NS_fsm = ap_ST_fsm_state65;
        end
        ap_ST_fsm_state65 : begin
            ap_NS_fsm = ap_ST_fsm_state66;
        end
        ap_ST_fsm_state66 : begin
            if (((io_acc_block_signal_op470 == 1'b1) & (1'b1 == ap_CS_fsm_state66))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state66;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state65 = ap_CS_fsm[32'd63];

assign ap_CS_fsm_state66 = ap_CS_fsm[32'd64];

assign ap_NS_fsm_state4 = ap_NS_fsm[32'd2];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((io_acc_block_signal_op237 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((io_acc_block_signal_op237 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

always @ (*) begin
    ap_block_state1 = ((ap_done_reg == 1'b1) | (real_start == 1'b0));
end

assign ap_block_state2_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state3_pp0_stage0_iter1 = (io_acc_block_signal_op237 == 1'b0);
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_ready = internal_ap_ready;

assign grp_dense_wrapper_ap_fixed_20_8_5_3_0_ap_fixed_20_8_5_3_0_config18_s_fu_440_ap_start = grp_dense_wrapper_ap_fixed_20_8_5_3_0_ap_fixed_20_8_5_3_0_config18_s_fu_440_ap_start_reg;

assign i_in_fu_522_p2 = (ap_phi_mux_i_in_0_phi_fu_432_p4 + 4'd1);

assign icmp_ln36_fu_516_p2 = ((ap_phi_mux_i_in_0_phi_fu_432_p4 == 4'd9) ? 1'b1 : 1'b0);

assign io_acc_block_signal_op237 = (data_stream_V_data_7_V_empty_n & data_stream_V_data_6_V_empty_n & data_stream_V_data_5_V_empty_n & data_stream_V_data_4_V_empty_n & data_stream_V_data_3_V_empty_n & data_stream_V_data_2_V_empty_n & data_stream_V_data_1_V_empty_n & data_stream_V_data_0_V_empty_n);

assign io_acc_block_signal_op470 = (res_stream_V_data_7_V_full_n & res_stream_V_data_6_V_full_n & res_stream_V_data_5_V_full_n & res_stream_V_data_4_V_full_n & res_stream_V_data_3_V_full_n & res_stream_V_data_2_V_full_n & res_stream_V_data_1_V_full_n & res_stream_V_data_0_V_full_n);

assign res_stream_V_data_0_V_din = tmp_data_0_V_reg_2026;

assign res_stream_V_data_1_V_din = tmp_data_1_V_reg_2031;

assign res_stream_V_data_2_V_din = tmp_data_2_V_reg_2036;

assign res_stream_V_data_3_V_din = tmp_data_3_V_reg_2041;

assign res_stream_V_data_4_V_din = tmp_data_4_V_reg_2046;

assign res_stream_V_data_5_V_din = tmp_data_5_V_reg_2051;

assign res_stream_V_data_6_V_din = tmp_data_6_V_reg_2056;

assign res_stream_V_data_7_V_din = tmp_data_7_V_reg_2061;

assign start_out = real_start;

endmodule //dense_array_ap_fixed_8u_array_ap_fixed_20_8_5_3_0_8u_config18_s
