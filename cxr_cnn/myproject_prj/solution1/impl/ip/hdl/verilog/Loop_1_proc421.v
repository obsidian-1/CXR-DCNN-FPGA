// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module Loop_1_proc421 (
        ap_clk,
        ap_rst,
        ap_start,
        start_full_n,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        start_out,
        start_write,
        in_r_TLAST,
        in_r_TVALID,
        in_r_TREADY,
        in_local_V_data_0_V_din,
        in_local_V_data_0_V_full_n,
        in_local_V_data_0_V_write,
        in_r_TDATA,
        ap_return
);

parameter    ap_ST_fsm_state1 = 7'd1;
parameter    ap_ST_fsm_state2 = 7'd2;
parameter    ap_ST_fsm_state3 = 7'd4;
parameter    ap_ST_fsm_state4 = 7'd8;
parameter    ap_ST_fsm_state5 = 7'd16;
parameter    ap_ST_fsm_state6 = 7'd32;
parameter    ap_ST_fsm_state7 = 7'd64;

input   ap_clk;
input   ap_rst;
input   ap_start;
input   start_full_n;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
output   start_out;
output   start_write;
input  [0:0] in_r_TLAST;
input   in_r_TVALID;
output   in_r_TREADY;
output  [7:0] in_local_V_data_0_V_din;
input   in_local_V_data_0_V_full_n;
output   in_local_V_data_0_V_write;
input  [31:0] in_r_TDATA;
output  [0:0] ap_return;

reg ap_done;
reg ap_idle;
reg start_write;
reg in_r_TREADY;
reg in_local_V_data_0_V_write;
reg[0:0] ap_return;

reg    real_start;
reg    start_once_reg;
reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [6:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    internal_ap_ready;
reg    in_local_V_data_0_V_blk_n;
wire    ap_CS_fsm_state7;
reg    in_r_TDATA_blk_n;
wire    ap_CS_fsm_state2;
wire   [0:0] icmp_ln17_fu_115_p2;
wire   [14:0] i_fu_121_p2;
reg   [14:0] i_reg_357;
reg    ap_block_state2;
wire   [31:0] bitcast_ln705_fu_135_p1;
reg   [31:0] bitcast_ln705_reg_362;
reg   [0:0] tmp_24_reg_368;
wire   [7:0] trunc_ln296_fu_165_p1;
reg   [7:0] trunc_ln296_reg_373;
wire   [0:0] icmp_ln278_fu_169_p2;
reg   [0:0] icmp_ln278_reg_379;
wire  signed [8:0] sub_ln281_fu_175_p2;
reg  signed [8:0] sub_ln281_reg_385;
wire   [0:0] icmp_ln282_fu_181_p2;
reg   [0:0] icmp_ln282_reg_390;
wire   [0:0] icmp_ln284_fu_187_p2;
reg   [0:0] icmp_ln284_reg_395;
wire   [0:0] icmp_ln285_fu_193_p2;
reg   [0:0] icmp_ln285_reg_401;
wire   [7:0] trunc_ln294_fu_199_p1;
reg   [7:0] trunc_ln294_reg_406;
wire   [0:0] or_ln282_fu_203_p2;
reg   [0:0] or_ln282_reg_411;
wire   [0:0] or_ln22_fu_209_p2;
reg   [0:0] or_ln22_reg_417;
wire   [7:0] select_ln285_fu_269_p3;
reg   [7:0] select_ln285_reg_422;
wire    ap_CS_fsm_state3;
wire   [7:0] sub_ln294_fu_277_p2;
reg   [7:0] sub_ln294_reg_427;
wire    ap_CS_fsm_state4;
wire   [0:0] icmp_ln295_fu_292_p2;
reg   [0:0] icmp_ln295_reg_432;
wire   [7:0] select_ln282_fu_314_p3;
reg   [7:0] select_ln282_reg_437;
wire   [7:0] select_ln284_fu_336_p3;
reg   [7:0] select_ln284_reg_442;
wire    ap_CS_fsm_state5;
wire   [7:0] tmp_data_0_V_fu_348_p3;
reg   [7:0] tmp_data_0_V_reg_448;
wire    ap_CS_fsm_state6;
reg   [0:0] is_last_0_i_out_0_reg_93;
reg    ap_block_state1;
reg   [14:0] i_0_i_reg_104;
wire   [7:0] p_Result_i_fu_151_p4;
wire   [30:0] trunc_ln263_fu_139_p1;
wire   [8:0] zext_ln266_fu_161_p1;
wire   [22:0] trunc_ln270_fu_215_p1;
wire   [23:0] tmp_fu_218_p3;
wire  signed [23:0] sext_ln281_fu_226_p1;
wire   [23:0] lshr_ln286_fu_229_p2;
wire   [0:0] tmp_26_fu_239_p3;
wire   [0:0] xor_ln282_fu_254_p2;
wire   [0:0] and_ln285_fu_259_p2;
wire   [0:0] and_ln285_1_fu_264_p2;
wire   [7:0] trunc_ln286_fu_235_p1;
wire   [7:0] select_ln288_fu_246_p3;
wire   [4:0] tmp_25_fu_282_p4;
wire   [0:0] xor_ln278_fu_304_p2;
wire   [0:0] and_ln282_fu_309_p2;
wire   [7:0] select_ln278_fu_298_p3;
wire   [7:0] shl_ln297_fu_321_p2;
wire   [0:0] or_ln284_fu_332_p2;
wire   [7:0] select_ln295_fu_325_p3;
wire   [7:0] sub_ln461_fu_343_p2;
reg   [0:0] ap_return_preg;
reg   [6:0] ap_NS_fsm;
wire    regslice_both_in_last_V_U_apdone_blk;
wire   [0:0] in_r_TLAST_int;
wire    in_r_TVALID_int;
reg    in_r_TREADY_int;
wire    regslice_both_in_last_V_U_ack_in;
wire    regslice_both_in_data_U_apdone_blk;
wire   [31:0] in_r_TDATA_int;
wire    regslice_both_in_data_U_vld_out;
wire    regslice_both_in_data_U_ack_in;

// power-on initialization
initial begin
#0 start_once_reg = 1'b0;
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 7'd1;
#0 ap_return_preg = 1'd0;
end

regslice_both #(
    .DataWidth( 1 ))
regslice_both_in_last_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .data_in(in_r_TLAST),
    .vld_in(in_r_TVALID),
    .ack_in(regslice_both_in_last_V_U_ack_in),
    .data_out(in_r_TLAST_int),
    .vld_out(in_r_TVALID_int),
    .ack_out(in_r_TREADY_int),
    .apdone_blk(regslice_both_in_last_V_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 32 ))
regslice_both_in_data_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .data_in(in_r_TDATA),
    .vld_in(in_r_TVALID),
    .ack_in(regslice_both_in_data_U_ack_in),
    .data_out(in_r_TDATA_int),
    .vld_out(regslice_both_in_data_U_vld_out),
    .ack_out(in_r_TREADY_int),
    .apdone_blk(regslice_both_in_data_U_apdone_blk)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if ((~((icmp_ln17_fu_115_p2 == 1'd0) & (in_r_TVALID_int == 1'b0)) & (icmp_ln17_fu_115_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_preg <= 1'd0;
    end else begin
        if ((~((icmp_ln17_fu_115_p2 == 1'd0) & (in_r_TVALID_int == 1'b0)) & (icmp_ln17_fu_115_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
            ap_return_preg <= is_last_0_i_out_0_reg_93;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        start_once_reg <= 1'b0;
    end else begin
        if (((internal_ap_ready == 1'b0) & (real_start == 1'b1))) begin
            start_once_reg <= 1'b1;
        end else if ((internal_ap_ready == 1'b1)) begin
            start_once_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((in_local_V_data_0_V_full_n == 1'b1) & (1'b1 == ap_CS_fsm_state7))) begin
        i_0_i_reg_104 <= i_reg_357;
    end else if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        i_0_i_reg_104 <= 15'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((in_local_V_data_0_V_full_n == 1'b1) & (1'b1 == ap_CS_fsm_state7))) begin
        is_last_0_i_out_0_reg_93 <= or_ln22_reg_417;
    end else if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        is_last_0_i_out_0_reg_93 <= 1'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((~((icmp_ln17_fu_115_p2 == 1'd0) & (in_r_TVALID_int == 1'b0)) & (icmp_ln17_fu_115_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        bitcast_ln705_reg_362 <= bitcast_ln705_fu_135_p1;
        icmp_ln278_reg_379 <= icmp_ln278_fu_169_p2;
        icmp_ln282_reg_390 <= icmp_ln282_fu_181_p2;
        icmp_ln284_reg_395 <= icmp_ln284_fu_187_p2;
        icmp_ln285_reg_401 <= icmp_ln285_fu_193_p2;
        or_ln22_reg_417 <= or_ln22_fu_209_p2;
        or_ln282_reg_411 <= or_ln282_fu_203_p2;
        sub_ln281_reg_385 <= sub_ln281_fu_175_p2;
        tmp_24_reg_368 <= bitcast_ln705_fu_135_p1[32'd31];
        trunc_ln294_reg_406 <= trunc_ln294_fu_199_p1;
        trunc_ln296_reg_373 <= trunc_ln296_fu_165_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((~((icmp_ln17_fu_115_p2 == 1'd0) & (in_r_TVALID_int == 1'b0)) & (1'b1 == ap_CS_fsm_state2))) begin
        i_reg_357 <= i_fu_121_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        icmp_ln295_reg_432 <= icmp_ln295_fu_292_p2;
        select_ln282_reg_437 <= select_ln282_fu_314_p3;
        sub_ln294_reg_427 <= sub_ln294_fu_277_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        select_ln284_reg_442 <= select_ln284_fu_336_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln278_reg_379 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        select_ln285_reg_422 <= select_ln285_fu_269_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        tmp_data_0_V_reg_448 <= tmp_data_0_V_fu_348_p3;
    end
end

always @ (*) begin
    if ((~((icmp_ln17_fu_115_p2 == 1'd0) & (in_r_TVALID_int == 1'b0)) & (icmp_ln17_fu_115_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((real_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((~((icmp_ln17_fu_115_p2 == 1'd0) & (in_r_TVALID_int == 1'b0)) & (icmp_ln17_fu_115_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_return = is_last_0_i_out_0_reg_93;
    end else begin
        ap_return = ap_return_preg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        in_local_V_data_0_V_blk_n = in_local_V_data_0_V_full_n;
    end else begin
        in_local_V_data_0_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((in_local_V_data_0_V_full_n == 1'b1) & (1'b1 == ap_CS_fsm_state7))) begin
        in_local_V_data_0_V_write = 1'b1;
    end else begin
        in_local_V_data_0_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln17_fu_115_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        in_r_TDATA_blk_n = in_r_TVALID_int;
    end else begin
        in_r_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((in_r_TVALID == 1'b1) & (regslice_both_in_last_V_U_ack_in == 1'b1))) begin
        in_r_TREADY = 1'b1;
    end else begin
        in_r_TREADY = 1'b0;
    end
end

always @ (*) begin
    if ((~((icmp_ln17_fu_115_p2 == 1'd0) & (in_r_TVALID_int == 1'b0)) & (icmp_ln17_fu_115_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        in_r_TREADY_int = 1'b1;
    end else begin
        in_r_TREADY_int = 1'b0;
    end
end

always @ (*) begin
    if ((~((icmp_ln17_fu_115_p2 == 1'd0) & (in_r_TVALID_int == 1'b0)) & (icmp_ln17_fu_115_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        internal_ap_ready = 1'b1;
    end else begin
        internal_ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (start_full_n == 1'b0))) begin
        real_start = 1'b0;
    end else begin
        real_start = ap_start;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (real_start == 1'b1))) begin
        start_write = 1'b1;
    end else begin
        start_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if ((~((icmp_ln17_fu_115_p2 == 1'd0) & (in_r_TVALID_int == 1'b0)) & (icmp_ln17_fu_115_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else if ((~((icmp_ln17_fu_115_p2 == 1'd0) & (in_r_TVALID_int == 1'b0)) & (icmp_ln17_fu_115_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            if (((in_local_V_data_0_V_full_n == 1'b1) & (1'b1 == ap_CS_fsm_state7))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign and_ln282_fu_309_p2 = (xor_ln278_fu_304_p2 & icmp_ln282_reg_390);

assign and_ln285_1_fu_264_p2 = (icmp_ln284_reg_395 & and_ln285_fu_259_p2);

assign and_ln285_fu_259_p2 = (xor_ln282_fu_254_p2 & icmp_ln285_reg_401);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

always @ (*) begin
    ap_block_state1 = ((real_start == 1'b0) | (ap_done_reg == 1'b1));
end

always @ (*) begin
    ap_block_state2 = ((icmp_ln17_fu_115_p2 == 1'd0) & (in_r_TVALID_int == 1'b0));
end

assign ap_ready = internal_ap_ready;

assign bitcast_ln705_fu_135_p1 = in_r_TDATA_int;

assign i_fu_121_p2 = (i_0_i_reg_104 + 15'd1);

assign icmp_ln17_fu_115_p2 = ((i_0_i_reg_104 == 15'd16384) ? 1'b1 : 1'b0);

assign icmp_ln278_fu_169_p2 = ((trunc_ln263_fu_139_p1 == 31'd0) ? 1'b1 : 1'b0);

assign icmp_ln282_fu_181_p2 = ((p_Result_i_fu_151_p4 == 8'd150) ? 1'b1 : 1'b0);

assign icmp_ln284_fu_187_p2 = (($signed(sub_ln281_fu_175_p2) > $signed(9'd0)) ? 1'b1 : 1'b0);

assign icmp_ln285_fu_193_p2 = (($signed(sub_ln281_fu_175_p2) < $signed(9'd25)) ? 1'b1 : 1'b0);

assign icmp_ln295_fu_292_p2 = (($signed(tmp_25_fu_282_p4) < $signed(5'd1)) ? 1'b1 : 1'b0);

assign in_local_V_data_0_V_din = tmp_data_0_V_reg_448;

assign lshr_ln286_fu_229_p2 = tmp_fu_218_p3 >> sext_ln281_fu_226_p1;

assign or_ln22_fu_209_p2 = (is_last_0_i_out_0_reg_93 | in_r_TLAST_int);

assign or_ln282_fu_203_p2 = (icmp_ln282_fu_181_p2 | icmp_ln278_fu_169_p2);

assign or_ln284_fu_332_p2 = (or_ln282_reg_411 | icmp_ln284_reg_395);

assign p_Result_i_fu_151_p4 = {{bitcast_ln705_fu_135_p1[30:23]}};

assign select_ln278_fu_298_p3 = ((icmp_ln278_reg_379[0:0] === 1'b1) ? 8'd0 : select_ln285_reg_422);

assign select_ln282_fu_314_p3 = ((and_ln282_fu_309_p2[0:0] === 1'b1) ? trunc_ln296_reg_373 : select_ln278_fu_298_p3);

assign select_ln284_fu_336_p3 = ((or_ln284_fu_332_p2[0:0] === 1'b1) ? select_ln282_reg_437 : select_ln295_fu_325_p3);

assign select_ln285_fu_269_p3 = ((and_ln285_1_fu_264_p2[0:0] === 1'b1) ? trunc_ln286_fu_235_p1 : select_ln288_fu_246_p3);

assign select_ln288_fu_246_p3 = ((tmp_26_fu_239_p3[0:0] === 1'b1) ? 8'd255 : 8'd0);

assign select_ln295_fu_325_p3 = ((icmp_ln295_reg_432[0:0] === 1'b1) ? shl_ln297_fu_321_p2 : 8'd0);

assign sext_ln281_fu_226_p1 = sub_ln281_reg_385;

assign shl_ln297_fu_321_p2 = trunc_ln296_reg_373 << sub_ln294_reg_427;

assign start_out = real_start;

assign sub_ln281_fu_175_p2 = (9'd150 - zext_ln266_fu_161_p1);

assign sub_ln294_fu_277_p2 = (8'd0 - trunc_ln294_reg_406);

assign sub_ln461_fu_343_p2 = (8'd0 - select_ln284_reg_442);

assign tmp_25_fu_282_p4 = {{sub_ln294_fu_277_p2[7:3]}};

assign tmp_26_fu_239_p3 = bitcast_ln705_reg_362[32'd31];

assign tmp_data_0_V_fu_348_p3 = ((tmp_24_reg_368[0:0] === 1'b1) ? sub_ln461_fu_343_p2 : select_ln284_reg_442);

assign tmp_fu_218_p3 = {{1'd1}, {trunc_ln270_fu_215_p1}};

assign trunc_ln263_fu_139_p1 = bitcast_ln705_fu_135_p1[30:0];

assign trunc_ln270_fu_215_p1 = bitcast_ln705_reg_362[22:0];

assign trunc_ln286_fu_235_p1 = lshr_ln286_fu_229_p2[7:0];

assign trunc_ln294_fu_199_p1 = sub_ln281_fu_175_p2[7:0];

assign trunc_ln296_fu_165_p1 = bitcast_ln705_fu_135_p1[7:0];

assign xor_ln278_fu_304_p2 = (icmp_ln278_reg_379 ^ 1'd1);

assign xor_ln282_fu_254_p2 = (or_ln282_reg_411 ^ 1'd1);

assign zext_ln266_fu_161_p1 = p_Result_i_fu_151_p4;

endmodule //Loop_1_proc421
