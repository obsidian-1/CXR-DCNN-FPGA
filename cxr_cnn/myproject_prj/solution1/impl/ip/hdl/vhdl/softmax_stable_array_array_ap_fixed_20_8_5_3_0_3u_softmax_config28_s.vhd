-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2019.2
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity softmax_stable_array_array_ap_fixed_20_8_5_3_0_3u_softmax_config28_s is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    data_V_data_0_V_dout : IN STD_LOGIC_VECTOR (19 downto 0);
    data_V_data_0_V_empty_n : IN STD_LOGIC;
    data_V_data_0_V_read : OUT STD_LOGIC;
    data_V_data_1_V_dout : IN STD_LOGIC_VECTOR (19 downto 0);
    data_V_data_1_V_empty_n : IN STD_LOGIC;
    data_V_data_1_V_read : OUT STD_LOGIC;
    data_V_data_2_V_dout : IN STD_LOGIC_VECTOR (19 downto 0);
    data_V_data_2_V_empty_n : IN STD_LOGIC;
    data_V_data_2_V_read : OUT STD_LOGIC;
    res_V_data_0_V_din : OUT STD_LOGIC_VECTOR (19 downto 0);
    res_V_data_0_V_full_n : IN STD_LOGIC;
    res_V_data_0_V_write : OUT STD_LOGIC;
    res_V_data_1_V_din : OUT STD_LOGIC_VECTOR (19 downto 0);
    res_V_data_1_V_full_n : IN STD_LOGIC;
    res_V_data_1_V_write : OUT STD_LOGIC;
    res_V_data_2_V_din : OUT STD_LOGIC_VECTOR (19 downto 0);
    res_V_data_2_V_full_n : IN STD_LOGIC;
    res_V_data_2_V_write : OUT STD_LOGIC;
    data_V_data_0_V_blk_n : OUT STD_LOGIC;
    data_V_data_1_V_blk_n : OUT STD_LOGIC;
    data_V_data_2_V_blk_n : OUT STD_LOGIC;
    res_V_data_0_V_blk_n : OUT STD_LOGIC;
    res_V_data_1_V_blk_n : OUT STD_LOGIC;
    res_V_data_2_V_blk_n : OUT STD_LOGIC );
end;


architecture behav of softmax_stable_array_array_ap_fixed_20_8_5_3_0_3u_softmax_config28_s is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_ST_fsm_pp0_stage1 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_ST_fsm_pp0_stage2 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_1B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011011";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv10_1FF : STD_LOGIC_VECTOR (9 downto 0) := "0111111111";
    constant ap_const_lv10_200 : STD_LOGIC_VECTOR (9 downto 0) := "1000000000";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (2 downto 0) := "001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage2 : signal is "none";
    signal ap_block_state3_pp0_stage2_iter0 : BOOLEAN;
    signal ap_block_state6_pp0_stage2_iter1 : BOOLEAN;
    signal ap_block_state9_pp0_stage2_iter2 : BOOLEAN;
    signal ap_block_state12_pp0_stage2_iter3 : BOOLEAN;
    signal ap_block_state15_pp0_stage2_iter4 : BOOLEAN;
    signal ap_block_pp0_stage2_11001 : BOOLEAN;
    signal exp_table4_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal exp_table4_ce0 : STD_LOGIC;
    signal exp_table4_q0 : STD_LOGIC_VECTOR (16 downto 0);
    signal invert_table5_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal invert_table5_ce0 : STD_LOGIC;
    signal invert_table5_q0 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_data_0_V_1_reg_627 : STD_LOGIC_VECTOR (19 downto 0);
    signal io_acc_block_signal_op17 : STD_LOGIC;
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state7_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state10_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state13_pp0_stage0_iter4 : BOOLEAN;
    signal io_acc_block_signal_op131 : STD_LOGIC;
    signal ap_block_state16_pp0_stage0_iter5 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal tmp_data_1_V_1_reg_634 : STD_LOGIC_VECTOR (19 downto 0);
    signal tmp_data_2_V_1_reg_641 : STD_LOGIC_VECTOR (19 downto 0);
    signal icmp_ln1496_fu_192_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1496_reg_648 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp0_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage1 : signal is "none";
    signal ap_block_state2_pp0_stage1_iter0 : BOOLEAN;
    signal ap_block_state5_pp0_stage1_iter1 : BOOLEAN;
    signal ap_block_state8_pp0_stage1_iter2 : BOOLEAN;
    signal ap_block_state11_pp0_stage1_iter3 : BOOLEAN;
    signal ap_block_state14_pp0_stage1_iter4 : BOOLEAN;
    signal ap_block_pp0_stage1_11001 : BOOLEAN;
    signal x_max_V_fu_206_p3 : STD_LOGIC_VECTOR (19 downto 0);
    signal x_max_V_reg_653 : STD_LOGIC_VECTOR (19 downto 0);
    signal y_V_fu_407_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal y_V_reg_658 : STD_LOGIC_VECTOR (9 downto 0);
    signal y_V_1_fu_441_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal y_V_1_reg_663 : STD_LOGIC_VECTOR (9 downto 0);
    signal y_V_2_fu_475_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal y_V_2_reg_668 : STD_LOGIC_VECTOR (9 downto 0);
    signal exp_res_0_V_reg_678 : STD_LOGIC_VECTOR (16 downto 0);
    signal exp_res_0_V_reg_678_pp0_iter2_reg : STD_LOGIC_VECTOR (16 downto 0);
    signal exp_res_1_V_reg_689 : STD_LOGIC_VECTOR (16 downto 0);
    signal exp_res_1_V_reg_689_pp0_iter3_reg : STD_LOGIC_VECTOR (16 downto 0);
    signal exp_res_2_V_reg_700 : STD_LOGIC_VECTOR (16 downto 0);
    signal exp_res_2_V_reg_700_pp0_iter3_reg : STD_LOGIC_VECTOR (16 downto 0);
    signal ret_V_fu_501_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal ret_V_reg_707 : STD_LOGIC_VECTOR (17 downto 0);
    signal y_V_3_fu_599_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal y_V_3_reg_713 : STD_LOGIC_VECTOR (9 downto 0);
    signal inv_exp_sum_V_reg_723 : STD_LOGIC_VECTOR (17 downto 0);
    signal sext_ln241_fu_611_p1 : STD_LOGIC_VECTOR (27 downto 0);
    signal sext_ln241_reg_728 : STD_LOGIC_VECTOR (27 downto 0);
    signal zext_ln1118_fu_615_p1 : STD_LOGIC_VECTOR (27 downto 0);
    signal tmp_data_0_V_reg_738 : STD_LOGIC_VECTOR (19 downto 0);
    signal zext_ln1118_1_fu_619_p1 : STD_LOGIC_VECTOR (27 downto 0);
    signal tmp_data_1_V_reg_748 : STD_LOGIC_VECTOR (19 downto 0);
    signal zext_ln1118_2_fu_623_p1 : STD_LOGIC_VECTOR (27 downto 0);
    signal tmp_data_2_V_reg_758 : STD_LOGIC_VECTOR (19 downto 0);
    signal ap_enable_reg_pp0_iter0_reg : STD_LOGIC := '0';
    signal ap_block_pp0_stage2_subdone : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal zext_ln225_fu_483_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage1 : BOOLEAN;
    signal zext_ln225_1_fu_487_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage2 : BOOLEAN;
    signal zext_ln225_2_fu_491_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln235_fu_607_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal grp_fu_153_p0 : STD_LOGIC_VECTOR (16 downto 0);
    signal grp_fu_153_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal grp_fu_153_p2 : STD_LOGIC_VECTOR (27 downto 0);
    signal select_ln65_fu_196_p3 : STD_LOGIC_VECTOR (19 downto 0);
    signal icmp_ln1496_1_fu_201_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sext_ln703_fu_213_p1 : STD_LOGIC_VECTOR (20 downto 0);
    signal sext_ln703_1_fu_216_p1 : STD_LOGIC_VECTOR (20 downto 0);
    signal sub_ln1193_fu_219_p2 : STD_LOGIC_VECTOR (20 downto 0);
    signal tmp_7_fu_233_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_5_fu_225_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln786_fu_241_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln340_fu_259_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sext_ln703_2_fu_271_p1 : STD_LOGIC_VECTOR (20 downto 0);
    signal sub_ln1193_1_fu_274_p2 : STD_LOGIC_VECTOR (20 downto 0);
    signal tmp_10_fu_288_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_9_fu_280_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln786_1_fu_296_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln340_1_fu_314_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sext_ln703_3_fu_326_p1 : STD_LOGIC_VECTOR (20 downto 0);
    signal sub_ln1193_2_fu_329_p2 : STD_LOGIC_VECTOR (20 downto 0);
    signal tmp_12_fu_343_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_11_fu_335_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln786_2_fu_351_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln340_2_fu_369_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln340_3_fu_253_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_fu_381_p4 : STD_LOGIC_VECTOR (9 downto 0);
    signal and_ln786_fu_247_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln340_fu_265_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln340_fu_391_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal select_ln388_fu_399_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal xor_ln340_4_fu_308_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_6_fu_415_p4 : STD_LOGIC_VECTOR (9 downto 0);
    signal and_ln786_1_fu_302_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln340_1_fu_320_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln340_2_fu_425_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal select_ln388_1_fu_433_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal xor_ln340_5_fu_363_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_8_fu_449_p4 : STD_LOGIC_VECTOR (9 downto 0);
    signal and_ln786_2_fu_357_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln340_2_fu_375_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln340_4_fu_459_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal select_ln388_2_fu_467_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln36_2_fu_498_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal zext_ln36_1_fu_495_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal rhs_V_fu_513_p1 : STD_LOGIC_VECTOR (18 downto 0);
    signal lhs_V_fu_510_p1 : STD_LOGIC_VECTOR (18 downto 0);
    signal ret_V_1_fu_516_p2 : STD_LOGIC_VECTOR (18 downto 0);
    signal zext_ln36_fu_507_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal p_Val2_9_fu_530_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal p_Result_7_fu_535_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_s_fu_522_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln786_3_fu_543_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln340_7_fu_561_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln340_6_fu_555_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_s_fu_573_p4 : STD_LOGIC_VECTOR (9 downto 0);
    signal underflow_fu_549_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln340_3_fu_567_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln340_6_fu_583_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal select_ln388_3_fu_591_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_fu_153_ce : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_idle_pp0_0to4 : STD_LOGIC;
    signal ap_reset_idle_pp0 : STD_LOGIC;
    signal ap_idle_pp0_1to5 : STD_LOGIC;
    signal ap_block_pp0_stage1_subdone : BOOLEAN;
    signal ap_enable_pp0 : STD_LOGIC;

    component myproject_axi_mul_17ns_18s_28_2_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (16 downto 0);
        din1 : IN STD_LOGIC_VECTOR (17 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (27 downto 0) );
    end component;


    component softmax_stable_array_array_ap_fixed_20_8_5_3_0_3u_softmax_config28_s_exp_table4 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (16 downto 0) );
    end component;


    component softmax_stable_array_array_ap_fixed_20_8_5_3_0_3u_softmax_config28_s_invert_tbfk IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (17 downto 0) );
    end component;



begin
    exp_table4_U : component softmax_stable_array_array_ap_fixed_20_8_5_3_0_3u_softmax_config28_s_exp_table4
    generic map (
        DataWidth => 17,
        AddressRange => 1024,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => exp_table4_address0,
        ce0 => exp_table4_ce0,
        q0 => exp_table4_q0);

    invert_table5_U : component softmax_stable_array_array_ap_fixed_20_8_5_3_0_3u_softmax_config28_s_invert_tbfk
    generic map (
        DataWidth => 18,
        AddressRange => 1024,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => invert_table5_address0,
        ce0 => invert_table5_ce0,
        q0 => invert_table5_q0);

    myproject_axi_mul_17ns_18s_28_2_1_U434 : component myproject_axi_mul_17ns_18s_28_2_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 17,
        din1_WIDTH => 18,
        dout_WIDTH => 28)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_153_p0,
        din1 => grp_fu_153_p1,
        ce => grp_fu_153_ce,
        dout => grp_fu_153_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then 
                    ap_enable_reg_pp0_iter0_reg <= ap_start;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage2_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage2_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage2_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage2_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage2_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                elsif (((ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then
                exp_res_0_V_reg_678 <= exp_table4_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then
                exp_res_0_V_reg_678_pp0_iter2_reg <= exp_res_0_V_reg_678;
                sext_ln241_reg_728 <= sext_ln241_fu_611_p1;
                x_max_V_reg_653 <= x_max_V_fu_206_p3;
                y_V_3_reg_713 <= y_V_3_fu_599_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                exp_res_1_V_reg_689 <= exp_table4_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                exp_res_1_V_reg_689_pp0_iter3_reg <= exp_res_1_V_reg_689;
                tmp_data_0_V_1_reg_627 <= data_V_data_0_V_dout;
                tmp_data_1_V_1_reg_634 <= data_V_data_1_V_dout;
                tmp_data_2_V_1_reg_641 <= data_V_data_2_V_dout;
                y_V_1_reg_663 <= y_V_1_fu_441_p3;
                y_V_2_reg_668 <= y_V_2_fu_475_p3;
                y_V_reg_658 <= y_V_fu_407_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then
                exp_res_2_V_reg_700 <= exp_table4_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then
                exp_res_2_V_reg_700_pp0_iter3_reg <= exp_res_2_V_reg_700;
                icmp_ln1496_reg_648 <= icmp_ln1496_fu_192_p2;
                inv_exp_sum_V_reg_723 <= invert_table5_q0;
                ret_V_reg_707 <= ret_V_fu_501_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                tmp_data_0_V_reg_738 <= grp_fu_153_p2(27 downto 8);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then
                tmp_data_1_V_reg_748 <= grp_fu_153_p2(27 downto 8);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1))) then
                tmp_data_2_V_reg_758 <= grp_fu_153_p2(27 downto 8);
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_block_pp0_stage2_subdone, ap_block_pp0_stage0_subdone, ap_reset_idle_pp0, ap_idle_pp0_1to5, ap_block_pp0_stage1_subdone)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_start = ap_const_logic_0) and (ap_idle_pp0_1to5 = ap_const_logic_1))) and (ap_reset_idle_pp0 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_reset_idle_pp0 = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage1 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage1_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                end if;
            when ap_ST_fsm_pp0_stage2 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage2_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                end if;
            when others =>  
                ap_NS_fsm <= "XXX";
        end case;
    end process;
    and_ln786_1_fu_302_p2 <= (xor_ln786_1_fu_296_p2 and tmp_9_fu_280_p3);
    and_ln786_2_fu_357_p2 <= (xor_ln786_2_fu_351_p2 and tmp_11_fu_335_p3);
    and_ln786_fu_247_p2 <= (xor_ln786_fu_241_p2 and tmp_5_fu_225_p3);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
    ap_CS_fsm_pp0_stage1 <= ap_CS_fsm(1);
    ap_CS_fsm_pp0_stage2 <= ap_CS_fsm(2);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(ap_start, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter5, io_acc_block_signal_op17, io_acc_block_signal_op131)
    begin
                ap_block_pp0_stage0_01001 <= (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and ((ap_start = ap_const_logic_0) or (io_acc_block_signal_op17 = ap_const_logic_0))) or ((io_acc_block_signal_op131 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1)));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(ap_start, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter5, io_acc_block_signal_op17, io_acc_block_signal_op131)
    begin
                ap_block_pp0_stage0_11001 <= (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and ((ap_start = ap_const_logic_0) or (io_acc_block_signal_op17 = ap_const_logic_0))) or ((io_acc_block_signal_op131 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1)));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_start, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter5, io_acc_block_signal_op17, io_acc_block_signal_op131)
    begin
                ap_block_pp0_stage0_subdone <= (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and ((ap_start = ap_const_logic_0) or (io_acc_block_signal_op17 = ap_const_logic_0))) or ((io_acc_block_signal_op131 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1)));
    end process;

        ap_block_pp0_stage1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state10_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state11_pp0_stage1_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state12_pp0_stage2_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state13_pp0_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state14_pp0_stage1_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state15_pp0_stage2_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state16_pp0_stage0_iter5_assign_proc : process(io_acc_block_signal_op131)
    begin
                ap_block_state16_pp0_stage0_iter5 <= (io_acc_block_signal_op131 = ap_const_logic_0);
    end process;


    ap_block_state1_pp0_stage0_iter0_assign_proc : process(ap_start, io_acc_block_signal_op17)
    begin
                ap_block_state1_pp0_stage0_iter0 <= ((ap_start = ap_const_logic_0) or (io_acc_block_signal_op17 = ap_const_logic_0));
    end process;

        ap_block_state2_pp0_stage1_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage2_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage1_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage2_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage1_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage2_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0, ap_enable_reg_pp0_iter5, ap_block_pp0_stage0_11001)
    begin
        if ((((ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)) or ((ap_start = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_enable_reg_pp0_iter0_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0_reg)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then 
            ap_enable_reg_pp0_iter0 <= ap_start;
        else 
            ap_enable_reg_pp0_iter0 <= ap_enable_reg_pp0_iter0_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_idle_pp0)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5)
    begin
        if (((ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_0to4_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4)
    begin
        if (((ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0_0to4 <= ap_const_logic_1;
        else 
            ap_idle_pp0_0to4 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_1to5_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5)
    begin
        if (((ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) then 
            ap_idle_pp0_1to5 <= ap_const_logic_1;
        else 
            ap_idle_pp0_1to5 <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_reset_idle_pp0_assign_proc : process(ap_start, ap_idle_pp0_0to4)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_idle_pp0_0to4 = ap_const_logic_1))) then 
            ap_reset_idle_pp0 <= ap_const_logic_1;
        else 
            ap_reset_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    data_V_data_0_V_blk_n_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0, data_V_data_0_V_empty_n)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            data_V_data_0_V_blk_n <= data_V_data_0_V_empty_n;
        else 
            data_V_data_0_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    data_V_data_0_V_read_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            data_V_data_0_V_read <= ap_const_logic_1;
        else 
            data_V_data_0_V_read <= ap_const_logic_0;
        end if; 
    end process;


    data_V_data_1_V_blk_n_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0, data_V_data_1_V_empty_n)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            data_V_data_1_V_blk_n <= data_V_data_1_V_empty_n;
        else 
            data_V_data_1_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    data_V_data_1_V_read_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            data_V_data_1_V_read <= ap_const_logic_1;
        else 
            data_V_data_1_V_read <= ap_const_logic_0;
        end if; 
    end process;


    data_V_data_2_V_blk_n_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0, data_V_data_2_V_empty_n)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            data_V_data_2_V_blk_n <= data_V_data_2_V_empty_n;
        else 
            data_V_data_2_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    data_V_data_2_V_read_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            data_V_data_2_V_read <= ap_const_logic_1;
        else 
            data_V_data_2_V_read <= ap_const_logic_0;
        end if; 
    end process;


    exp_table4_address0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage1, zext_ln225_fu_483_p1, ap_block_pp0_stage1, zext_ln225_1_fu_487_p1, ap_block_pp0_stage2, zext_ln225_2_fu_491_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            exp_table4_address0 <= zext_ln225_2_fu_491_p1(10 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
            exp_table4_address0 <= zext_ln225_1_fu_487_p1(10 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            exp_table4_address0 <= zext_ln225_fu_483_p1(10 - 1 downto 0);
        else 
            exp_table4_address0 <= "XXXXXXXXXX";
        end if; 
    end process;


    exp_table4_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001, ap_block_pp0_stage0_11001, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)) or ((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001)))) then 
            exp_table4_ce0 <= ap_const_logic_1;
        else 
            exp_table4_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_153_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001, ap_block_pp0_stage0_11001, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001)))) then 
            grp_fu_153_ce <= ap_const_logic_1;
        else 
            grp_fu_153_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_153_p0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage1, zext_ln1118_fu_615_p1, zext_ln1118_1_fu_619_p1, zext_ln1118_2_fu_623_p1, ap_block_pp0_stage1, ap_block_pp0_stage2)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            grp_fu_153_p0 <= zext_ln1118_2_fu_623_p1(17 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_153_p0 <= zext_ln1118_1_fu_619_p1(17 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
            grp_fu_153_p0 <= zext_ln1118_fu_615_p1(17 - 1 downto 0);
        else 
            grp_fu_153_p0 <= "XXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_153_p1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage1, sext_ln241_fu_611_p1, sext_ln241_reg_728, ap_block_pp0_stage1, ap_block_pp0_stage2)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then 
            grp_fu_153_p1 <= sext_ln241_reg_728(18 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
            grp_fu_153_p1 <= sext_ln241_fu_611_p1(18 - 1 downto 0);
        else 
            grp_fu_153_p1 <= "XXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    icmp_ln1496_1_fu_201_p2 <= "1" when (signed(select_ln65_fu_196_p3) < signed(tmp_data_2_V_1_reg_641)) else "0";
    icmp_ln1496_fu_192_p2 <= "1" when (signed(tmp_data_0_V_1_reg_627) < signed(tmp_data_1_V_1_reg_634)) else "0";
    invert_table5_address0 <= zext_ln235_fu_607_p1(10 - 1 downto 0);

    invert_table5_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter3, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            invert_table5_ce0 <= ap_const_logic_1;
        else 
            invert_table5_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    io_acc_block_signal_op131 <= (res_V_data_2_V_full_n and res_V_data_1_V_full_n and res_V_data_0_V_full_n);
    io_acc_block_signal_op17 <= (data_V_data_2_V_empty_n and data_V_data_1_V_empty_n and data_V_data_0_V_empty_n);
        lhs_V_fu_510_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(ret_V_reg_707),19));

    or_ln340_1_fu_320_p2 <= (xor_ln340_1_fu_314_p2 or tmp_10_fu_288_p3);
    or_ln340_2_fu_375_p2 <= (xor_ln340_2_fu_369_p2 or tmp_12_fu_343_p3);
    or_ln340_3_fu_567_p2 <= (xor_ln340_7_fu_561_p2 or p_Result_7_fu_535_p3);
    or_ln340_fu_265_p2 <= (xor_ln340_fu_259_p2 or tmp_7_fu_233_p3);
    p_Result_7_fu_535_p3 <= p_Val2_9_fu_530_p2(17 downto 17);
    p_Result_s_fu_522_p3 <= ret_V_1_fu_516_p2(18 downto 18);
    p_Val2_9_fu_530_p2 <= std_logic_vector(unsigned(zext_ln36_fu_507_p1) + unsigned(ret_V_reg_707));

    res_V_data_0_V_blk_n_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_enable_reg_pp0_iter5, res_V_data_0_V_full_n)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            res_V_data_0_V_blk_n <= res_V_data_0_V_full_n;
        else 
            res_V_data_0_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    res_V_data_0_V_din <= tmp_data_0_V_reg_738;

    res_V_data_0_V_write_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter5, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            res_V_data_0_V_write <= ap_const_logic_1;
        else 
            res_V_data_0_V_write <= ap_const_logic_0;
        end if; 
    end process;


    res_V_data_1_V_blk_n_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_enable_reg_pp0_iter5, res_V_data_1_V_full_n)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            res_V_data_1_V_blk_n <= res_V_data_1_V_full_n;
        else 
            res_V_data_1_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    res_V_data_1_V_din <= tmp_data_1_V_reg_748;

    res_V_data_1_V_write_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter5, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            res_V_data_1_V_write <= ap_const_logic_1;
        else 
            res_V_data_1_V_write <= ap_const_logic_0;
        end if; 
    end process;


    res_V_data_2_V_blk_n_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_enable_reg_pp0_iter5, res_V_data_2_V_full_n)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            res_V_data_2_V_blk_n <= res_V_data_2_V_full_n;
        else 
            res_V_data_2_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    res_V_data_2_V_din <= tmp_data_2_V_reg_758;

    res_V_data_2_V_write_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter5, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            res_V_data_2_V_write <= ap_const_logic_1;
        else 
            res_V_data_2_V_write <= ap_const_logic_0;
        end if; 
    end process;

    ret_V_1_fu_516_p2 <= std_logic_vector(unsigned(rhs_V_fu_513_p1) + unsigned(lhs_V_fu_510_p1));
    ret_V_fu_501_p2 <= std_logic_vector(unsigned(zext_ln36_2_fu_498_p1) + unsigned(zext_ln36_1_fu_495_p1));
    rhs_V_fu_513_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(exp_res_2_V_reg_700),19));
    select_ln340_2_fu_425_p3 <= 
        ap_const_lv10_1FF when (xor_ln340_4_fu_308_p2(0) = '1') else 
        tmp_6_fu_415_p4;
    select_ln340_4_fu_459_p3 <= 
        ap_const_lv10_1FF when (xor_ln340_5_fu_363_p2(0) = '1') else 
        tmp_8_fu_449_p4;
    select_ln340_6_fu_583_p3 <= 
        ap_const_lv10_1FF when (xor_ln340_6_fu_555_p2(0) = '1') else 
        tmp_s_fu_573_p4;
    select_ln340_fu_391_p3 <= 
        ap_const_lv10_1FF when (xor_ln340_3_fu_253_p2(0) = '1') else 
        tmp_fu_381_p4;
    select_ln388_1_fu_433_p3 <= 
        ap_const_lv10_200 when (and_ln786_1_fu_302_p2(0) = '1') else 
        tmp_6_fu_415_p4;
    select_ln388_2_fu_467_p3 <= 
        ap_const_lv10_200 when (and_ln786_2_fu_357_p2(0) = '1') else 
        tmp_8_fu_449_p4;
    select_ln388_3_fu_591_p3 <= 
        ap_const_lv10_200 when (underflow_fu_549_p2(0) = '1') else 
        tmp_s_fu_573_p4;
    select_ln388_fu_399_p3 <= 
        ap_const_lv10_200 when (and_ln786_fu_247_p2(0) = '1') else 
        tmp_fu_381_p4;
    select_ln65_fu_196_p3 <= 
        tmp_data_1_V_1_reg_634 when (icmp_ln1496_reg_648(0) = '1') else 
        tmp_data_0_V_1_reg_627;
        sext_ln241_fu_611_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(inv_exp_sum_V_reg_723),28));

        sext_ln703_1_fu_216_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(x_max_V_reg_653),21));

        sext_ln703_2_fu_271_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_data_1_V_1_reg_634),21));

        sext_ln703_3_fu_326_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_data_2_V_1_reg_641),21));

        sext_ln703_fu_213_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_data_0_V_1_reg_627),21));

    sub_ln1193_1_fu_274_p2 <= std_logic_vector(signed(sext_ln703_2_fu_271_p1) - signed(sext_ln703_1_fu_216_p1));
    sub_ln1193_2_fu_329_p2 <= std_logic_vector(signed(sext_ln703_3_fu_326_p1) - signed(sext_ln703_1_fu_216_p1));
    sub_ln1193_fu_219_p2 <= std_logic_vector(signed(sext_ln703_fu_213_p1) - signed(sext_ln703_1_fu_216_p1));
    tmp_10_fu_288_p3 <= sub_ln1193_1_fu_274_p2(19 downto 19);
    tmp_11_fu_335_p3 <= sub_ln1193_2_fu_329_p2(20 downto 20);
    tmp_12_fu_343_p3 <= sub_ln1193_2_fu_329_p2(19 downto 19);
    tmp_5_fu_225_p3 <= sub_ln1193_fu_219_p2(20 downto 20);
    tmp_6_fu_415_p4 <= sub_ln1193_1_fu_274_p2(19 downto 10);
    tmp_7_fu_233_p3 <= sub_ln1193_fu_219_p2(19 downto 19);
    tmp_8_fu_449_p4 <= sub_ln1193_2_fu_329_p2(19 downto 10);
    tmp_9_fu_280_p3 <= sub_ln1193_1_fu_274_p2(20 downto 20);
    tmp_fu_381_p4 <= sub_ln1193_fu_219_p2(19 downto 10);
    tmp_s_fu_573_p4 <= p_Val2_9_fu_530_p2(17 downto 8);
    underflow_fu_549_p2 <= (xor_ln786_3_fu_543_p2 and p_Result_s_fu_522_p3);
    x_max_V_fu_206_p3 <= 
        tmp_data_2_V_1_reg_641 when (icmp_ln1496_1_fu_201_p2(0) = '1') else 
        select_ln65_fu_196_p3;
    xor_ln340_1_fu_314_p2 <= (tmp_9_fu_280_p3 xor ap_const_lv1_1);
    xor_ln340_2_fu_369_p2 <= (tmp_11_fu_335_p3 xor ap_const_lv1_1);
    xor_ln340_3_fu_253_p2 <= (tmp_7_fu_233_p3 xor tmp_5_fu_225_p3);
    xor_ln340_4_fu_308_p2 <= (tmp_9_fu_280_p3 xor tmp_10_fu_288_p3);
    xor_ln340_5_fu_363_p2 <= (tmp_12_fu_343_p3 xor tmp_11_fu_335_p3);
    xor_ln340_6_fu_555_p2 <= (p_Result_s_fu_522_p3 xor p_Result_7_fu_535_p3);
    xor_ln340_7_fu_561_p2 <= (p_Result_s_fu_522_p3 xor ap_const_lv1_1);
    xor_ln340_fu_259_p2 <= (tmp_5_fu_225_p3 xor ap_const_lv1_1);
    xor_ln786_1_fu_296_p2 <= (tmp_10_fu_288_p3 xor ap_const_lv1_1);
    xor_ln786_2_fu_351_p2 <= (tmp_12_fu_343_p3 xor ap_const_lv1_1);
    xor_ln786_3_fu_543_p2 <= (p_Result_7_fu_535_p3 xor ap_const_lv1_1);
    xor_ln786_fu_241_p2 <= (tmp_7_fu_233_p3 xor ap_const_lv1_1);
    y_V_1_fu_441_p3 <= 
        select_ln340_2_fu_425_p3 when (or_ln340_1_fu_320_p2(0) = '1') else 
        select_ln388_1_fu_433_p3;
    y_V_2_fu_475_p3 <= 
        select_ln340_4_fu_459_p3 when (or_ln340_2_fu_375_p2(0) = '1') else 
        select_ln388_2_fu_467_p3;
    y_V_3_fu_599_p3 <= 
        select_ln340_6_fu_583_p3 when (or_ln340_3_fu_567_p2(0) = '1') else 
        select_ln388_3_fu_591_p3;
    y_V_fu_407_p3 <= 
        select_ln340_fu_391_p3 when (or_ln340_fu_265_p2(0) = '1') else 
        select_ln388_fu_399_p3;
    zext_ln1118_1_fu_619_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(exp_res_1_V_reg_689_pp0_iter3_reg),28));
    zext_ln1118_2_fu_623_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(exp_res_2_V_reg_700_pp0_iter3_reg),28));
    zext_ln1118_fu_615_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(exp_res_0_V_reg_678_pp0_iter2_reg),28));
    zext_ln225_1_fu_487_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(y_V_1_reg_663),64));
    zext_ln225_2_fu_491_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(y_V_2_reg_668),64));
    zext_ln225_fu_483_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(y_V_reg_658),64));
    zext_ln235_fu_607_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(y_V_3_reg_713),64));
    zext_ln36_1_fu_495_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(exp_res_1_V_reg_689),18));
    zext_ln36_2_fu_498_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(exp_res_0_V_reg_678),18));
    zext_ln36_fu_507_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(exp_res_2_V_reg_700),18));
end behav;
