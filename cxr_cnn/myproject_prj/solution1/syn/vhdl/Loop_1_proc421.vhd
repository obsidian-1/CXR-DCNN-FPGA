-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2019.2
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity Loop_1_proc421 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    start_full_n : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    start_out : OUT STD_LOGIC;
    start_write : OUT STD_LOGIC;
    in_r_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
    in_r_TVALID : IN STD_LOGIC;
    in_r_TREADY : OUT STD_LOGIC;
    in_local_V_data_0_V_din : OUT STD_LOGIC_VECTOR (7 downto 0);
    in_local_V_data_0_V_full_n : IN STD_LOGIC;
    in_local_V_data_0_V_write : OUT STD_LOGIC;
    in_r_TDATA : IN STD_LOGIC_VECTOR (31 downto 0);
    ap_return : OUT STD_LOGIC_VECTOR (0 downto 0) );
end;


architecture behav of Loop_1_proc421 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (6 downto 0) := "0000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (6 downto 0) := "0000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (6 downto 0) := "0001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (6 downto 0) := "0010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (6 downto 0) := "0100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (6 downto 0) := "1000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv15_0 : STD_LOGIC_VECTOR (14 downto 0) := "000000000000000";
    constant ap_const_lv15_4000 : STD_LOGIC_VECTOR (14 downto 0) := "100000000000000";
    constant ap_const_lv15_1 : STD_LOGIC_VECTOR (14 downto 0) := "000000000000001";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv31_0 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000000";
    constant ap_const_lv9_96 : STD_LOGIC_VECTOR (8 downto 0) := "010010110";
    constant ap_const_lv8_96 : STD_LOGIC_VECTOR (7 downto 0) := "10010110";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv9_19 : STD_LOGIC_VECTOR (8 downto 0) := "000011001";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal real_start : STD_LOGIC;
    signal start_once_reg : STD_LOGIC := '0';
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal internal_ap_ready : STD_LOGIC;
    signal in_local_V_data_0_V_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal in_r_TDATA_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal icmp_ln17_fu_115_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_fu_121_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal i_reg_357 : STD_LOGIC_VECTOR (14 downto 0);
    signal ap_block_state2 : BOOLEAN;
    signal bitcast_ln705_fu_135_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln705_reg_362 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_24_reg_368 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln296_fu_165_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln296_reg_373 : STD_LOGIC_VECTOR (7 downto 0);
    signal icmp_ln278_fu_169_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln278_reg_379 : STD_LOGIC_VECTOR (0 downto 0);
    signal sub_ln281_fu_175_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal sub_ln281_reg_385 : STD_LOGIC_VECTOR (8 downto 0);
    signal icmp_ln282_fu_181_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln282_reg_390 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln284_fu_187_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln284_reg_395 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln285_fu_193_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln285_reg_401 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln294_fu_199_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln294_reg_406 : STD_LOGIC_VECTOR (7 downto 0);
    signal or_ln282_fu_203_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln282_reg_411 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln22_fu_209_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln22_reg_417 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln285_fu_269_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln285_reg_422 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal sub_ln294_fu_277_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal sub_ln294_reg_427 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal icmp_ln295_fu_292_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln295_reg_432 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln282_fu_314_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln282_reg_437 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln284_fu_336_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln284_reg_442 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal tmp_data_0_V_fu_348_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_data_0_V_reg_448 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal is_last_0_i_out_0_reg_93 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state1 : BOOLEAN;
    signal i_0_i_reg_104 : STD_LOGIC_VECTOR (14 downto 0);
    signal p_Result_i_fu_151_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln263_fu_139_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal zext_ln266_fu_161_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal trunc_ln270_fu_215_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal tmp_fu_218_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal sext_ln281_fu_226_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal lshr_ln286_fu_229_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_26_fu_239_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln282_fu_254_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln285_fu_259_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln285_1_fu_264_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln286_fu_235_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln288_fu_246_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_25_fu_282_p4 : STD_LOGIC_VECTOR (4 downto 0);
    signal xor_ln278_fu_304_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln282_fu_309_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln278_fu_298_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal shl_ln297_fu_321_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal or_ln284_fu_332_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln295_fu_325_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal sub_ln461_fu_343_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_return_preg : STD_LOGIC_VECTOR (0 downto 0) := "0";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (6 downto 0);
    signal regslice_both_in_last_V_U_apdone_blk : STD_LOGIC;
    signal in_r_TLAST_int : STD_LOGIC_VECTOR (0 downto 0);
    signal in_r_TVALID_int : STD_LOGIC;
    signal in_r_TREADY_int : STD_LOGIC;
    signal regslice_both_in_last_V_U_ack_in : STD_LOGIC;
    signal regslice_both_in_data_U_apdone_blk : STD_LOGIC;
    signal in_r_TDATA_int : STD_LOGIC_VECTOR (31 downto 0);
    signal regslice_both_in_data_U_vld_out : STD_LOGIC;
    signal regslice_both_in_data_U_ack_in : STD_LOGIC;

    component regslice_both IS
    generic (
        DataWidth : INTEGER );
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        data_in : IN STD_LOGIC_VECTOR (DataWidth-1 downto 0);
        vld_in : IN STD_LOGIC;
        ack_in : OUT STD_LOGIC;
        data_out : OUT STD_LOGIC_VECTOR (DataWidth-1 downto 0);
        vld_out : OUT STD_LOGIC;
        ack_out : IN STD_LOGIC;
        apdone_blk : OUT STD_LOGIC );
    end component;



begin
    regslice_both_in_last_V_U : component regslice_both
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        data_in => in_r_TLAST,
        vld_in => in_r_TVALID,
        ack_in => regslice_both_in_last_V_U_ack_in,
        data_out => in_r_TLAST_int,
        vld_out => in_r_TVALID_int,
        ack_out => in_r_TREADY_int,
        apdone_blk => regslice_both_in_last_V_U_apdone_blk);

    regslice_both_in_data_U : component regslice_both
    generic map (
        DataWidth => 32)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        data_in => in_r_TDATA,
        vld_in => in_r_TVALID,
        ack_in => regslice_both_in_data_U_ack_in,
        data_out => in_r_TDATA_int,
        vld_out => regslice_both_in_data_U_vld_out,
        ack_out => in_r_TREADY_int,
        apdone_blk => regslice_both_in_data_U_apdone_blk);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif ((not(((icmp_ln17_fu_115_p2 = ap_const_lv1_0) and (in_r_TVALID_int = ap_const_logic_0))) and (icmp_ln17_fu_115_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_return_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_preg <= ap_const_lv1_0;
            else
                if ((not(((icmp_ln17_fu_115_p2 = ap_const_lv1_0) and (in_r_TVALID_int = ap_const_logic_0))) and (icmp_ln17_fu_115_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                    ap_return_preg <= is_last_0_i_out_0_reg_93;
                end if; 
            end if;
        end if;
    end process;


    start_once_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                start_once_reg <= ap_const_logic_0;
            else
                if (((internal_ap_ready = ap_const_logic_0) and (real_start = ap_const_logic_1))) then 
                    start_once_reg <= ap_const_logic_1;
                elsif ((internal_ap_ready = ap_const_logic_1)) then 
                    start_once_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    i_0_i_reg_104_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((in_local_V_data_0_V_full_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state7))) then 
                i_0_i_reg_104 <= i_reg_357;
            elsif ((not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                i_0_i_reg_104 <= ap_const_lv15_0;
            end if; 
        end if;
    end process;

    is_last_0_i_out_0_reg_93_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((in_local_V_data_0_V_full_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state7))) then 
                is_last_0_i_out_0_reg_93 <= or_ln22_reg_417;
            elsif ((not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                is_last_0_i_out_0_reg_93 <= ap_const_lv1_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((icmp_ln17_fu_115_p2 = ap_const_lv1_0) and (in_r_TVALID_int = ap_const_logic_0))) and (icmp_ln17_fu_115_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                bitcast_ln705_reg_362 <= bitcast_ln705_fu_135_p1;
                icmp_ln278_reg_379 <= icmp_ln278_fu_169_p2;
                icmp_ln282_reg_390 <= icmp_ln282_fu_181_p2;
                icmp_ln284_reg_395 <= icmp_ln284_fu_187_p2;
                icmp_ln285_reg_401 <= icmp_ln285_fu_193_p2;
                or_ln22_reg_417 <= or_ln22_fu_209_p2;
                or_ln282_reg_411 <= or_ln282_fu_203_p2;
                sub_ln281_reg_385 <= sub_ln281_fu_175_p2;
                tmp_24_reg_368 <= bitcast_ln705_fu_135_p1(31 downto 31);
                trunc_ln294_reg_406 <= trunc_ln294_fu_199_p1;
                trunc_ln296_reg_373 <= trunc_ln296_fu_165_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((icmp_ln17_fu_115_p2 = ap_const_lv1_0) and (in_r_TVALID_int = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                i_reg_357 <= i_fu_121_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                icmp_ln295_reg_432 <= icmp_ln295_fu_292_p2;
                select_ln282_reg_437 <= select_ln282_fu_314_p3;
                sub_ln294_reg_427 <= sub_ln294_fu_277_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                select_ln284_reg_442 <= select_ln284_fu_336_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln278_reg_379 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                select_ln285_reg_422 <= select_ln285_fu_269_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                tmp_data_0_V_reg_448 <= tmp_data_0_V_fu_348_p3;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (real_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, in_local_V_data_0_V_full_n, ap_CS_fsm_state7, ap_CS_fsm_state2, icmp_ln17_fu_115_p2, in_r_TVALID_int)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if ((not(((icmp_ln17_fu_115_p2 = ap_const_lv1_0) and (in_r_TVALID_int = ap_const_logic_0))) and (icmp_ln17_fu_115_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                elsif ((not(((icmp_ln17_fu_115_p2 = ap_const_lv1_0) and (in_r_TVALID_int = ap_const_logic_0))) and (icmp_ln17_fu_115_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                if (((in_local_V_data_0_V_full_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state7))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state7;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXX";
        end case;
    end process;
    and_ln282_fu_309_p2 <= (xor_ln278_fu_304_p2 and icmp_ln282_reg_390);
    and_ln285_1_fu_264_p2 <= (icmp_ln284_reg_395 and and_ln285_fu_259_p2);
    and_ln285_fu_259_p2 <= (xor_ln282_fu_254_p2 and icmp_ln285_reg_401);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);

    ap_block_state1_assign_proc : process(real_start, ap_done_reg)
    begin
                ap_block_state1 <= ((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1));
    end process;


    ap_block_state2_assign_proc : process(icmp_ln17_fu_115_p2, in_r_TVALID_int)
    begin
                ap_block_state2 <= ((icmp_ln17_fu_115_p2 = ap_const_lv1_0) and (in_r_TVALID_int = ap_const_logic_0));
    end process;


    ap_done_assign_proc : process(ap_done_reg, ap_CS_fsm_state2, icmp_ln17_fu_115_p2, in_r_TVALID_int)
    begin
        if ((not(((icmp_ln17_fu_115_p2 = ap_const_lv1_0) and (in_r_TVALID_int = ap_const_logic_0))) and (icmp_ln17_fu_115_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(real_start, ap_CS_fsm_state1)
    begin
        if (((real_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;

    ap_ready <= internal_ap_ready;

    ap_return_assign_proc : process(ap_CS_fsm_state2, icmp_ln17_fu_115_p2, is_last_0_i_out_0_reg_93, ap_return_preg, in_r_TVALID_int)
    begin
        if ((not(((icmp_ln17_fu_115_p2 = ap_const_lv1_0) and (in_r_TVALID_int = ap_const_logic_0))) and (icmp_ln17_fu_115_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_return <= is_last_0_i_out_0_reg_93;
        else 
            ap_return <= ap_return_preg;
        end if; 
    end process;

    bitcast_ln705_fu_135_p1 <= in_r_TDATA_int;
    i_fu_121_p2 <= std_logic_vector(unsigned(i_0_i_reg_104) + unsigned(ap_const_lv15_1));
    icmp_ln17_fu_115_p2 <= "1" when (i_0_i_reg_104 = ap_const_lv15_4000) else "0";
    icmp_ln278_fu_169_p2 <= "1" when (trunc_ln263_fu_139_p1 = ap_const_lv31_0) else "0";
    icmp_ln282_fu_181_p2 <= "1" when (p_Result_i_fu_151_p4 = ap_const_lv8_96) else "0";
    icmp_ln284_fu_187_p2 <= "1" when (signed(sub_ln281_fu_175_p2) > signed(ap_const_lv9_0)) else "0";
    icmp_ln285_fu_193_p2 <= "1" when (signed(sub_ln281_fu_175_p2) < signed(ap_const_lv9_19)) else "0";
    icmp_ln295_fu_292_p2 <= "1" when (signed(tmp_25_fu_282_p4) < signed(ap_const_lv5_1)) else "0";

    in_local_V_data_0_V_blk_n_assign_proc : process(in_local_V_data_0_V_full_n, ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            in_local_V_data_0_V_blk_n <= in_local_V_data_0_V_full_n;
        else 
            in_local_V_data_0_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    in_local_V_data_0_V_din <= tmp_data_0_V_reg_448;

    in_local_V_data_0_V_write_assign_proc : process(in_local_V_data_0_V_full_n, ap_CS_fsm_state7)
    begin
        if (((in_local_V_data_0_V_full_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state7))) then 
            in_local_V_data_0_V_write <= ap_const_logic_1;
        else 
            in_local_V_data_0_V_write <= ap_const_logic_0;
        end if; 
    end process;


    in_r_TDATA_blk_n_assign_proc : process(ap_CS_fsm_state2, icmp_ln17_fu_115_p2, in_r_TVALID_int)
    begin
        if (((icmp_ln17_fu_115_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            in_r_TDATA_blk_n <= in_r_TVALID_int;
        else 
            in_r_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    in_r_TREADY_assign_proc : process(in_r_TVALID, regslice_both_in_last_V_U_ack_in)
    begin
        if (((in_r_TVALID = ap_const_logic_1) and (regslice_both_in_last_V_U_ack_in = ap_const_logic_1))) then 
            in_r_TREADY <= ap_const_logic_1;
        else 
            in_r_TREADY <= ap_const_logic_0;
        end if; 
    end process;


    in_r_TREADY_int_assign_proc : process(ap_CS_fsm_state2, icmp_ln17_fu_115_p2, in_r_TVALID_int)
    begin
        if ((not(((icmp_ln17_fu_115_p2 = ap_const_lv1_0) and (in_r_TVALID_int = ap_const_logic_0))) and (icmp_ln17_fu_115_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            in_r_TREADY_int <= ap_const_logic_1;
        else 
            in_r_TREADY_int <= ap_const_logic_0;
        end if; 
    end process;


    internal_ap_ready_assign_proc : process(ap_CS_fsm_state2, icmp_ln17_fu_115_p2, in_r_TVALID_int)
    begin
        if ((not(((icmp_ln17_fu_115_p2 = ap_const_lv1_0) and (in_r_TVALID_int = ap_const_logic_0))) and (icmp_ln17_fu_115_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            internal_ap_ready <= ap_const_logic_1;
        else 
            internal_ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    lshr_ln286_fu_229_p2 <= std_logic_vector(shift_right(unsigned(tmp_fu_218_p3),to_integer(unsigned('0' & sext_ln281_fu_226_p1(24-1 downto 0)))));
    or_ln22_fu_209_p2 <= (is_last_0_i_out_0_reg_93 or in_r_TLAST_int);
    or_ln282_fu_203_p2 <= (icmp_ln282_fu_181_p2 or icmp_ln278_fu_169_p2);
    or_ln284_fu_332_p2 <= (or_ln282_reg_411 or icmp_ln284_reg_395);
    p_Result_i_fu_151_p4 <= bitcast_ln705_fu_135_p1(30 downto 23);

    real_start_assign_proc : process(ap_start, start_full_n, start_once_reg)
    begin
        if (((start_once_reg = ap_const_logic_0) and (start_full_n = ap_const_logic_0))) then 
            real_start <= ap_const_logic_0;
        else 
            real_start <= ap_start;
        end if; 
    end process;

    select_ln278_fu_298_p3 <= 
        ap_const_lv8_0 when (icmp_ln278_reg_379(0) = '1') else 
        select_ln285_reg_422;
    select_ln282_fu_314_p3 <= 
        trunc_ln296_reg_373 when (and_ln282_fu_309_p2(0) = '1') else 
        select_ln278_fu_298_p3;
    select_ln284_fu_336_p3 <= 
        select_ln282_reg_437 when (or_ln284_fu_332_p2(0) = '1') else 
        select_ln295_fu_325_p3;
    select_ln285_fu_269_p3 <= 
        trunc_ln286_fu_235_p1 when (and_ln285_1_fu_264_p2(0) = '1') else 
        select_ln288_fu_246_p3;
    select_ln288_fu_246_p3 <= 
        ap_const_lv8_FF when (tmp_26_fu_239_p3(0) = '1') else 
        ap_const_lv8_0;
    select_ln295_fu_325_p3 <= 
        shl_ln297_fu_321_p2 when (icmp_ln295_reg_432(0) = '1') else 
        ap_const_lv8_0;
        sext_ln281_fu_226_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sub_ln281_reg_385),24));

    shl_ln297_fu_321_p2 <= std_logic_vector(shift_left(unsigned(trunc_ln296_reg_373),to_integer(unsigned('0' & sub_ln294_reg_427(8-1 downto 0)))));
    start_out <= real_start;

    start_write_assign_proc : process(real_start, start_once_reg)
    begin
        if (((start_once_reg = ap_const_logic_0) and (real_start = ap_const_logic_1))) then 
            start_write <= ap_const_logic_1;
        else 
            start_write <= ap_const_logic_0;
        end if; 
    end process;

    sub_ln281_fu_175_p2 <= std_logic_vector(unsigned(ap_const_lv9_96) - unsigned(zext_ln266_fu_161_p1));
    sub_ln294_fu_277_p2 <= std_logic_vector(unsigned(ap_const_lv8_0) - unsigned(trunc_ln294_reg_406));
    sub_ln461_fu_343_p2 <= std_logic_vector(unsigned(ap_const_lv8_0) - unsigned(select_ln284_reg_442));
    tmp_25_fu_282_p4 <= sub_ln294_fu_277_p2(7 downto 3);
    tmp_26_fu_239_p3 <= bitcast_ln705_reg_362(31 downto 31);
    tmp_data_0_V_fu_348_p3 <= 
        sub_ln461_fu_343_p2 when (tmp_24_reg_368(0) = '1') else 
        select_ln284_reg_442;
    tmp_fu_218_p3 <= (ap_const_lv1_1 & trunc_ln270_fu_215_p1);
    trunc_ln263_fu_139_p1 <= bitcast_ln705_fu_135_p1(31 - 1 downto 0);
    trunc_ln270_fu_215_p1 <= bitcast_ln705_reg_362(23 - 1 downto 0);
    trunc_ln286_fu_235_p1 <= lshr_ln286_fu_229_p2(8 - 1 downto 0);
    trunc_ln294_fu_199_p1 <= sub_ln281_fu_175_p2(8 - 1 downto 0);
    trunc_ln296_fu_165_p1 <= bitcast_ln705_fu_135_p1(8 - 1 downto 0);
    xor_ln278_fu_304_p2 <= (icmp_ln278_reg_379 xor ap_const_lv1_1);
    xor_ln282_fu_254_p2 <= (or_ln282_reg_411 xor ap_const_lv1_1);
    zext_ln266_fu_161_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_Result_i_fu_151_p4),9));
end behav;
