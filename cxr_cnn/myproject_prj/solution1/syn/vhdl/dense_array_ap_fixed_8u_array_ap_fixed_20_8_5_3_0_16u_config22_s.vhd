-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2019.2
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity dense_array_ap_fixed_8u_array_ap_fixed_20_8_5_3_0_16u_config22_s is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    start_full_n : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    start_out : OUT STD_LOGIC;
    start_write : OUT STD_LOGIC;
    data_stream_V_data_0_V_dout : IN STD_LOGIC_VECTOR (19 downto 0);
    data_stream_V_data_0_V_empty_n : IN STD_LOGIC;
    data_stream_V_data_0_V_read : OUT STD_LOGIC;
    data_stream_V_data_1_V_dout : IN STD_LOGIC_VECTOR (19 downto 0);
    data_stream_V_data_1_V_empty_n : IN STD_LOGIC;
    data_stream_V_data_1_V_read : OUT STD_LOGIC;
    data_stream_V_data_2_V_dout : IN STD_LOGIC_VECTOR (19 downto 0);
    data_stream_V_data_2_V_empty_n : IN STD_LOGIC;
    data_stream_V_data_2_V_read : OUT STD_LOGIC;
    data_stream_V_data_3_V_dout : IN STD_LOGIC_VECTOR (19 downto 0);
    data_stream_V_data_3_V_empty_n : IN STD_LOGIC;
    data_stream_V_data_3_V_read : OUT STD_LOGIC;
    data_stream_V_data_4_V_dout : IN STD_LOGIC_VECTOR (19 downto 0);
    data_stream_V_data_4_V_empty_n : IN STD_LOGIC;
    data_stream_V_data_4_V_read : OUT STD_LOGIC;
    data_stream_V_data_5_V_dout : IN STD_LOGIC_VECTOR (19 downto 0);
    data_stream_V_data_5_V_empty_n : IN STD_LOGIC;
    data_stream_V_data_5_V_read : OUT STD_LOGIC;
    data_stream_V_data_6_V_dout : IN STD_LOGIC_VECTOR (19 downto 0);
    data_stream_V_data_6_V_empty_n : IN STD_LOGIC;
    data_stream_V_data_6_V_read : OUT STD_LOGIC;
    data_stream_V_data_7_V_dout : IN STD_LOGIC_VECTOR (19 downto 0);
    data_stream_V_data_7_V_empty_n : IN STD_LOGIC;
    data_stream_V_data_7_V_read : OUT STD_LOGIC;
    res_stream_V_data_0_V_din : OUT STD_LOGIC_VECTOR (19 downto 0);
    res_stream_V_data_0_V_full_n : IN STD_LOGIC;
    res_stream_V_data_0_V_write : OUT STD_LOGIC;
    res_stream_V_data_1_V_din : OUT STD_LOGIC_VECTOR (19 downto 0);
    res_stream_V_data_1_V_full_n : IN STD_LOGIC;
    res_stream_V_data_1_V_write : OUT STD_LOGIC;
    res_stream_V_data_2_V_din : OUT STD_LOGIC_VECTOR (19 downto 0);
    res_stream_V_data_2_V_full_n : IN STD_LOGIC;
    res_stream_V_data_2_V_write : OUT STD_LOGIC;
    res_stream_V_data_3_V_din : OUT STD_LOGIC_VECTOR (19 downto 0);
    res_stream_V_data_3_V_full_n : IN STD_LOGIC;
    res_stream_V_data_3_V_write : OUT STD_LOGIC;
    res_stream_V_data_4_V_din : OUT STD_LOGIC_VECTOR (19 downto 0);
    res_stream_V_data_4_V_full_n : IN STD_LOGIC;
    res_stream_V_data_4_V_write : OUT STD_LOGIC;
    res_stream_V_data_5_V_din : OUT STD_LOGIC_VECTOR (19 downto 0);
    res_stream_V_data_5_V_full_n : IN STD_LOGIC;
    res_stream_V_data_5_V_write : OUT STD_LOGIC;
    res_stream_V_data_6_V_din : OUT STD_LOGIC_VECTOR (19 downto 0);
    res_stream_V_data_6_V_full_n : IN STD_LOGIC;
    res_stream_V_data_6_V_write : OUT STD_LOGIC;
    res_stream_V_data_7_V_din : OUT STD_LOGIC_VECTOR (19 downto 0);
    res_stream_V_data_7_V_full_n : IN STD_LOGIC;
    res_stream_V_data_7_V_write : OUT STD_LOGIC;
    res_stream_V_data_8_V_din : OUT STD_LOGIC_VECTOR (19 downto 0);
    res_stream_V_data_8_V_full_n : IN STD_LOGIC;
    res_stream_V_data_8_V_write : OUT STD_LOGIC;
    res_stream_V_data_9_V_din : OUT STD_LOGIC_VECTOR (19 downto 0);
    res_stream_V_data_9_V_full_n : IN STD_LOGIC;
    res_stream_V_data_9_V_write : OUT STD_LOGIC;
    res_stream_V_data_10_V_din : OUT STD_LOGIC_VECTOR (19 downto 0);
    res_stream_V_data_10_V_full_n : IN STD_LOGIC;
    res_stream_V_data_10_V_write : OUT STD_LOGIC;
    res_stream_V_data_11_V_din : OUT STD_LOGIC_VECTOR (19 downto 0);
    res_stream_V_data_11_V_full_n : IN STD_LOGIC;
    res_stream_V_data_11_V_write : OUT STD_LOGIC;
    res_stream_V_data_12_V_din : OUT STD_LOGIC_VECTOR (19 downto 0);
    res_stream_V_data_12_V_full_n : IN STD_LOGIC;
    res_stream_V_data_12_V_write : OUT STD_LOGIC;
    res_stream_V_data_13_V_din : OUT STD_LOGIC_VECTOR (19 downto 0);
    res_stream_V_data_13_V_full_n : IN STD_LOGIC;
    res_stream_V_data_13_V_write : OUT STD_LOGIC;
    res_stream_V_data_14_V_din : OUT STD_LOGIC_VECTOR (19 downto 0);
    res_stream_V_data_14_V_full_n : IN STD_LOGIC;
    res_stream_V_data_14_V_write : OUT STD_LOGIC;
    res_stream_V_data_15_V_din : OUT STD_LOGIC_VECTOR (19 downto 0);
    res_stream_V_data_15_V_full_n : IN STD_LOGIC;
    res_stream_V_data_15_V_write : OUT STD_LOGIC );
end;


architecture behav of dense_array_ap_fixed_8u_array_ap_fixed_20_8_5_3_0_16u_config22_s is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (69 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (69 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (69 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (69 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (69 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (69 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (69 downto 0) := "0000000000000000000000000000000000000000000000000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (69 downto 0) := "0000000000000000000000000000000000000000000000000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (69 downto 0) := "0000000000000000000000000000000000000000000000000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (69 downto 0) := "0000000000000000000000000000000000000000000000000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (69 downto 0) := "0000000000000000000000000000000000000000000000000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (69 downto 0) := "0000000000000000000000000000000000000000000000000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (69 downto 0) := "0000000000000000000000000000000000000000000000000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (69 downto 0) := "0000000000000000000000000000000000000000000000000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (69 downto 0) := "0000000000000000000000000000000000000000000000000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (69 downto 0) := "0000000000000000000000000000000000000000000000000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (69 downto 0) := "0000000000000000000000000000000000000000000000000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (69 downto 0) := "0000000000000000000000000000000000000000000000000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (69 downto 0) := "0000000000000000000000000000000000000000000000000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (69 downto 0) := "0000000000000000000000000000000000000000000000000010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (69 downto 0) := "0000000000000000000000000000000000000000000000000100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (69 downto 0) := "0000000000000000000000000000000000000000000000001000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (69 downto 0) := "0000000000000000000000000000000000000000000000010000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (69 downto 0) := "0000000000000000000000000000000000000000000000100000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (69 downto 0) := "0000000000000000000000000000000000000000000001000000000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (69 downto 0) := "0000000000000000000000000000000000000000000010000000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (69 downto 0) := "0000000000000000000000000000000000000000000100000000000000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (69 downto 0) := "0000000000000000000000000000000000000000001000000000000000000000000000";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (69 downto 0) := "0000000000000000000000000000000000000000010000000000000000000000000000";
    constant ap_ST_fsm_state30 : STD_LOGIC_VECTOR (69 downto 0) := "0000000000000000000000000000000000000000100000000000000000000000000000";
    constant ap_ST_fsm_state31 : STD_LOGIC_VECTOR (69 downto 0) := "0000000000000000000000000000000000000001000000000000000000000000000000";
    constant ap_ST_fsm_state32 : STD_LOGIC_VECTOR (69 downto 0) := "0000000000000000000000000000000000000010000000000000000000000000000000";
    constant ap_ST_fsm_state33 : STD_LOGIC_VECTOR (69 downto 0) := "0000000000000000000000000000000000000100000000000000000000000000000000";
    constant ap_ST_fsm_state34 : STD_LOGIC_VECTOR (69 downto 0) := "0000000000000000000000000000000000001000000000000000000000000000000000";
    constant ap_ST_fsm_state35 : STD_LOGIC_VECTOR (69 downto 0) := "0000000000000000000000000000000000010000000000000000000000000000000000";
    constant ap_ST_fsm_state36 : STD_LOGIC_VECTOR (69 downto 0) := "0000000000000000000000000000000000100000000000000000000000000000000000";
    constant ap_ST_fsm_state37 : STD_LOGIC_VECTOR (69 downto 0) := "0000000000000000000000000000000001000000000000000000000000000000000000";
    constant ap_ST_fsm_state38 : STD_LOGIC_VECTOR (69 downto 0) := "0000000000000000000000000000000010000000000000000000000000000000000000";
    constant ap_ST_fsm_state39 : STD_LOGIC_VECTOR (69 downto 0) := "0000000000000000000000000000000100000000000000000000000000000000000000";
    constant ap_ST_fsm_state40 : STD_LOGIC_VECTOR (69 downto 0) := "0000000000000000000000000000001000000000000000000000000000000000000000";
    constant ap_ST_fsm_state41 : STD_LOGIC_VECTOR (69 downto 0) := "0000000000000000000000000000010000000000000000000000000000000000000000";
    constant ap_ST_fsm_state42 : STD_LOGIC_VECTOR (69 downto 0) := "0000000000000000000000000000100000000000000000000000000000000000000000";
    constant ap_ST_fsm_state43 : STD_LOGIC_VECTOR (69 downto 0) := "0000000000000000000000000001000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state44 : STD_LOGIC_VECTOR (69 downto 0) := "0000000000000000000000000010000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state45 : STD_LOGIC_VECTOR (69 downto 0) := "0000000000000000000000000100000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state46 : STD_LOGIC_VECTOR (69 downto 0) := "0000000000000000000000001000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state47 : STD_LOGIC_VECTOR (69 downto 0) := "0000000000000000000000010000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state48 : STD_LOGIC_VECTOR (69 downto 0) := "0000000000000000000000100000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state49 : STD_LOGIC_VECTOR (69 downto 0) := "0000000000000000000001000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state50 : STD_LOGIC_VECTOR (69 downto 0) := "0000000000000000000010000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state51 : STD_LOGIC_VECTOR (69 downto 0) := "0000000000000000000100000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state52 : STD_LOGIC_VECTOR (69 downto 0) := "0000000000000000001000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state53 : STD_LOGIC_VECTOR (69 downto 0) := "0000000000000000010000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state54 : STD_LOGIC_VECTOR (69 downto 0) := "0000000000000000100000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state55 : STD_LOGIC_VECTOR (69 downto 0) := "0000000000000001000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state56 : STD_LOGIC_VECTOR (69 downto 0) := "0000000000000010000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state57 : STD_LOGIC_VECTOR (69 downto 0) := "0000000000000100000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state58 : STD_LOGIC_VECTOR (69 downto 0) := "0000000000001000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state59 : STD_LOGIC_VECTOR (69 downto 0) := "0000000000010000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state60 : STD_LOGIC_VECTOR (69 downto 0) := "0000000000100000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state61 : STD_LOGIC_VECTOR (69 downto 0) := "0000000001000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state62 : STD_LOGIC_VECTOR (69 downto 0) := "0000000010000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state63 : STD_LOGIC_VECTOR (69 downto 0) := "0000000100000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state64 : STD_LOGIC_VECTOR (69 downto 0) := "0000001000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state65 : STD_LOGIC_VECTOR (69 downto 0) := "0000010000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state66 : STD_LOGIC_VECTOR (69 downto 0) := "0000100000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state67 : STD_LOGIC_VECTOR (69 downto 0) := "0001000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state68 : STD_LOGIC_VECTOR (69 downto 0) := "0010000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state69 : STD_LOGIC_VECTOR (69 downto 0) := "0100000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state70 : STD_LOGIC_VECTOR (69 downto 0) := "1000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_45 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000101";
    constant ap_const_lv32_44 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000100";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv20_1FE : STD_LOGIC_VECTOR (19 downto 0) := "00000000000111111110";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal real_start : STD_LOGIC;
    signal start_once_reg : STD_LOGIC := '0';
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (69 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal internal_ap_ready : STD_LOGIC;
    signal data_stream_V_data_0_V_blk_n : STD_LOGIC;
    signal data_stream_V_data_1_V_blk_n : STD_LOGIC;
    signal data_stream_V_data_2_V_blk_n : STD_LOGIC;
    signal data_stream_V_data_3_V_blk_n : STD_LOGIC;
    signal data_stream_V_data_4_V_blk_n : STD_LOGIC;
    signal data_stream_V_data_5_V_blk_n : STD_LOGIC;
    signal data_stream_V_data_6_V_blk_n : STD_LOGIC;
    signal data_stream_V_data_7_V_blk_n : STD_LOGIC;
    signal res_stream_V_data_0_V_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state70 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state70 : signal is "none";
    signal res_stream_V_data_1_V_blk_n : STD_LOGIC;
    signal res_stream_V_data_2_V_blk_n : STD_LOGIC;
    signal res_stream_V_data_3_V_blk_n : STD_LOGIC;
    signal res_stream_V_data_4_V_blk_n : STD_LOGIC;
    signal res_stream_V_data_5_V_blk_n : STD_LOGIC;
    signal res_stream_V_data_6_V_blk_n : STD_LOGIC;
    signal res_stream_V_data_7_V_blk_n : STD_LOGIC;
    signal res_stream_V_data_8_V_blk_n : STD_LOGIC;
    signal res_stream_V_data_9_V_blk_n : STD_LOGIC;
    signal res_stream_V_data_10_V_blk_n : STD_LOGIC;
    signal res_stream_V_data_11_V_blk_n : STD_LOGIC;
    signal res_stream_V_data_12_V_blk_n : STD_LOGIC;
    signal res_stream_V_data_13_V_blk_n : STD_LOGIC;
    signal res_stream_V_data_14_V_blk_n : STD_LOGIC;
    signal res_stream_V_data_15_V_blk_n : STD_LOGIC;
    signal data_0_V_reg_251 : STD_LOGIC_VECTOR (19 downto 0);
    signal io_acc_block_signal_op71 : STD_LOGIC;
    signal ap_block_state1 : BOOLEAN;
    signal data_1_V_reg_256 : STD_LOGIC_VECTOR (19 downto 0);
    signal data_2_V_reg_261 : STD_LOGIC_VECTOR (19 downto 0);
    signal data_3_V_reg_266 : STD_LOGIC_VECTOR (19 downto 0);
    signal data_4_V_reg_271 : STD_LOGIC_VECTOR (19 downto 0);
    signal data_5_V_reg_276 : STD_LOGIC_VECTOR (19 downto 0);
    signal data_6_V_reg_281 : STD_LOGIC_VECTOR (19 downto 0);
    signal data_7_V_reg_286 : STD_LOGIC_VECTOR (19 downto 0);
    signal tmp_data_0_V_reg_291 : STD_LOGIC_VECTOR (19 downto 0);
    signal ap_CS_fsm_state69 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state69 : signal is "none";
    signal tmp_data_1_V_reg_296 : STD_LOGIC_VECTOR (19 downto 0);
    signal tmp_data_2_V_reg_301 : STD_LOGIC_VECTOR (19 downto 0);
    signal tmp_data_3_V_reg_306 : STD_LOGIC_VECTOR (19 downto 0);
    signal tmp_data_4_V_reg_311 : STD_LOGIC_VECTOR (19 downto 0);
    signal tmp_data_5_V_reg_316 : STD_LOGIC_VECTOR (19 downto 0);
    signal tmp_data_7_V_reg_321 : STD_LOGIC_VECTOR (19 downto 0);
    signal tmp_data_8_V_reg_326 : STD_LOGIC_VECTOR (19 downto 0);
    signal tmp_data_9_V_reg_331 : STD_LOGIC_VECTOR (19 downto 0);
    signal tmp_data_10_V_reg_336 : STD_LOGIC_VECTOR (19 downto 0);
    signal tmp_data_11_V_reg_341 : STD_LOGIC_VECTOR (19 downto 0);
    signal tmp_data_12_V_reg_346 : STD_LOGIC_VECTOR (19 downto 0);
    signal tmp_data_13_V_reg_351 : STD_LOGIC_VECTOR (19 downto 0);
    signal tmp_data_14_V_reg_356 : STD_LOGIC_VECTOR (19 downto 0);
    signal tmp_data_15_V_reg_361 : STD_LOGIC_VECTOR (19 downto 0);
    signal grp_dense_wrapper_ap_fixed_20_8_5_3_0_ap_fixed_20_8_5_3_0_config22_s_fu_147_ap_start : STD_LOGIC;
    signal grp_dense_wrapper_ap_fixed_20_8_5_3_0_ap_fixed_20_8_5_3_0_config22_s_fu_147_ap_done : STD_LOGIC;
    signal grp_dense_wrapper_ap_fixed_20_8_5_3_0_ap_fixed_20_8_5_3_0_config22_s_fu_147_ap_idle : STD_LOGIC;
    signal grp_dense_wrapper_ap_fixed_20_8_5_3_0_ap_fixed_20_8_5_3_0_config22_s_fu_147_ap_ready : STD_LOGIC;
    signal grp_dense_wrapper_ap_fixed_20_8_5_3_0_ap_fixed_20_8_5_3_0_config22_s_fu_147_ap_return_0 : STD_LOGIC_VECTOR (19 downto 0);
    signal grp_dense_wrapper_ap_fixed_20_8_5_3_0_ap_fixed_20_8_5_3_0_config22_s_fu_147_ap_return_1 : STD_LOGIC_VECTOR (19 downto 0);
    signal grp_dense_wrapper_ap_fixed_20_8_5_3_0_ap_fixed_20_8_5_3_0_config22_s_fu_147_ap_return_2 : STD_LOGIC_VECTOR (19 downto 0);
    signal grp_dense_wrapper_ap_fixed_20_8_5_3_0_ap_fixed_20_8_5_3_0_config22_s_fu_147_ap_return_3 : STD_LOGIC_VECTOR (19 downto 0);
    signal grp_dense_wrapper_ap_fixed_20_8_5_3_0_ap_fixed_20_8_5_3_0_config22_s_fu_147_ap_return_4 : STD_LOGIC_VECTOR (19 downto 0);
    signal grp_dense_wrapper_ap_fixed_20_8_5_3_0_ap_fixed_20_8_5_3_0_config22_s_fu_147_ap_return_5 : STD_LOGIC_VECTOR (19 downto 0);
    signal grp_dense_wrapper_ap_fixed_20_8_5_3_0_ap_fixed_20_8_5_3_0_config22_s_fu_147_ap_return_6 : STD_LOGIC_VECTOR (19 downto 0);
    signal grp_dense_wrapper_ap_fixed_20_8_5_3_0_ap_fixed_20_8_5_3_0_config22_s_fu_147_ap_return_7 : STD_LOGIC_VECTOR (19 downto 0);
    signal grp_dense_wrapper_ap_fixed_20_8_5_3_0_ap_fixed_20_8_5_3_0_config22_s_fu_147_ap_return_8 : STD_LOGIC_VECTOR (19 downto 0);
    signal grp_dense_wrapper_ap_fixed_20_8_5_3_0_ap_fixed_20_8_5_3_0_config22_s_fu_147_ap_return_9 : STD_LOGIC_VECTOR (19 downto 0);
    signal grp_dense_wrapper_ap_fixed_20_8_5_3_0_ap_fixed_20_8_5_3_0_config22_s_fu_147_ap_return_10 : STD_LOGIC_VECTOR (19 downto 0);
    signal grp_dense_wrapper_ap_fixed_20_8_5_3_0_ap_fixed_20_8_5_3_0_config22_s_fu_147_ap_return_11 : STD_LOGIC_VECTOR (19 downto 0);
    signal grp_dense_wrapper_ap_fixed_20_8_5_3_0_ap_fixed_20_8_5_3_0_config22_s_fu_147_ap_return_12 : STD_LOGIC_VECTOR (19 downto 0);
    signal grp_dense_wrapper_ap_fixed_20_8_5_3_0_ap_fixed_20_8_5_3_0_config22_s_fu_147_ap_return_13 : STD_LOGIC_VECTOR (19 downto 0);
    signal grp_dense_wrapper_ap_fixed_20_8_5_3_0_ap_fixed_20_8_5_3_0_config22_s_fu_147_ap_return_14 : STD_LOGIC_VECTOR (19 downto 0);
    signal grp_dense_wrapper_ap_fixed_20_8_5_3_0_ap_fixed_20_8_5_3_0_config22_s_fu_147_ap_start_reg : STD_LOGIC := '0';
    signal ap_NS_fsm : STD_LOGIC_VECTOR (69 downto 0);
    signal ap_NS_fsm_state2 : STD_LOGIC;
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal io_acc_block_signal_op189 : STD_LOGIC;

    component dense_wrapper_ap_fixed_20_8_5_3_0_ap_fixed_20_8_5_3_0_config22_s IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        data_0_V_read : IN STD_LOGIC_VECTOR (19 downto 0);
        data_1_V_read : IN STD_LOGIC_VECTOR (19 downto 0);
        data_2_V_read : IN STD_LOGIC_VECTOR (19 downto 0);
        data_3_V_read : IN STD_LOGIC_VECTOR (19 downto 0);
        data_4_V_read : IN STD_LOGIC_VECTOR (19 downto 0);
        data_5_V_read : IN STD_LOGIC_VECTOR (19 downto 0);
        data_6_V_read : IN STD_LOGIC_VECTOR (19 downto 0);
        data_7_V_read : IN STD_LOGIC_VECTOR (19 downto 0);
        ap_return_0 : OUT STD_LOGIC_VECTOR (19 downto 0);
        ap_return_1 : OUT STD_LOGIC_VECTOR (19 downto 0);
        ap_return_2 : OUT STD_LOGIC_VECTOR (19 downto 0);
        ap_return_3 : OUT STD_LOGIC_VECTOR (19 downto 0);
        ap_return_4 : OUT STD_LOGIC_VECTOR (19 downto 0);
        ap_return_5 : OUT STD_LOGIC_VECTOR (19 downto 0);
        ap_return_6 : OUT STD_LOGIC_VECTOR (19 downto 0);
        ap_return_7 : OUT STD_LOGIC_VECTOR (19 downto 0);
        ap_return_8 : OUT STD_LOGIC_VECTOR (19 downto 0);
        ap_return_9 : OUT STD_LOGIC_VECTOR (19 downto 0);
        ap_return_10 : OUT STD_LOGIC_VECTOR (19 downto 0);
        ap_return_11 : OUT STD_LOGIC_VECTOR (19 downto 0);
        ap_return_12 : OUT STD_LOGIC_VECTOR (19 downto 0);
        ap_return_13 : OUT STD_LOGIC_VECTOR (19 downto 0);
        ap_return_14 : OUT STD_LOGIC_VECTOR (19 downto 0) );
    end component;



begin
    grp_dense_wrapper_ap_fixed_20_8_5_3_0_ap_fixed_20_8_5_3_0_config22_s_fu_147 : component dense_wrapper_ap_fixed_20_8_5_3_0_ap_fixed_20_8_5_3_0_config22_s
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_dense_wrapper_ap_fixed_20_8_5_3_0_ap_fixed_20_8_5_3_0_config22_s_fu_147_ap_start,
        ap_done => grp_dense_wrapper_ap_fixed_20_8_5_3_0_ap_fixed_20_8_5_3_0_config22_s_fu_147_ap_done,
        ap_idle => grp_dense_wrapper_ap_fixed_20_8_5_3_0_ap_fixed_20_8_5_3_0_config22_s_fu_147_ap_idle,
        ap_ready => grp_dense_wrapper_ap_fixed_20_8_5_3_0_ap_fixed_20_8_5_3_0_config22_s_fu_147_ap_ready,
        data_0_V_read => data_0_V_reg_251,
        data_1_V_read => data_1_V_reg_256,
        data_2_V_read => data_2_V_reg_261,
        data_3_V_read => data_3_V_reg_266,
        data_4_V_read => data_4_V_reg_271,
        data_5_V_read => data_5_V_reg_276,
        data_6_V_read => data_6_V_reg_281,
        data_7_V_read => data_7_V_reg_286,
        ap_return_0 => grp_dense_wrapper_ap_fixed_20_8_5_3_0_ap_fixed_20_8_5_3_0_config22_s_fu_147_ap_return_0,
        ap_return_1 => grp_dense_wrapper_ap_fixed_20_8_5_3_0_ap_fixed_20_8_5_3_0_config22_s_fu_147_ap_return_1,
        ap_return_2 => grp_dense_wrapper_ap_fixed_20_8_5_3_0_ap_fixed_20_8_5_3_0_config22_s_fu_147_ap_return_2,
        ap_return_3 => grp_dense_wrapper_ap_fixed_20_8_5_3_0_ap_fixed_20_8_5_3_0_config22_s_fu_147_ap_return_3,
        ap_return_4 => grp_dense_wrapper_ap_fixed_20_8_5_3_0_ap_fixed_20_8_5_3_0_config22_s_fu_147_ap_return_4,
        ap_return_5 => grp_dense_wrapper_ap_fixed_20_8_5_3_0_ap_fixed_20_8_5_3_0_config22_s_fu_147_ap_return_5,
        ap_return_6 => grp_dense_wrapper_ap_fixed_20_8_5_3_0_ap_fixed_20_8_5_3_0_config22_s_fu_147_ap_return_6,
        ap_return_7 => grp_dense_wrapper_ap_fixed_20_8_5_3_0_ap_fixed_20_8_5_3_0_config22_s_fu_147_ap_return_7,
        ap_return_8 => grp_dense_wrapper_ap_fixed_20_8_5_3_0_ap_fixed_20_8_5_3_0_config22_s_fu_147_ap_return_8,
        ap_return_9 => grp_dense_wrapper_ap_fixed_20_8_5_3_0_ap_fixed_20_8_5_3_0_config22_s_fu_147_ap_return_9,
        ap_return_10 => grp_dense_wrapper_ap_fixed_20_8_5_3_0_ap_fixed_20_8_5_3_0_config22_s_fu_147_ap_return_10,
        ap_return_11 => grp_dense_wrapper_ap_fixed_20_8_5_3_0_ap_fixed_20_8_5_3_0_config22_s_fu_147_ap_return_11,
        ap_return_12 => grp_dense_wrapper_ap_fixed_20_8_5_3_0_ap_fixed_20_8_5_3_0_config22_s_fu_147_ap_return_12,
        ap_return_13 => grp_dense_wrapper_ap_fixed_20_8_5_3_0_ap_fixed_20_8_5_3_0_config22_s_fu_147_ap_return_13,
        ap_return_14 => grp_dense_wrapper_ap_fixed_20_8_5_3_0_ap_fixed_20_8_5_3_0_config22_s_fu_147_ap_return_14);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((io_acc_block_signal_op189 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state70))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    grp_dense_wrapper_ap_fixed_20_8_5_3_0_ap_fixed_20_8_5_3_0_config22_s_fu_147_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_dense_wrapper_ap_fixed_20_8_5_3_0_ap_fixed_20_8_5_3_0_config22_s_fu_147_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_const_logic_1 = ap_NS_fsm_state2))) then 
                    grp_dense_wrapper_ap_fixed_20_8_5_3_0_ap_fixed_20_8_5_3_0_config22_s_fu_147_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_dense_wrapper_ap_fixed_20_8_5_3_0_ap_fixed_20_8_5_3_0_config22_s_fu_147_ap_ready = ap_const_logic_1)) then 
                    grp_dense_wrapper_ap_fixed_20_8_5_3_0_ap_fixed_20_8_5_3_0_config22_s_fu_147_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    start_once_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                start_once_reg <= ap_const_logic_0;
            else
                if (((internal_ap_ready = ap_const_logic_0) and (real_start = ap_const_logic_1))) then 
                    start_once_reg <= ap_const_logic_1;
                elsif ((internal_ap_ready = ap_const_logic_1)) then 
                    start_once_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((ap_done_reg = ap_const_logic_1) or (real_start = ap_const_logic_0) or (io_acc_block_signal_op71 = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                data_0_V_reg_251 <= data_stream_V_data_0_V_dout;
                data_1_V_reg_256 <= data_stream_V_data_1_V_dout;
                data_2_V_reg_261 <= data_stream_V_data_2_V_dout;
                data_3_V_reg_266 <= data_stream_V_data_3_V_dout;
                data_4_V_reg_271 <= data_stream_V_data_4_V_dout;
                data_5_V_reg_276 <= data_stream_V_data_5_V_dout;
                data_6_V_reg_281 <= data_stream_V_data_6_V_dout;
                data_7_V_reg_286 <= data_stream_V_data_7_V_dout;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state69)) then
                tmp_data_0_V_reg_291 <= grp_dense_wrapper_ap_fixed_20_8_5_3_0_ap_fixed_20_8_5_3_0_config22_s_fu_147_ap_return_0;
                tmp_data_10_V_reg_336 <= grp_dense_wrapper_ap_fixed_20_8_5_3_0_ap_fixed_20_8_5_3_0_config22_s_fu_147_ap_return_9;
                tmp_data_11_V_reg_341 <= grp_dense_wrapper_ap_fixed_20_8_5_3_0_ap_fixed_20_8_5_3_0_config22_s_fu_147_ap_return_10;
                tmp_data_12_V_reg_346 <= grp_dense_wrapper_ap_fixed_20_8_5_3_0_ap_fixed_20_8_5_3_0_config22_s_fu_147_ap_return_11;
                tmp_data_13_V_reg_351 <= grp_dense_wrapper_ap_fixed_20_8_5_3_0_ap_fixed_20_8_5_3_0_config22_s_fu_147_ap_return_12;
                tmp_data_14_V_reg_356 <= grp_dense_wrapper_ap_fixed_20_8_5_3_0_ap_fixed_20_8_5_3_0_config22_s_fu_147_ap_return_13;
                tmp_data_15_V_reg_361 <= grp_dense_wrapper_ap_fixed_20_8_5_3_0_ap_fixed_20_8_5_3_0_config22_s_fu_147_ap_return_14;
                tmp_data_1_V_reg_296 <= grp_dense_wrapper_ap_fixed_20_8_5_3_0_ap_fixed_20_8_5_3_0_config22_s_fu_147_ap_return_1;
                tmp_data_2_V_reg_301 <= grp_dense_wrapper_ap_fixed_20_8_5_3_0_ap_fixed_20_8_5_3_0_config22_s_fu_147_ap_return_2;
                tmp_data_3_V_reg_306 <= grp_dense_wrapper_ap_fixed_20_8_5_3_0_ap_fixed_20_8_5_3_0_config22_s_fu_147_ap_return_3;
                tmp_data_4_V_reg_311 <= grp_dense_wrapper_ap_fixed_20_8_5_3_0_ap_fixed_20_8_5_3_0_config22_s_fu_147_ap_return_4;
                tmp_data_5_V_reg_316 <= grp_dense_wrapper_ap_fixed_20_8_5_3_0_ap_fixed_20_8_5_3_0_config22_s_fu_147_ap_return_5;
                tmp_data_7_V_reg_321 <= grp_dense_wrapper_ap_fixed_20_8_5_3_0_ap_fixed_20_8_5_3_0_config22_s_fu_147_ap_return_6;
                tmp_data_8_V_reg_326 <= grp_dense_wrapper_ap_fixed_20_8_5_3_0_ap_fixed_20_8_5_3_0_config22_s_fu_147_ap_return_7;
                tmp_data_9_V_reg_331 <= grp_dense_wrapper_ap_fixed_20_8_5_3_0_ap_fixed_20_8_5_3_0_config22_s_fu_147_ap_return_8;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (real_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state70, io_acc_block_signal_op71, io_acc_block_signal_op189)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((ap_done_reg = ap_const_logic_1) or (real_start = ap_const_logic_0) or (io_acc_block_signal_op71 = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state23;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state24;
            when ap_ST_fsm_state24 => 
                ap_NS_fsm <= ap_ST_fsm_state25;
            when ap_ST_fsm_state25 => 
                ap_NS_fsm <= ap_ST_fsm_state26;
            when ap_ST_fsm_state26 => 
                ap_NS_fsm <= ap_ST_fsm_state27;
            when ap_ST_fsm_state27 => 
                ap_NS_fsm <= ap_ST_fsm_state28;
            when ap_ST_fsm_state28 => 
                ap_NS_fsm <= ap_ST_fsm_state29;
            when ap_ST_fsm_state29 => 
                ap_NS_fsm <= ap_ST_fsm_state30;
            when ap_ST_fsm_state30 => 
                ap_NS_fsm <= ap_ST_fsm_state31;
            when ap_ST_fsm_state31 => 
                ap_NS_fsm <= ap_ST_fsm_state32;
            when ap_ST_fsm_state32 => 
                ap_NS_fsm <= ap_ST_fsm_state33;
            when ap_ST_fsm_state33 => 
                ap_NS_fsm <= ap_ST_fsm_state34;
            when ap_ST_fsm_state34 => 
                ap_NS_fsm <= ap_ST_fsm_state35;
            when ap_ST_fsm_state35 => 
                ap_NS_fsm <= ap_ST_fsm_state36;
            when ap_ST_fsm_state36 => 
                ap_NS_fsm <= ap_ST_fsm_state37;
            when ap_ST_fsm_state37 => 
                ap_NS_fsm <= ap_ST_fsm_state38;
            when ap_ST_fsm_state38 => 
                ap_NS_fsm <= ap_ST_fsm_state39;
            when ap_ST_fsm_state39 => 
                ap_NS_fsm <= ap_ST_fsm_state40;
            when ap_ST_fsm_state40 => 
                ap_NS_fsm <= ap_ST_fsm_state41;
            when ap_ST_fsm_state41 => 
                ap_NS_fsm <= ap_ST_fsm_state42;
            when ap_ST_fsm_state42 => 
                ap_NS_fsm <= ap_ST_fsm_state43;
            when ap_ST_fsm_state43 => 
                ap_NS_fsm <= ap_ST_fsm_state44;
            when ap_ST_fsm_state44 => 
                ap_NS_fsm <= ap_ST_fsm_state45;
            when ap_ST_fsm_state45 => 
                ap_NS_fsm <= ap_ST_fsm_state46;
            when ap_ST_fsm_state46 => 
                ap_NS_fsm <= ap_ST_fsm_state47;
            when ap_ST_fsm_state47 => 
                ap_NS_fsm <= ap_ST_fsm_state48;
            when ap_ST_fsm_state48 => 
                ap_NS_fsm <= ap_ST_fsm_state49;
            when ap_ST_fsm_state49 => 
                ap_NS_fsm <= ap_ST_fsm_state50;
            when ap_ST_fsm_state50 => 
                ap_NS_fsm <= ap_ST_fsm_state51;
            when ap_ST_fsm_state51 => 
                ap_NS_fsm <= ap_ST_fsm_state52;
            when ap_ST_fsm_state52 => 
                ap_NS_fsm <= ap_ST_fsm_state53;
            when ap_ST_fsm_state53 => 
                ap_NS_fsm <= ap_ST_fsm_state54;
            when ap_ST_fsm_state54 => 
                ap_NS_fsm <= ap_ST_fsm_state55;
            when ap_ST_fsm_state55 => 
                ap_NS_fsm <= ap_ST_fsm_state56;
            when ap_ST_fsm_state56 => 
                ap_NS_fsm <= ap_ST_fsm_state57;
            when ap_ST_fsm_state57 => 
                ap_NS_fsm <= ap_ST_fsm_state58;
            when ap_ST_fsm_state58 => 
                ap_NS_fsm <= ap_ST_fsm_state59;
            when ap_ST_fsm_state59 => 
                ap_NS_fsm <= ap_ST_fsm_state60;
            when ap_ST_fsm_state60 => 
                ap_NS_fsm <= ap_ST_fsm_state61;
            when ap_ST_fsm_state61 => 
                ap_NS_fsm <= ap_ST_fsm_state62;
            when ap_ST_fsm_state62 => 
                ap_NS_fsm <= ap_ST_fsm_state63;
            when ap_ST_fsm_state63 => 
                ap_NS_fsm <= ap_ST_fsm_state64;
            when ap_ST_fsm_state64 => 
                ap_NS_fsm <= ap_ST_fsm_state65;
            when ap_ST_fsm_state65 => 
                ap_NS_fsm <= ap_ST_fsm_state66;
            when ap_ST_fsm_state66 => 
                ap_NS_fsm <= ap_ST_fsm_state67;
            when ap_ST_fsm_state67 => 
                ap_NS_fsm <= ap_ST_fsm_state68;
            when ap_ST_fsm_state68 => 
                ap_NS_fsm <= ap_ST_fsm_state69;
            when ap_ST_fsm_state69 => 
                ap_NS_fsm <= ap_ST_fsm_state70;
            when ap_ST_fsm_state70 => 
                if (((io_acc_block_signal_op189 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state70))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state70;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state69 <= ap_CS_fsm(68);
    ap_CS_fsm_state70 <= ap_CS_fsm(69);
    ap_NS_fsm_state2 <= ap_NS_fsm(1);

    ap_block_state1_assign_proc : process(real_start, ap_done_reg, io_acc_block_signal_op71)
    begin
                ap_block_state1 <= ((ap_done_reg = ap_const_logic_1) or (real_start = ap_const_logic_0) or (io_acc_block_signal_op71 = ap_const_logic_0));
    end process;


    ap_done_assign_proc : process(ap_done_reg, ap_CS_fsm_state70, io_acc_block_signal_op189)
    begin
        if (((io_acc_block_signal_op189 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state70))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(real_start, ap_CS_fsm_state1)
    begin
        if (((real_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;

    ap_ready <= internal_ap_ready;

    data_stream_V_data_0_V_blk_n_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, data_stream_V_data_0_V_empty_n)
    begin
        if ((not(((ap_done_reg = ap_const_logic_1) or (real_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            data_stream_V_data_0_V_blk_n <= data_stream_V_data_0_V_empty_n;
        else 
            data_stream_V_data_0_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    data_stream_V_data_0_V_read_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, io_acc_block_signal_op71)
    begin
        if ((not(((ap_done_reg = ap_const_logic_1) or (real_start = ap_const_logic_0) or (io_acc_block_signal_op71 = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            data_stream_V_data_0_V_read <= ap_const_logic_1;
        else 
            data_stream_V_data_0_V_read <= ap_const_logic_0;
        end if; 
    end process;


    data_stream_V_data_1_V_blk_n_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, data_stream_V_data_1_V_empty_n)
    begin
        if ((not(((ap_done_reg = ap_const_logic_1) or (real_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            data_stream_V_data_1_V_blk_n <= data_stream_V_data_1_V_empty_n;
        else 
            data_stream_V_data_1_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    data_stream_V_data_1_V_read_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, io_acc_block_signal_op71)
    begin
        if ((not(((ap_done_reg = ap_const_logic_1) or (real_start = ap_const_logic_0) or (io_acc_block_signal_op71 = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            data_stream_V_data_1_V_read <= ap_const_logic_1;
        else 
            data_stream_V_data_1_V_read <= ap_const_logic_0;
        end if; 
    end process;


    data_stream_V_data_2_V_blk_n_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, data_stream_V_data_2_V_empty_n)
    begin
        if ((not(((ap_done_reg = ap_const_logic_1) or (real_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            data_stream_V_data_2_V_blk_n <= data_stream_V_data_2_V_empty_n;
        else 
            data_stream_V_data_2_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    data_stream_V_data_2_V_read_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, io_acc_block_signal_op71)
    begin
        if ((not(((ap_done_reg = ap_const_logic_1) or (real_start = ap_const_logic_0) or (io_acc_block_signal_op71 = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            data_stream_V_data_2_V_read <= ap_const_logic_1;
        else 
            data_stream_V_data_2_V_read <= ap_const_logic_0;
        end if; 
    end process;


    data_stream_V_data_3_V_blk_n_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, data_stream_V_data_3_V_empty_n)
    begin
        if ((not(((ap_done_reg = ap_const_logic_1) or (real_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            data_stream_V_data_3_V_blk_n <= data_stream_V_data_3_V_empty_n;
        else 
            data_stream_V_data_3_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    data_stream_V_data_3_V_read_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, io_acc_block_signal_op71)
    begin
        if ((not(((ap_done_reg = ap_const_logic_1) or (real_start = ap_const_logic_0) or (io_acc_block_signal_op71 = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            data_stream_V_data_3_V_read <= ap_const_logic_1;
        else 
            data_stream_V_data_3_V_read <= ap_const_logic_0;
        end if; 
    end process;


    data_stream_V_data_4_V_blk_n_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, data_stream_V_data_4_V_empty_n)
    begin
        if ((not(((ap_done_reg = ap_const_logic_1) or (real_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            data_stream_V_data_4_V_blk_n <= data_stream_V_data_4_V_empty_n;
        else 
            data_stream_V_data_4_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    data_stream_V_data_4_V_read_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, io_acc_block_signal_op71)
    begin
        if ((not(((ap_done_reg = ap_const_logic_1) or (real_start = ap_const_logic_0) or (io_acc_block_signal_op71 = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            data_stream_V_data_4_V_read <= ap_const_logic_1;
        else 
            data_stream_V_data_4_V_read <= ap_const_logic_0;
        end if; 
    end process;


    data_stream_V_data_5_V_blk_n_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, data_stream_V_data_5_V_empty_n)
    begin
        if ((not(((ap_done_reg = ap_const_logic_1) or (real_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            data_stream_V_data_5_V_blk_n <= data_stream_V_data_5_V_empty_n;
        else 
            data_stream_V_data_5_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    data_stream_V_data_5_V_read_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, io_acc_block_signal_op71)
    begin
        if ((not(((ap_done_reg = ap_const_logic_1) or (real_start = ap_const_logic_0) or (io_acc_block_signal_op71 = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            data_stream_V_data_5_V_read <= ap_const_logic_1;
        else 
            data_stream_V_data_5_V_read <= ap_const_logic_0;
        end if; 
    end process;


    data_stream_V_data_6_V_blk_n_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, data_stream_V_data_6_V_empty_n)
    begin
        if ((not(((ap_done_reg = ap_const_logic_1) or (real_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            data_stream_V_data_6_V_blk_n <= data_stream_V_data_6_V_empty_n;
        else 
            data_stream_V_data_6_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    data_stream_V_data_6_V_read_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, io_acc_block_signal_op71)
    begin
        if ((not(((ap_done_reg = ap_const_logic_1) or (real_start = ap_const_logic_0) or (io_acc_block_signal_op71 = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            data_stream_V_data_6_V_read <= ap_const_logic_1;
        else 
            data_stream_V_data_6_V_read <= ap_const_logic_0;
        end if; 
    end process;


    data_stream_V_data_7_V_blk_n_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, data_stream_V_data_7_V_empty_n)
    begin
        if ((not(((ap_done_reg = ap_const_logic_1) or (real_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            data_stream_V_data_7_V_blk_n <= data_stream_V_data_7_V_empty_n;
        else 
            data_stream_V_data_7_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    data_stream_V_data_7_V_read_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, io_acc_block_signal_op71)
    begin
        if ((not(((ap_done_reg = ap_const_logic_1) or (real_start = ap_const_logic_0) or (io_acc_block_signal_op71 = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            data_stream_V_data_7_V_read <= ap_const_logic_1;
        else 
            data_stream_V_data_7_V_read <= ap_const_logic_0;
        end if; 
    end process;

    grp_dense_wrapper_ap_fixed_20_8_5_3_0_ap_fixed_20_8_5_3_0_config22_s_fu_147_ap_start <= grp_dense_wrapper_ap_fixed_20_8_5_3_0_ap_fixed_20_8_5_3_0_config22_s_fu_147_ap_start_reg;

    internal_ap_ready_assign_proc : process(ap_CS_fsm_state70, io_acc_block_signal_op189)
    begin
        if (((io_acc_block_signal_op189 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state70))) then 
            internal_ap_ready <= ap_const_logic_1;
        else 
            internal_ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    io_acc_block_signal_op189 <= (res_stream_V_data_9_V_full_n and res_stream_V_data_8_V_full_n and res_stream_V_data_7_V_full_n and res_stream_V_data_6_V_full_n and res_stream_V_data_5_V_full_n and res_stream_V_data_4_V_full_n and res_stream_V_data_3_V_full_n and res_stream_V_data_2_V_full_n and res_stream_V_data_1_V_full_n and res_stream_V_data_15_V_full_n and res_stream_V_data_14_V_full_n and res_stream_V_data_13_V_full_n and res_stream_V_data_12_V_full_n and res_stream_V_data_11_V_full_n and res_stream_V_data_10_V_full_n and res_stream_V_data_0_V_full_n);
    io_acc_block_signal_op71 <= (data_stream_V_data_7_V_empty_n and data_stream_V_data_6_V_empty_n and data_stream_V_data_5_V_empty_n and data_stream_V_data_4_V_empty_n and data_stream_V_data_3_V_empty_n and data_stream_V_data_2_V_empty_n and data_stream_V_data_1_V_empty_n and data_stream_V_data_0_V_empty_n);

    real_start_assign_proc : process(ap_start, start_full_n, start_once_reg)
    begin
        if (((start_once_reg = ap_const_logic_0) and (start_full_n = ap_const_logic_0))) then 
            real_start <= ap_const_logic_0;
        else 
            real_start <= ap_start;
        end if; 
    end process;


    res_stream_V_data_0_V_blk_n_assign_proc : process(res_stream_V_data_0_V_full_n, ap_CS_fsm_state70)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state70)) then 
            res_stream_V_data_0_V_blk_n <= res_stream_V_data_0_V_full_n;
        else 
            res_stream_V_data_0_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    res_stream_V_data_0_V_din <= tmp_data_0_V_reg_291;

    res_stream_V_data_0_V_write_assign_proc : process(ap_CS_fsm_state70, io_acc_block_signal_op189)
    begin
        if (((io_acc_block_signal_op189 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state70))) then 
            res_stream_V_data_0_V_write <= ap_const_logic_1;
        else 
            res_stream_V_data_0_V_write <= ap_const_logic_0;
        end if; 
    end process;


    res_stream_V_data_10_V_blk_n_assign_proc : process(res_stream_V_data_10_V_full_n, ap_CS_fsm_state70)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state70)) then 
            res_stream_V_data_10_V_blk_n <= res_stream_V_data_10_V_full_n;
        else 
            res_stream_V_data_10_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    res_stream_V_data_10_V_din <= tmp_data_10_V_reg_336;

    res_stream_V_data_10_V_write_assign_proc : process(ap_CS_fsm_state70, io_acc_block_signal_op189)
    begin
        if (((io_acc_block_signal_op189 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state70))) then 
            res_stream_V_data_10_V_write <= ap_const_logic_1;
        else 
            res_stream_V_data_10_V_write <= ap_const_logic_0;
        end if; 
    end process;


    res_stream_V_data_11_V_blk_n_assign_proc : process(res_stream_V_data_11_V_full_n, ap_CS_fsm_state70)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state70)) then 
            res_stream_V_data_11_V_blk_n <= res_stream_V_data_11_V_full_n;
        else 
            res_stream_V_data_11_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    res_stream_V_data_11_V_din <= tmp_data_11_V_reg_341;

    res_stream_V_data_11_V_write_assign_proc : process(ap_CS_fsm_state70, io_acc_block_signal_op189)
    begin
        if (((io_acc_block_signal_op189 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state70))) then 
            res_stream_V_data_11_V_write <= ap_const_logic_1;
        else 
            res_stream_V_data_11_V_write <= ap_const_logic_0;
        end if; 
    end process;


    res_stream_V_data_12_V_blk_n_assign_proc : process(res_stream_V_data_12_V_full_n, ap_CS_fsm_state70)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state70)) then 
            res_stream_V_data_12_V_blk_n <= res_stream_V_data_12_V_full_n;
        else 
            res_stream_V_data_12_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    res_stream_V_data_12_V_din <= tmp_data_12_V_reg_346;

    res_stream_V_data_12_V_write_assign_proc : process(ap_CS_fsm_state70, io_acc_block_signal_op189)
    begin
        if (((io_acc_block_signal_op189 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state70))) then 
            res_stream_V_data_12_V_write <= ap_const_logic_1;
        else 
            res_stream_V_data_12_V_write <= ap_const_logic_0;
        end if; 
    end process;


    res_stream_V_data_13_V_blk_n_assign_proc : process(res_stream_V_data_13_V_full_n, ap_CS_fsm_state70)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state70)) then 
            res_stream_V_data_13_V_blk_n <= res_stream_V_data_13_V_full_n;
        else 
            res_stream_V_data_13_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    res_stream_V_data_13_V_din <= tmp_data_13_V_reg_351;

    res_stream_V_data_13_V_write_assign_proc : process(ap_CS_fsm_state70, io_acc_block_signal_op189)
    begin
        if (((io_acc_block_signal_op189 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state70))) then 
            res_stream_V_data_13_V_write <= ap_const_logic_1;
        else 
            res_stream_V_data_13_V_write <= ap_const_logic_0;
        end if; 
    end process;


    res_stream_V_data_14_V_blk_n_assign_proc : process(res_stream_V_data_14_V_full_n, ap_CS_fsm_state70)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state70)) then 
            res_stream_V_data_14_V_blk_n <= res_stream_V_data_14_V_full_n;
        else 
            res_stream_V_data_14_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    res_stream_V_data_14_V_din <= tmp_data_14_V_reg_356;

    res_stream_V_data_14_V_write_assign_proc : process(ap_CS_fsm_state70, io_acc_block_signal_op189)
    begin
        if (((io_acc_block_signal_op189 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state70))) then 
            res_stream_V_data_14_V_write <= ap_const_logic_1;
        else 
            res_stream_V_data_14_V_write <= ap_const_logic_0;
        end if; 
    end process;


    res_stream_V_data_15_V_blk_n_assign_proc : process(res_stream_V_data_15_V_full_n, ap_CS_fsm_state70)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state70)) then 
            res_stream_V_data_15_V_blk_n <= res_stream_V_data_15_V_full_n;
        else 
            res_stream_V_data_15_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    res_stream_V_data_15_V_din <= tmp_data_15_V_reg_361;

    res_stream_V_data_15_V_write_assign_proc : process(ap_CS_fsm_state70, io_acc_block_signal_op189)
    begin
        if (((io_acc_block_signal_op189 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state70))) then 
            res_stream_V_data_15_V_write <= ap_const_logic_1;
        else 
            res_stream_V_data_15_V_write <= ap_const_logic_0;
        end if; 
    end process;


    res_stream_V_data_1_V_blk_n_assign_proc : process(res_stream_V_data_1_V_full_n, ap_CS_fsm_state70)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state70)) then 
            res_stream_V_data_1_V_blk_n <= res_stream_V_data_1_V_full_n;
        else 
            res_stream_V_data_1_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    res_stream_V_data_1_V_din <= tmp_data_1_V_reg_296;

    res_stream_V_data_1_V_write_assign_proc : process(ap_CS_fsm_state70, io_acc_block_signal_op189)
    begin
        if (((io_acc_block_signal_op189 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state70))) then 
            res_stream_V_data_1_V_write <= ap_const_logic_1;
        else 
            res_stream_V_data_1_V_write <= ap_const_logic_0;
        end if; 
    end process;


    res_stream_V_data_2_V_blk_n_assign_proc : process(res_stream_V_data_2_V_full_n, ap_CS_fsm_state70)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state70)) then 
            res_stream_V_data_2_V_blk_n <= res_stream_V_data_2_V_full_n;
        else 
            res_stream_V_data_2_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    res_stream_V_data_2_V_din <= tmp_data_2_V_reg_301;

    res_stream_V_data_2_V_write_assign_proc : process(ap_CS_fsm_state70, io_acc_block_signal_op189)
    begin
        if (((io_acc_block_signal_op189 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state70))) then 
            res_stream_V_data_2_V_write <= ap_const_logic_1;
        else 
            res_stream_V_data_2_V_write <= ap_const_logic_0;
        end if; 
    end process;


    res_stream_V_data_3_V_blk_n_assign_proc : process(res_stream_V_data_3_V_full_n, ap_CS_fsm_state70)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state70)) then 
            res_stream_V_data_3_V_blk_n <= res_stream_V_data_3_V_full_n;
        else 
            res_stream_V_data_3_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    res_stream_V_data_3_V_din <= tmp_data_3_V_reg_306;

    res_stream_V_data_3_V_write_assign_proc : process(ap_CS_fsm_state70, io_acc_block_signal_op189)
    begin
        if (((io_acc_block_signal_op189 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state70))) then 
            res_stream_V_data_3_V_write <= ap_const_logic_1;
        else 
            res_stream_V_data_3_V_write <= ap_const_logic_0;
        end if; 
    end process;


    res_stream_V_data_4_V_blk_n_assign_proc : process(res_stream_V_data_4_V_full_n, ap_CS_fsm_state70)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state70)) then 
            res_stream_V_data_4_V_blk_n <= res_stream_V_data_4_V_full_n;
        else 
            res_stream_V_data_4_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    res_stream_V_data_4_V_din <= tmp_data_4_V_reg_311;

    res_stream_V_data_4_V_write_assign_proc : process(ap_CS_fsm_state70, io_acc_block_signal_op189)
    begin
        if (((io_acc_block_signal_op189 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state70))) then 
            res_stream_V_data_4_V_write <= ap_const_logic_1;
        else 
            res_stream_V_data_4_V_write <= ap_const_logic_0;
        end if; 
    end process;


    res_stream_V_data_5_V_blk_n_assign_proc : process(res_stream_V_data_5_V_full_n, ap_CS_fsm_state70)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state70)) then 
            res_stream_V_data_5_V_blk_n <= res_stream_V_data_5_V_full_n;
        else 
            res_stream_V_data_5_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    res_stream_V_data_5_V_din <= tmp_data_5_V_reg_316;

    res_stream_V_data_5_V_write_assign_proc : process(ap_CS_fsm_state70, io_acc_block_signal_op189)
    begin
        if (((io_acc_block_signal_op189 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state70))) then 
            res_stream_V_data_5_V_write <= ap_const_logic_1;
        else 
            res_stream_V_data_5_V_write <= ap_const_logic_0;
        end if; 
    end process;


    res_stream_V_data_6_V_blk_n_assign_proc : process(res_stream_V_data_6_V_full_n, ap_CS_fsm_state70)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state70)) then 
            res_stream_V_data_6_V_blk_n <= res_stream_V_data_6_V_full_n;
        else 
            res_stream_V_data_6_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    res_stream_V_data_6_V_din <= ap_const_lv20_1FE;

    res_stream_V_data_6_V_write_assign_proc : process(ap_CS_fsm_state70, io_acc_block_signal_op189)
    begin
        if (((io_acc_block_signal_op189 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state70))) then 
            res_stream_V_data_6_V_write <= ap_const_logic_1;
        else 
            res_stream_V_data_6_V_write <= ap_const_logic_0;
        end if; 
    end process;


    res_stream_V_data_7_V_blk_n_assign_proc : process(res_stream_V_data_7_V_full_n, ap_CS_fsm_state70)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state70)) then 
            res_stream_V_data_7_V_blk_n <= res_stream_V_data_7_V_full_n;
        else 
            res_stream_V_data_7_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    res_stream_V_data_7_V_din <= tmp_data_7_V_reg_321;

    res_stream_V_data_7_V_write_assign_proc : process(ap_CS_fsm_state70, io_acc_block_signal_op189)
    begin
        if (((io_acc_block_signal_op189 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state70))) then 
            res_stream_V_data_7_V_write <= ap_const_logic_1;
        else 
            res_stream_V_data_7_V_write <= ap_const_logic_0;
        end if; 
    end process;


    res_stream_V_data_8_V_blk_n_assign_proc : process(res_stream_V_data_8_V_full_n, ap_CS_fsm_state70)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state70)) then 
            res_stream_V_data_8_V_blk_n <= res_stream_V_data_8_V_full_n;
        else 
            res_stream_V_data_8_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    res_stream_V_data_8_V_din <= tmp_data_8_V_reg_326;

    res_stream_V_data_8_V_write_assign_proc : process(ap_CS_fsm_state70, io_acc_block_signal_op189)
    begin
        if (((io_acc_block_signal_op189 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state70))) then 
            res_stream_V_data_8_V_write <= ap_const_logic_1;
        else 
            res_stream_V_data_8_V_write <= ap_const_logic_0;
        end if; 
    end process;


    res_stream_V_data_9_V_blk_n_assign_proc : process(res_stream_V_data_9_V_full_n, ap_CS_fsm_state70)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state70)) then 
            res_stream_V_data_9_V_blk_n <= res_stream_V_data_9_V_full_n;
        else 
            res_stream_V_data_9_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    res_stream_V_data_9_V_din <= tmp_data_9_V_reg_331;

    res_stream_V_data_9_V_write_assign_proc : process(ap_CS_fsm_state70, io_acc_block_signal_op189)
    begin
        if (((io_acc_block_signal_op189 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state70))) then 
            res_stream_V_data_9_V_write <= ap_const_logic_1;
        else 
            res_stream_V_data_9_V_write <= ap_const_logic_0;
        end if; 
    end process;

    start_out <= real_start;

    start_write_assign_proc : process(real_start, start_once_reg)
    begin
        if (((start_once_reg = ap_const_logic_0) and (real_start = ap_const_logic_1))) then 
            start_write <= ap_const_logic_1;
        else 
            start_write <= ap_const_logic_0;
        end if; 
    end process;

end behav;
