-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2019.2
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity dense_array_ap_fixed_8u_array_ap_fixed_20_8_5_3_0_8u_config18_s is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    start_full_n : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    start_out : OUT STD_LOGIC;
    start_write : OUT STD_LOGIC;
    data_stream_V_data_0_V_dout : IN STD_LOGIC_VECTOR (19 downto 0);
    data_stream_V_data_0_V_empty_n : IN STD_LOGIC;
    data_stream_V_data_0_V_read : OUT STD_LOGIC;
    data_stream_V_data_1_V_dout : IN STD_LOGIC_VECTOR (19 downto 0);
    data_stream_V_data_1_V_empty_n : IN STD_LOGIC;
    data_stream_V_data_1_V_read : OUT STD_LOGIC;
    data_stream_V_data_2_V_dout : IN STD_LOGIC_VECTOR (19 downto 0);
    data_stream_V_data_2_V_empty_n : IN STD_LOGIC;
    data_stream_V_data_2_V_read : OUT STD_LOGIC;
    data_stream_V_data_3_V_dout : IN STD_LOGIC_VECTOR (19 downto 0);
    data_stream_V_data_3_V_empty_n : IN STD_LOGIC;
    data_stream_V_data_3_V_read : OUT STD_LOGIC;
    data_stream_V_data_4_V_dout : IN STD_LOGIC_VECTOR (19 downto 0);
    data_stream_V_data_4_V_empty_n : IN STD_LOGIC;
    data_stream_V_data_4_V_read : OUT STD_LOGIC;
    data_stream_V_data_5_V_dout : IN STD_LOGIC_VECTOR (19 downto 0);
    data_stream_V_data_5_V_empty_n : IN STD_LOGIC;
    data_stream_V_data_5_V_read : OUT STD_LOGIC;
    data_stream_V_data_6_V_dout : IN STD_LOGIC_VECTOR (19 downto 0);
    data_stream_V_data_6_V_empty_n : IN STD_LOGIC;
    data_stream_V_data_6_V_read : OUT STD_LOGIC;
    data_stream_V_data_7_V_dout : IN STD_LOGIC_VECTOR (19 downto 0);
    data_stream_V_data_7_V_empty_n : IN STD_LOGIC;
    data_stream_V_data_7_V_read : OUT STD_LOGIC;
    res_stream_V_data_0_V_din : OUT STD_LOGIC_VECTOR (19 downto 0);
    res_stream_V_data_0_V_full_n : IN STD_LOGIC;
    res_stream_V_data_0_V_write : OUT STD_LOGIC;
    res_stream_V_data_1_V_din : OUT STD_LOGIC_VECTOR (19 downto 0);
    res_stream_V_data_1_V_full_n : IN STD_LOGIC;
    res_stream_V_data_1_V_write : OUT STD_LOGIC;
    res_stream_V_data_2_V_din : OUT STD_LOGIC_VECTOR (19 downto 0);
    res_stream_V_data_2_V_full_n : IN STD_LOGIC;
    res_stream_V_data_2_V_write : OUT STD_LOGIC;
    res_stream_V_data_3_V_din : OUT STD_LOGIC_VECTOR (19 downto 0);
    res_stream_V_data_3_V_full_n : IN STD_LOGIC;
    res_stream_V_data_3_V_write : OUT STD_LOGIC;
    res_stream_V_data_4_V_din : OUT STD_LOGIC_VECTOR (19 downto 0);
    res_stream_V_data_4_V_full_n : IN STD_LOGIC;
    res_stream_V_data_4_V_write : OUT STD_LOGIC;
    res_stream_V_data_5_V_din : OUT STD_LOGIC_VECTOR (19 downto 0);
    res_stream_V_data_5_V_full_n : IN STD_LOGIC;
    res_stream_V_data_5_V_write : OUT STD_LOGIC;
    res_stream_V_data_6_V_din : OUT STD_LOGIC_VECTOR (19 downto 0);
    res_stream_V_data_6_V_full_n : IN STD_LOGIC;
    res_stream_V_data_6_V_write : OUT STD_LOGIC;
    res_stream_V_data_7_V_din : OUT STD_LOGIC_VECTOR (19 downto 0);
    res_stream_V_data_7_V_full_n : IN STD_LOGIC;
    res_stream_V_data_7_V_write : OUT STD_LOGIC );
end;


architecture behav of dense_array_ap_fixed_8u_array_ap_fixed_20_8_5_3_0_8u_config18_s is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (64 downto 0) := "00000000000000000000000000000000000000000000000000000000000000001";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (64 downto 0) := "00000000000000000000000000000000000000000000000000000000000000010";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (64 downto 0) := "00000000000000000000000000000000000000000000000000000000000000100";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (64 downto 0) := "00000000000000000000000000000000000000000000000000000000000001000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (64 downto 0) := "00000000000000000000000000000000000000000000000000000000000010000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (64 downto 0) := "00000000000000000000000000000000000000000000000000000000000100000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (64 downto 0) := "00000000000000000000000000000000000000000000000000000000001000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (64 downto 0) := "00000000000000000000000000000000000000000000000000000000010000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (64 downto 0) := "00000000000000000000000000000000000000000000000000000000100000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (64 downto 0) := "00000000000000000000000000000000000000000000000000000001000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (64 downto 0) := "00000000000000000000000000000000000000000000000000000010000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (64 downto 0) := "00000000000000000000000000000000000000000000000000000100000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (64 downto 0) := "00000000000000000000000000000000000000000000000000001000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (64 downto 0) := "00000000000000000000000000000000000000000000000000010000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (64 downto 0) := "00000000000000000000000000000000000000000000000000100000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (64 downto 0) := "00000000000000000000000000000000000000000000000001000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (64 downto 0) := "00000000000000000000000000000000000000000000000010000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (64 downto 0) := "00000000000000000000000000000000000000000000000100000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (64 downto 0) := "00000000000000000000000000000000000000000000001000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (64 downto 0) := "00000000000000000000000000000000000000000000010000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (64 downto 0) := "00000000000000000000000000000000000000000000100000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (64 downto 0) := "00000000000000000000000000000000000000000001000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (64 downto 0) := "00000000000000000000000000000000000000000010000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (64 downto 0) := "00000000000000000000000000000000000000000100000000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (64 downto 0) := "00000000000000000000000000000000000000001000000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (64 downto 0) := "00000000000000000000000000000000000000010000000000000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (64 downto 0) := "00000000000000000000000000000000000000100000000000000000000000000";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (64 downto 0) := "00000000000000000000000000000000000001000000000000000000000000000";
    constant ap_ST_fsm_state30 : STD_LOGIC_VECTOR (64 downto 0) := "00000000000000000000000000000000000010000000000000000000000000000";
    constant ap_ST_fsm_state31 : STD_LOGIC_VECTOR (64 downto 0) := "00000000000000000000000000000000000100000000000000000000000000000";
    constant ap_ST_fsm_state32 : STD_LOGIC_VECTOR (64 downto 0) := "00000000000000000000000000000000001000000000000000000000000000000";
    constant ap_ST_fsm_state33 : STD_LOGIC_VECTOR (64 downto 0) := "00000000000000000000000000000000010000000000000000000000000000000";
    constant ap_ST_fsm_state34 : STD_LOGIC_VECTOR (64 downto 0) := "00000000000000000000000000000000100000000000000000000000000000000";
    constant ap_ST_fsm_state35 : STD_LOGIC_VECTOR (64 downto 0) := "00000000000000000000000000000001000000000000000000000000000000000";
    constant ap_ST_fsm_state36 : STD_LOGIC_VECTOR (64 downto 0) := "00000000000000000000000000000010000000000000000000000000000000000";
    constant ap_ST_fsm_state37 : STD_LOGIC_VECTOR (64 downto 0) := "00000000000000000000000000000100000000000000000000000000000000000";
    constant ap_ST_fsm_state38 : STD_LOGIC_VECTOR (64 downto 0) := "00000000000000000000000000001000000000000000000000000000000000000";
    constant ap_ST_fsm_state39 : STD_LOGIC_VECTOR (64 downto 0) := "00000000000000000000000000010000000000000000000000000000000000000";
    constant ap_ST_fsm_state40 : STD_LOGIC_VECTOR (64 downto 0) := "00000000000000000000000000100000000000000000000000000000000000000";
    constant ap_ST_fsm_state41 : STD_LOGIC_VECTOR (64 downto 0) := "00000000000000000000000001000000000000000000000000000000000000000";
    constant ap_ST_fsm_state42 : STD_LOGIC_VECTOR (64 downto 0) := "00000000000000000000000010000000000000000000000000000000000000000";
    constant ap_ST_fsm_state43 : STD_LOGIC_VECTOR (64 downto 0) := "00000000000000000000000100000000000000000000000000000000000000000";
    constant ap_ST_fsm_state44 : STD_LOGIC_VECTOR (64 downto 0) := "00000000000000000000001000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state45 : STD_LOGIC_VECTOR (64 downto 0) := "00000000000000000000010000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state46 : STD_LOGIC_VECTOR (64 downto 0) := "00000000000000000000100000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state47 : STD_LOGIC_VECTOR (64 downto 0) := "00000000000000000001000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state48 : STD_LOGIC_VECTOR (64 downto 0) := "00000000000000000010000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state49 : STD_LOGIC_VECTOR (64 downto 0) := "00000000000000000100000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state50 : STD_LOGIC_VECTOR (64 downto 0) := "00000000000000001000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state51 : STD_LOGIC_VECTOR (64 downto 0) := "00000000000000010000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state52 : STD_LOGIC_VECTOR (64 downto 0) := "00000000000000100000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state53 : STD_LOGIC_VECTOR (64 downto 0) := "00000000000001000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state54 : STD_LOGIC_VECTOR (64 downto 0) := "00000000000010000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state55 : STD_LOGIC_VECTOR (64 downto 0) := "00000000000100000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state56 : STD_LOGIC_VECTOR (64 downto 0) := "00000000001000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state57 : STD_LOGIC_VECTOR (64 downto 0) := "00000000010000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state58 : STD_LOGIC_VECTOR (64 downto 0) := "00000000100000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state59 : STD_LOGIC_VECTOR (64 downto 0) := "00000001000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state60 : STD_LOGIC_VECTOR (64 downto 0) := "00000010000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state61 : STD_LOGIC_VECTOR (64 downto 0) := "00000100000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state62 : STD_LOGIC_VECTOR (64 downto 0) := "00001000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state63 : STD_LOGIC_VECTOR (64 downto 0) := "00010000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state64 : STD_LOGIC_VECTOR (64 downto 0) := "00100000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state65 : STD_LOGIC_VECTOR (64 downto 0) := "01000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state66 : STD_LOGIC_VECTOR (64 downto 0) := "10000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_40 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv4_2 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_const_lv4_3 : STD_LOGIC_VECTOR (3 downto 0) := "0011";
    constant ap_const_lv4_4 : STD_LOGIC_VECTOR (3 downto 0) := "0100";
    constant ap_const_lv4_5 : STD_LOGIC_VECTOR (3 downto 0) := "0101";
    constant ap_const_lv4_6 : STD_LOGIC_VECTOR (3 downto 0) := "0110";
    constant ap_const_lv4_7 : STD_LOGIC_VECTOR (3 downto 0) := "0111";
    constant ap_const_lv4_9 : STD_LOGIC_VECTOR (3 downto 0) := "1001";

    signal real_start : STD_LOGIC;
    signal start_once_reg : STD_LOGIC := '0';
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (64 downto 0) := "00000000000000000000000000000000000000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal internal_ap_ready : STD_LOGIC;
    signal data_stream_V_data_0_V_blk_n : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal data_stream_V_data_1_V_blk_n : STD_LOGIC;
    signal data_stream_V_data_2_V_blk_n : STD_LOGIC;
    signal data_stream_V_data_3_V_blk_n : STD_LOGIC;
    signal data_stream_V_data_4_V_blk_n : STD_LOGIC;
    signal data_stream_V_data_5_V_blk_n : STD_LOGIC;
    signal data_stream_V_data_6_V_blk_n : STD_LOGIC;
    signal data_stream_V_data_7_V_blk_n : STD_LOGIC;
    signal res_stream_V_data_0_V_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state66 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state66 : signal is "none";
    signal res_stream_V_data_1_V_blk_n : STD_LOGIC;
    signal res_stream_V_data_2_V_blk_n : STD_LOGIC;
    signal res_stream_V_data_3_V_blk_n : STD_LOGIC;
    signal res_stream_V_data_4_V_blk_n : STD_LOGIC;
    signal res_stream_V_data_5_V_blk_n : STD_LOGIC;
    signal res_stream_V_data_6_V_blk_n : STD_LOGIC;
    signal res_stream_V_data_7_V_blk_n : STD_LOGIC;
    signal i_in_0_reg_428 : STD_LOGIC_VECTOR (3 downto 0);
    signal icmp_ln36_fu_516_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln36_reg_1672 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state2_pp0_stage0_iter0 : BOOLEAN;
    signal io_acc_block_signal_op237 : STD_LOGIC;
    signal ap_block_state3_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal i_in_fu_522_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal i_in_reg_1676 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal tmp_data_0_V_reg_2026 : STD_LOGIC_VECTOR (19 downto 0);
    signal ap_CS_fsm_state65 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state65 : signal is "none";
    signal tmp_data_1_V_reg_2031 : STD_LOGIC_VECTOR (19 downto 0);
    signal tmp_data_2_V_reg_2036 : STD_LOGIC_VECTOR (19 downto 0);
    signal tmp_data_3_V_reg_2041 : STD_LOGIC_VECTOR (19 downto 0);
    signal tmp_data_4_V_reg_2046 : STD_LOGIC_VECTOR (19 downto 0);
    signal tmp_data_5_V_reg_2051 : STD_LOGIC_VECTOR (19 downto 0);
    signal tmp_data_6_V_reg_2056 : STD_LOGIC_VECTOR (19 downto 0);
    signal tmp_data_7_V_reg_2061 : STD_LOGIC_VECTOR (19 downto 0);
    signal ap_block_state1 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state2 : STD_LOGIC;
    signal grp_dense_wrapper_ap_fixed_20_8_5_3_0_ap_fixed_20_8_5_3_0_config18_s_fu_440_ap_start : STD_LOGIC;
    signal grp_dense_wrapper_ap_fixed_20_8_5_3_0_ap_fixed_20_8_5_3_0_config18_s_fu_440_ap_done : STD_LOGIC;
    signal grp_dense_wrapper_ap_fixed_20_8_5_3_0_ap_fixed_20_8_5_3_0_config18_s_fu_440_ap_idle : STD_LOGIC;
    signal grp_dense_wrapper_ap_fixed_20_8_5_3_0_ap_fixed_20_8_5_3_0_config18_s_fu_440_ap_ready : STD_LOGIC;
    signal grp_dense_wrapper_ap_fixed_20_8_5_3_0_ap_fixed_20_8_5_3_0_config18_s_fu_440_ap_return_0 : STD_LOGIC_VECTOR (19 downto 0);
    signal grp_dense_wrapper_ap_fixed_20_8_5_3_0_ap_fixed_20_8_5_3_0_config18_s_fu_440_ap_return_1 : STD_LOGIC_VECTOR (19 downto 0);
    signal grp_dense_wrapper_ap_fixed_20_8_5_3_0_ap_fixed_20_8_5_3_0_config18_s_fu_440_ap_return_2 : STD_LOGIC_VECTOR (19 downto 0);
    signal grp_dense_wrapper_ap_fixed_20_8_5_3_0_ap_fixed_20_8_5_3_0_config18_s_fu_440_ap_return_3 : STD_LOGIC_VECTOR (19 downto 0);
    signal grp_dense_wrapper_ap_fixed_20_8_5_3_0_ap_fixed_20_8_5_3_0_config18_s_fu_440_ap_return_4 : STD_LOGIC_VECTOR (19 downto 0);
    signal grp_dense_wrapper_ap_fixed_20_8_5_3_0_ap_fixed_20_8_5_3_0_config18_s_fu_440_ap_return_5 : STD_LOGIC_VECTOR (19 downto 0);
    signal grp_dense_wrapper_ap_fixed_20_8_5_3_0_ap_fixed_20_8_5_3_0_config18_s_fu_440_ap_return_6 : STD_LOGIC_VECTOR (19 downto 0);
    signal grp_dense_wrapper_ap_fixed_20_8_5_3_0_ap_fixed_20_8_5_3_0_config18_s_fu_440_ap_return_7 : STD_LOGIC_VECTOR (19 downto 0);
    signal ap_phi_mux_i_in_0_phi_fu_432_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_dense_wrapper_ap_fixed_20_8_5_3_0_ap_fixed_20_8_5_3_0_config18_s_fu_440_ap_start_reg : STD_LOGIC := '0';
    signal ap_NS_fsm : STD_LOGIC_VECTOR (64 downto 0);
    signal ap_NS_fsm_state4 : STD_LOGIC;
    signal data_64_V_fu_92 : STD_LOGIC_VECTOR (19 downto 0);
    signal data_65_V_fu_96 : STD_LOGIC_VECTOR (19 downto 0);
    signal data_66_V_fu_100 : STD_LOGIC_VECTOR (19 downto 0);
    signal data_67_V_fu_104 : STD_LOGIC_VECTOR (19 downto 0);
    signal data_68_V_fu_108 : STD_LOGIC_VECTOR (19 downto 0);
    signal data_69_V_fu_112 : STD_LOGIC_VECTOR (19 downto 0);
    signal data_70_V_fu_116 : STD_LOGIC_VECTOR (19 downto 0);
    signal data_71_V_fu_120 : STD_LOGIC_VECTOR (19 downto 0);
    signal data_64_V_1_fu_124 : STD_LOGIC_VECTOR (19 downto 0);
    signal data_65_V_1_fu_128 : STD_LOGIC_VECTOR (19 downto 0);
    signal data_66_V_1_fu_132 : STD_LOGIC_VECTOR (19 downto 0);
    signal data_67_V_1_fu_136 : STD_LOGIC_VECTOR (19 downto 0);
    signal data_68_V_1_fu_140 : STD_LOGIC_VECTOR (19 downto 0);
    signal data_69_V_1_fu_144 : STD_LOGIC_VECTOR (19 downto 0);
    signal data_70_V_1_fu_148 : STD_LOGIC_VECTOR (19 downto 0);
    signal data_71_V_1_fu_152 : STD_LOGIC_VECTOR (19 downto 0);
    signal data_64_V_2_fu_156 : STD_LOGIC_VECTOR (19 downto 0);
    signal data_65_V_2_fu_160 : STD_LOGIC_VECTOR (19 downto 0);
    signal data_66_V_2_fu_164 : STD_LOGIC_VECTOR (19 downto 0);
    signal data_67_V_2_fu_168 : STD_LOGIC_VECTOR (19 downto 0);
    signal data_68_V_2_fu_172 : STD_LOGIC_VECTOR (19 downto 0);
    signal data_69_V_2_fu_176 : STD_LOGIC_VECTOR (19 downto 0);
    signal data_70_V_2_fu_180 : STD_LOGIC_VECTOR (19 downto 0);
    signal data_71_V_2_fu_184 : STD_LOGIC_VECTOR (19 downto 0);
    signal data_64_V_3_fu_188 : STD_LOGIC_VECTOR (19 downto 0);
    signal data_65_V_3_fu_192 : STD_LOGIC_VECTOR (19 downto 0);
    signal data_66_V_3_fu_196 : STD_LOGIC_VECTOR (19 downto 0);
    signal data_67_V_3_fu_200 : STD_LOGIC_VECTOR (19 downto 0);
    signal data_68_V_3_fu_204 : STD_LOGIC_VECTOR (19 downto 0);
    signal data_69_V_3_fu_208 : STD_LOGIC_VECTOR (19 downto 0);
    signal data_70_V_3_fu_212 : STD_LOGIC_VECTOR (19 downto 0);
    signal data_71_V_3_fu_216 : STD_LOGIC_VECTOR (19 downto 0);
    signal data_64_V_4_fu_220 : STD_LOGIC_VECTOR (19 downto 0);
    signal data_65_V_4_fu_224 : STD_LOGIC_VECTOR (19 downto 0);
    signal data_66_V_4_fu_228 : STD_LOGIC_VECTOR (19 downto 0);
    signal data_67_V_4_fu_232 : STD_LOGIC_VECTOR (19 downto 0);
    signal data_68_V_4_fu_236 : STD_LOGIC_VECTOR (19 downto 0);
    signal data_69_V_4_fu_240 : STD_LOGIC_VECTOR (19 downto 0);
    signal data_70_V_4_fu_244 : STD_LOGIC_VECTOR (19 downto 0);
    signal data_71_V_4_fu_248 : STD_LOGIC_VECTOR (19 downto 0);
    signal data_64_V_5_fu_252 : STD_LOGIC_VECTOR (19 downto 0);
    signal data_65_V_5_fu_256 : STD_LOGIC_VECTOR (19 downto 0);
    signal data_66_V_5_fu_260 : STD_LOGIC_VECTOR (19 downto 0);
    signal data_67_V_5_fu_264 : STD_LOGIC_VECTOR (19 downto 0);
    signal data_68_V_5_fu_268 : STD_LOGIC_VECTOR (19 downto 0);
    signal data_69_V_5_fu_272 : STD_LOGIC_VECTOR (19 downto 0);
    signal data_70_V_5_fu_276 : STD_LOGIC_VECTOR (19 downto 0);
    signal data_71_V_5_fu_280 : STD_LOGIC_VECTOR (19 downto 0);
    signal data_64_V_6_fu_284 : STD_LOGIC_VECTOR (19 downto 0);
    signal data_65_V_6_fu_288 : STD_LOGIC_VECTOR (19 downto 0);
    signal data_66_V_6_fu_292 : STD_LOGIC_VECTOR (19 downto 0);
    signal data_67_V_6_fu_296 : STD_LOGIC_VECTOR (19 downto 0);
    signal data_68_V_6_fu_300 : STD_LOGIC_VECTOR (19 downto 0);
    signal data_69_V_6_fu_304 : STD_LOGIC_VECTOR (19 downto 0);
    signal data_70_V_6_fu_308 : STD_LOGIC_VECTOR (19 downto 0);
    signal data_71_V_6_fu_312 : STD_LOGIC_VECTOR (19 downto 0);
    signal data_64_V_7_fu_316 : STD_LOGIC_VECTOR (19 downto 0);
    signal data_65_V_7_fu_320 : STD_LOGIC_VECTOR (19 downto 0);
    signal data_66_V_7_fu_324 : STD_LOGIC_VECTOR (19 downto 0);
    signal data_67_V_7_fu_328 : STD_LOGIC_VECTOR (19 downto 0);
    signal data_68_V_7_fu_332 : STD_LOGIC_VECTOR (19 downto 0);
    signal data_69_V_7_fu_336 : STD_LOGIC_VECTOR (19 downto 0);
    signal data_70_V_7_fu_340 : STD_LOGIC_VECTOR (19 downto 0);
    signal data_71_V_7_fu_344 : STD_LOGIC_VECTOR (19 downto 0);
    signal data_64_V_8_fu_348 : STD_LOGIC_VECTOR (19 downto 0);
    signal data_65_V_8_fu_352 : STD_LOGIC_VECTOR (19 downto 0);
    signal data_66_V_8_fu_356 : STD_LOGIC_VECTOR (19 downto 0);
    signal data_67_V_8_fu_360 : STD_LOGIC_VECTOR (19 downto 0);
    signal data_68_V_8_fu_364 : STD_LOGIC_VECTOR (19 downto 0);
    signal data_69_V_8_fu_368 : STD_LOGIC_VECTOR (19 downto 0);
    signal data_70_V_8_fu_372 : STD_LOGIC_VECTOR (19 downto 0);
    signal data_71_V_8_fu_376 : STD_LOGIC_VECTOR (19 downto 0);
    signal io_acc_block_signal_op470 : STD_LOGIC;
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;

    component dense_wrapper_ap_fixed_20_8_5_3_0_ap_fixed_20_8_5_3_0_config18_s IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        data_0_V_read : IN STD_LOGIC_VECTOR (19 downto 0);
        data_1_V_read : IN STD_LOGIC_VECTOR (19 downto 0);
        data_2_V_read : IN STD_LOGIC_VECTOR (19 downto 0);
        data_3_V_read : IN STD_LOGIC_VECTOR (19 downto 0);
        data_4_V_read : IN STD_LOGIC_VECTOR (19 downto 0);
        data_5_V_read : IN STD_LOGIC_VECTOR (19 downto 0);
        data_6_V_read : IN STD_LOGIC_VECTOR (19 downto 0);
        data_7_V_read : IN STD_LOGIC_VECTOR (19 downto 0);
        data_8_V_read : IN STD_LOGIC_VECTOR (19 downto 0);
        data_9_V_read : IN STD_LOGIC_VECTOR (19 downto 0);
        data_10_V_read : IN STD_LOGIC_VECTOR (19 downto 0);
        data_11_V_read : IN STD_LOGIC_VECTOR (19 downto 0);
        data_12_V_read : IN STD_LOGIC_VECTOR (19 downto 0);
        data_13_V_read : IN STD_LOGIC_VECTOR (19 downto 0);
        data_14_V_read : IN STD_LOGIC_VECTOR (19 downto 0);
        data_15_V_read : IN STD_LOGIC_VECTOR (19 downto 0);
        data_16_V_read : IN STD_LOGIC_VECTOR (19 downto 0);
        data_17_V_read : IN STD_LOGIC_VECTOR (19 downto 0);
        data_18_V_read : IN STD_LOGIC_VECTOR (19 downto 0);
        data_19_V_read : IN STD_LOGIC_VECTOR (19 downto 0);
        data_20_V_read : IN STD_LOGIC_VECTOR (19 downto 0);
        data_21_V_read : IN STD_LOGIC_VECTOR (19 downto 0);
        data_22_V_read : IN STD_LOGIC_VECTOR (19 downto 0);
        data_23_V_read : IN STD_LOGIC_VECTOR (19 downto 0);
        data_24_V_read : IN STD_LOGIC_VECTOR (19 downto 0);
        data_25_V_read : IN STD_LOGIC_VECTOR (19 downto 0);
        data_26_V_read : IN STD_LOGIC_VECTOR (19 downto 0);
        data_27_V_read : IN STD_LOGIC_VECTOR (19 downto 0);
        data_28_V_read : IN STD_LOGIC_VECTOR (19 downto 0);
        data_29_V_read : IN STD_LOGIC_VECTOR (19 downto 0);
        data_30_V_read : IN STD_LOGIC_VECTOR (19 downto 0);
        data_31_V_read : IN STD_LOGIC_VECTOR (19 downto 0);
        data_32_V_read : IN STD_LOGIC_VECTOR (19 downto 0);
        data_33_V_read : IN STD_LOGIC_VECTOR (19 downto 0);
        data_34_V_read : IN STD_LOGIC_VECTOR (19 downto 0);
        data_35_V_read : IN STD_LOGIC_VECTOR (19 downto 0);
        data_36_V_read : IN STD_LOGIC_VECTOR (19 downto 0);
        data_37_V_read : IN STD_LOGIC_VECTOR (19 downto 0);
        data_38_V_read : IN STD_LOGIC_VECTOR (19 downto 0);
        data_39_V_read : IN STD_LOGIC_VECTOR (19 downto 0);
        data_40_V_read : IN STD_LOGIC_VECTOR (19 downto 0);
        data_41_V_read : IN STD_LOGIC_VECTOR (19 downto 0);
        data_42_V_read : IN STD_LOGIC_VECTOR (19 downto 0);
        data_43_V_read : IN STD_LOGIC_VECTOR (19 downto 0);
        data_44_V_read : IN STD_LOGIC_VECTOR (19 downto 0);
        data_45_V_read : IN STD_LOGIC_VECTOR (19 downto 0);
        data_46_V_read : IN STD_LOGIC_VECTOR (19 downto 0);
        data_47_V_read : IN STD_LOGIC_VECTOR (19 downto 0);
        data_48_V_read : IN STD_LOGIC_VECTOR (19 downto 0);
        data_49_V_read : IN STD_LOGIC_VECTOR (19 downto 0);
        data_50_V_read : IN STD_LOGIC_VECTOR (19 downto 0);
        data_51_V_read : IN STD_LOGIC_VECTOR (19 downto 0);
        data_52_V_read : IN STD_LOGIC_VECTOR (19 downto 0);
        data_53_V_read : IN STD_LOGIC_VECTOR (19 downto 0);
        data_54_V_read : IN STD_LOGIC_VECTOR (19 downto 0);
        data_55_V_read : IN STD_LOGIC_VECTOR (19 downto 0);
        data_56_V_read : IN STD_LOGIC_VECTOR (19 downto 0);
        data_57_V_read : IN STD_LOGIC_VECTOR (19 downto 0);
        data_58_V_read : IN STD_LOGIC_VECTOR (19 downto 0);
        data_59_V_read : IN STD_LOGIC_VECTOR (19 downto 0);
        data_60_V_read : IN STD_LOGIC_VECTOR (19 downto 0);
        data_61_V_read : IN STD_LOGIC_VECTOR (19 downto 0);
        data_62_V_read : IN STD_LOGIC_VECTOR (19 downto 0);
        data_63_V_read : IN STD_LOGIC_VECTOR (19 downto 0);
        data_64_V_read : IN STD_LOGIC_VECTOR (19 downto 0);
        data_65_V_read : IN STD_LOGIC_VECTOR (19 downto 0);
        data_66_V_read : IN STD_LOGIC_VECTOR (19 downto 0);
        data_67_V_read : IN STD_LOGIC_VECTOR (19 downto 0);
        data_68_V_read : IN STD_LOGIC_VECTOR (19 downto 0);
        data_69_V_read : IN STD_LOGIC_VECTOR (19 downto 0);
        data_70_V_read : IN STD_LOGIC_VECTOR (19 downto 0);
        data_71_V_read : IN STD_LOGIC_VECTOR (19 downto 0);
        ap_return_0 : OUT STD_LOGIC_VECTOR (19 downto 0);
        ap_return_1 : OUT STD_LOGIC_VECTOR (19 downto 0);
        ap_return_2 : OUT STD_LOGIC_VECTOR (19 downto 0);
        ap_return_3 : OUT STD_LOGIC_VECTOR (19 downto 0);
        ap_return_4 : OUT STD_LOGIC_VECTOR (19 downto 0);
        ap_return_5 : OUT STD_LOGIC_VECTOR (19 downto 0);
        ap_return_6 : OUT STD_LOGIC_VECTOR (19 downto 0);
        ap_return_7 : OUT STD_LOGIC_VECTOR (19 downto 0) );
    end component;



begin
    grp_dense_wrapper_ap_fixed_20_8_5_3_0_ap_fixed_20_8_5_3_0_config18_s_fu_440 : component dense_wrapper_ap_fixed_20_8_5_3_0_ap_fixed_20_8_5_3_0_config18_s
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_dense_wrapper_ap_fixed_20_8_5_3_0_ap_fixed_20_8_5_3_0_config18_s_fu_440_ap_start,
        ap_done => grp_dense_wrapper_ap_fixed_20_8_5_3_0_ap_fixed_20_8_5_3_0_config18_s_fu_440_ap_done,
        ap_idle => grp_dense_wrapper_ap_fixed_20_8_5_3_0_ap_fixed_20_8_5_3_0_config18_s_fu_440_ap_idle,
        ap_ready => grp_dense_wrapper_ap_fixed_20_8_5_3_0_ap_fixed_20_8_5_3_0_config18_s_fu_440_ap_ready,
        data_0_V_read => data_64_V_fu_92,
        data_1_V_read => data_65_V_fu_96,
        data_2_V_read => data_66_V_fu_100,
        data_3_V_read => data_67_V_fu_104,
        data_4_V_read => data_68_V_fu_108,
        data_5_V_read => data_69_V_fu_112,
        data_6_V_read => data_70_V_fu_116,
        data_7_V_read => data_71_V_fu_120,
        data_8_V_read => data_64_V_1_fu_124,
        data_9_V_read => data_65_V_1_fu_128,
        data_10_V_read => data_66_V_1_fu_132,
        data_11_V_read => data_67_V_1_fu_136,
        data_12_V_read => data_68_V_1_fu_140,
        data_13_V_read => data_69_V_1_fu_144,
        data_14_V_read => data_70_V_1_fu_148,
        data_15_V_read => data_71_V_1_fu_152,
        data_16_V_read => data_64_V_2_fu_156,
        data_17_V_read => data_65_V_2_fu_160,
        data_18_V_read => data_66_V_2_fu_164,
        data_19_V_read => data_67_V_2_fu_168,
        data_20_V_read => data_68_V_2_fu_172,
        data_21_V_read => data_69_V_2_fu_176,
        data_22_V_read => data_70_V_2_fu_180,
        data_23_V_read => data_71_V_2_fu_184,
        data_24_V_read => data_64_V_3_fu_188,
        data_25_V_read => data_65_V_3_fu_192,
        data_26_V_read => data_66_V_3_fu_196,
        data_27_V_read => data_67_V_3_fu_200,
        data_28_V_read => data_68_V_3_fu_204,
        data_29_V_read => data_69_V_3_fu_208,
        data_30_V_read => data_70_V_3_fu_212,
        data_31_V_read => data_71_V_3_fu_216,
        data_32_V_read => data_64_V_4_fu_220,
        data_33_V_read => data_65_V_4_fu_224,
        data_34_V_read => data_66_V_4_fu_228,
        data_35_V_read => data_67_V_4_fu_232,
        data_36_V_read => data_68_V_4_fu_236,
        data_37_V_read => data_69_V_4_fu_240,
        data_38_V_read => data_70_V_4_fu_244,
        data_39_V_read => data_71_V_4_fu_248,
        data_40_V_read => data_64_V_5_fu_252,
        data_41_V_read => data_65_V_5_fu_256,
        data_42_V_read => data_66_V_5_fu_260,
        data_43_V_read => data_67_V_5_fu_264,
        data_44_V_read => data_68_V_5_fu_268,
        data_45_V_read => data_69_V_5_fu_272,
        data_46_V_read => data_70_V_5_fu_276,
        data_47_V_read => data_71_V_5_fu_280,
        data_48_V_read => data_64_V_6_fu_284,
        data_49_V_read => data_65_V_6_fu_288,
        data_50_V_read => data_66_V_6_fu_292,
        data_51_V_read => data_67_V_6_fu_296,
        data_52_V_read => data_68_V_6_fu_300,
        data_53_V_read => data_69_V_6_fu_304,
        data_54_V_read => data_70_V_6_fu_308,
        data_55_V_read => data_71_V_6_fu_312,
        data_56_V_read => data_64_V_7_fu_316,
        data_57_V_read => data_65_V_7_fu_320,
        data_58_V_read => data_66_V_7_fu_324,
        data_59_V_read => data_67_V_7_fu_328,
        data_60_V_read => data_68_V_7_fu_332,
        data_61_V_read => data_69_V_7_fu_336,
        data_62_V_read => data_70_V_7_fu_340,
        data_63_V_read => data_71_V_7_fu_344,
        data_64_V_read => data_64_V_8_fu_348,
        data_65_V_read => data_65_V_8_fu_352,
        data_66_V_read => data_66_V_8_fu_356,
        data_67_V_read => data_67_V_8_fu_360,
        data_68_V_read => data_68_V_8_fu_364,
        data_69_V_read => data_69_V_8_fu_368,
        data_70_V_read => data_70_V_8_fu_372,
        data_71_V_read => data_71_V_8_fu_376,
        ap_return_0 => grp_dense_wrapper_ap_fixed_20_8_5_3_0_ap_fixed_20_8_5_3_0_config18_s_fu_440_ap_return_0,
        ap_return_1 => grp_dense_wrapper_ap_fixed_20_8_5_3_0_ap_fixed_20_8_5_3_0_config18_s_fu_440_ap_return_1,
        ap_return_2 => grp_dense_wrapper_ap_fixed_20_8_5_3_0_ap_fixed_20_8_5_3_0_config18_s_fu_440_ap_return_2,
        ap_return_3 => grp_dense_wrapper_ap_fixed_20_8_5_3_0_ap_fixed_20_8_5_3_0_config18_s_fu_440_ap_return_3,
        ap_return_4 => grp_dense_wrapper_ap_fixed_20_8_5_3_0_ap_fixed_20_8_5_3_0_config18_s_fu_440_ap_return_4,
        ap_return_5 => grp_dense_wrapper_ap_fixed_20_8_5_3_0_ap_fixed_20_8_5_3_0_config18_s_fu_440_ap_return_5,
        ap_return_6 => grp_dense_wrapper_ap_fixed_20_8_5_3_0_ap_fixed_20_8_5_3_0_config18_s_fu_440_ap_return_6,
        ap_return_7 => grp_dense_wrapper_ap_fixed_20_8_5_3_0_ap_fixed_20_8_5_3_0_config18_s_fu_440_ap_return_7);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((io_acc_block_signal_op470 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state66))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif ((not(((ap_done_reg = ap_const_logic_1) or (real_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2))) then 
                    ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state2);
                elsif ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                elsif ((not(((ap_done_reg = ap_const_logic_1) or (real_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_dense_wrapper_ap_fixed_20_8_5_3_0_ap_fixed_20_8_5_3_0_config18_s_fu_440_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_dense_wrapper_ap_fixed_20_8_5_3_0_ap_fixed_20_8_5_3_0_config18_s_fu_440_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_NS_fsm_state4) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
                    grp_dense_wrapper_ap_fixed_20_8_5_3_0_ap_fixed_20_8_5_3_0_config18_s_fu_440_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_dense_wrapper_ap_fixed_20_8_5_3_0_ap_fixed_20_8_5_3_0_config18_s_fu_440_ap_ready = ap_const_logic_1)) then 
                    grp_dense_wrapper_ap_fixed_20_8_5_3_0_ap_fixed_20_8_5_3_0_config18_s_fu_440_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    start_once_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                start_once_reg <= ap_const_logic_0;
            else
                if (((internal_ap_ready = ap_const_logic_0) and (real_start = ap_const_logic_1))) then 
                    start_once_reg <= ap_const_logic_1;
                elsif ((internal_ap_ready = ap_const_logic_1)) then 
                    start_once_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    i_in_0_reg_428_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln36_reg_1672 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                i_in_0_reg_428 <= i_in_reg_1676;
            elsif ((not(((ap_done_reg = ap_const_logic_1) or (real_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                i_in_0_reg_428 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (i_in_0_reg_428 = ap_const_lv4_1))) then
                data_64_V_1_fu_124 <= data_stream_V_data_0_V_dout;
                data_65_V_1_fu_128 <= data_stream_V_data_1_V_dout;
                data_66_V_1_fu_132 <= data_stream_V_data_2_V_dout;
                data_67_V_1_fu_136 <= data_stream_V_data_3_V_dout;
                data_68_V_1_fu_140 <= data_stream_V_data_4_V_dout;
                data_69_V_1_fu_144 <= data_stream_V_data_5_V_dout;
                data_70_V_1_fu_148 <= data_stream_V_data_6_V_dout;
                data_71_V_1_fu_152 <= data_stream_V_data_7_V_dout;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (i_in_0_reg_428 = ap_const_lv4_2))) then
                data_64_V_2_fu_156 <= data_stream_V_data_0_V_dout;
                data_65_V_2_fu_160 <= data_stream_V_data_1_V_dout;
                data_66_V_2_fu_164 <= data_stream_V_data_2_V_dout;
                data_67_V_2_fu_168 <= data_stream_V_data_3_V_dout;
                data_68_V_2_fu_172 <= data_stream_V_data_4_V_dout;
                data_69_V_2_fu_176 <= data_stream_V_data_5_V_dout;
                data_70_V_2_fu_180 <= data_stream_V_data_6_V_dout;
                data_71_V_2_fu_184 <= data_stream_V_data_7_V_dout;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (i_in_0_reg_428 = ap_const_lv4_3))) then
                data_64_V_3_fu_188 <= data_stream_V_data_0_V_dout;
                data_65_V_3_fu_192 <= data_stream_V_data_1_V_dout;
                data_66_V_3_fu_196 <= data_stream_V_data_2_V_dout;
                data_67_V_3_fu_200 <= data_stream_V_data_3_V_dout;
                data_68_V_3_fu_204 <= data_stream_V_data_4_V_dout;
                data_69_V_3_fu_208 <= data_stream_V_data_5_V_dout;
                data_70_V_3_fu_212 <= data_stream_V_data_6_V_dout;
                data_71_V_3_fu_216 <= data_stream_V_data_7_V_dout;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (i_in_0_reg_428 = ap_const_lv4_4))) then
                data_64_V_4_fu_220 <= data_stream_V_data_0_V_dout;
                data_65_V_4_fu_224 <= data_stream_V_data_1_V_dout;
                data_66_V_4_fu_228 <= data_stream_V_data_2_V_dout;
                data_67_V_4_fu_232 <= data_stream_V_data_3_V_dout;
                data_68_V_4_fu_236 <= data_stream_V_data_4_V_dout;
                data_69_V_4_fu_240 <= data_stream_V_data_5_V_dout;
                data_70_V_4_fu_244 <= data_stream_V_data_6_V_dout;
                data_71_V_4_fu_248 <= data_stream_V_data_7_V_dout;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (i_in_0_reg_428 = ap_const_lv4_5))) then
                data_64_V_5_fu_252 <= data_stream_V_data_0_V_dout;
                data_65_V_5_fu_256 <= data_stream_V_data_1_V_dout;
                data_66_V_5_fu_260 <= data_stream_V_data_2_V_dout;
                data_67_V_5_fu_264 <= data_stream_V_data_3_V_dout;
                data_68_V_5_fu_268 <= data_stream_V_data_4_V_dout;
                data_69_V_5_fu_272 <= data_stream_V_data_5_V_dout;
                data_70_V_5_fu_276 <= data_stream_V_data_6_V_dout;
                data_71_V_5_fu_280 <= data_stream_V_data_7_V_dout;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (i_in_0_reg_428 = ap_const_lv4_6))) then
                data_64_V_6_fu_284 <= data_stream_V_data_0_V_dout;
                data_65_V_6_fu_288 <= data_stream_V_data_1_V_dout;
                data_66_V_6_fu_292 <= data_stream_V_data_2_V_dout;
                data_67_V_6_fu_296 <= data_stream_V_data_3_V_dout;
                data_68_V_6_fu_300 <= data_stream_V_data_4_V_dout;
                data_69_V_6_fu_304 <= data_stream_V_data_5_V_dout;
                data_70_V_6_fu_308 <= data_stream_V_data_6_V_dout;
                data_71_V_6_fu_312 <= data_stream_V_data_7_V_dout;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (i_in_0_reg_428 = ap_const_lv4_7))) then
                data_64_V_7_fu_316 <= data_stream_V_data_0_V_dout;
                data_65_V_7_fu_320 <= data_stream_V_data_1_V_dout;
                data_66_V_7_fu_324 <= data_stream_V_data_2_V_dout;
                data_67_V_7_fu_328 <= data_stream_V_data_3_V_dout;
                data_68_V_7_fu_332 <= data_stream_V_data_4_V_dout;
                data_69_V_7_fu_336 <= data_stream_V_data_5_V_dout;
                data_70_V_7_fu_340 <= data_stream_V_data_6_V_dout;
                data_71_V_7_fu_344 <= data_stream_V_data_7_V_dout;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not((i_in_0_reg_428 = ap_const_lv4_7)) and not((i_in_0_reg_428 = ap_const_lv4_6)) and not((i_in_0_reg_428 = ap_const_lv4_5)) and not((i_in_0_reg_428 = ap_const_lv4_4)) and not((i_in_0_reg_428 = ap_const_lv4_3)) and not((i_in_0_reg_428 = ap_const_lv4_2)) and not((i_in_0_reg_428 = ap_const_lv4_1)) and not((i_in_0_reg_428 = ap_const_lv4_0)) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                data_64_V_8_fu_348 <= data_stream_V_data_0_V_dout;
                data_65_V_8_fu_352 <= data_stream_V_data_1_V_dout;
                data_66_V_8_fu_356 <= data_stream_V_data_2_V_dout;
                data_67_V_8_fu_360 <= data_stream_V_data_3_V_dout;
                data_68_V_8_fu_364 <= data_stream_V_data_4_V_dout;
                data_69_V_8_fu_368 <= data_stream_V_data_5_V_dout;
                data_70_V_8_fu_372 <= data_stream_V_data_6_V_dout;
                data_71_V_8_fu_376 <= data_stream_V_data_7_V_dout;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (i_in_0_reg_428 = ap_const_lv4_0))) then
                data_64_V_fu_92 <= data_stream_V_data_0_V_dout;
                data_65_V_fu_96 <= data_stream_V_data_1_V_dout;
                data_66_V_fu_100 <= data_stream_V_data_2_V_dout;
                data_67_V_fu_104 <= data_stream_V_data_3_V_dout;
                data_68_V_fu_108 <= data_stream_V_data_4_V_dout;
                data_69_V_fu_112 <= data_stream_V_data_5_V_dout;
                data_70_V_fu_116 <= data_stream_V_data_6_V_dout;
                data_71_V_fu_120 <= data_stream_V_data_7_V_dout;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                i_in_reg_1676 <= i_in_fu_522_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                icmp_ln36_reg_1672 <= icmp_ln36_fu_516_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state65)) then
                tmp_data_0_V_reg_2026 <= grp_dense_wrapper_ap_fixed_20_8_5_3_0_ap_fixed_20_8_5_3_0_config18_s_fu_440_ap_return_0;
                tmp_data_1_V_reg_2031 <= grp_dense_wrapper_ap_fixed_20_8_5_3_0_ap_fixed_20_8_5_3_0_config18_s_fu_440_ap_return_1;
                tmp_data_2_V_reg_2036 <= grp_dense_wrapper_ap_fixed_20_8_5_3_0_ap_fixed_20_8_5_3_0_config18_s_fu_440_ap_return_2;
                tmp_data_3_V_reg_2041 <= grp_dense_wrapper_ap_fixed_20_8_5_3_0_ap_fixed_20_8_5_3_0_config18_s_fu_440_ap_return_3;
                tmp_data_4_V_reg_2046 <= grp_dense_wrapper_ap_fixed_20_8_5_3_0_ap_fixed_20_8_5_3_0_config18_s_fu_440_ap_return_4;
                tmp_data_5_V_reg_2051 <= grp_dense_wrapper_ap_fixed_20_8_5_3_0_ap_fixed_20_8_5_3_0_config18_s_fu_440_ap_return_5;
                tmp_data_6_V_reg_2056 <= grp_dense_wrapper_ap_fixed_20_8_5_3_0_ap_fixed_20_8_5_3_0_config18_s_fu_440_ap_return_6;
                tmp_data_7_V_reg_2061 <= grp_dense_wrapper_ap_fixed_20_8_5_3_0_ap_fixed_20_8_5_3_0_config18_s_fu_440_ap_return_7;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (real_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state66, icmp_ln36_fu_516_p2, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone, io_acc_block_signal_op470)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((ap_done_reg = ap_const_logic_1) or (real_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if (not(((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (icmp_ln36_fu_516_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (icmp_ln36_fu_516_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state23;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state24;
            when ap_ST_fsm_state24 => 
                ap_NS_fsm <= ap_ST_fsm_state25;
            when ap_ST_fsm_state25 => 
                ap_NS_fsm <= ap_ST_fsm_state26;
            when ap_ST_fsm_state26 => 
                ap_NS_fsm <= ap_ST_fsm_state27;
            when ap_ST_fsm_state27 => 
                ap_NS_fsm <= ap_ST_fsm_state28;
            when ap_ST_fsm_state28 => 
                ap_NS_fsm <= ap_ST_fsm_state29;
            when ap_ST_fsm_state29 => 
                ap_NS_fsm <= ap_ST_fsm_state30;
            when ap_ST_fsm_state30 => 
                ap_NS_fsm <= ap_ST_fsm_state31;
            when ap_ST_fsm_state31 => 
                ap_NS_fsm <= ap_ST_fsm_state32;
            when ap_ST_fsm_state32 => 
                ap_NS_fsm <= ap_ST_fsm_state33;
            when ap_ST_fsm_state33 => 
                ap_NS_fsm <= ap_ST_fsm_state34;
            when ap_ST_fsm_state34 => 
                ap_NS_fsm <= ap_ST_fsm_state35;
            when ap_ST_fsm_state35 => 
                ap_NS_fsm <= ap_ST_fsm_state36;
            when ap_ST_fsm_state36 => 
                ap_NS_fsm <= ap_ST_fsm_state37;
            when ap_ST_fsm_state37 => 
                ap_NS_fsm <= ap_ST_fsm_state38;
            when ap_ST_fsm_state38 => 
                ap_NS_fsm <= ap_ST_fsm_state39;
            when ap_ST_fsm_state39 => 
                ap_NS_fsm <= ap_ST_fsm_state40;
            when ap_ST_fsm_state40 => 
                ap_NS_fsm <= ap_ST_fsm_state41;
            when ap_ST_fsm_state41 => 
                ap_NS_fsm <= ap_ST_fsm_state42;
            when ap_ST_fsm_state42 => 
                ap_NS_fsm <= ap_ST_fsm_state43;
            when ap_ST_fsm_state43 => 
                ap_NS_fsm <= ap_ST_fsm_state44;
            when ap_ST_fsm_state44 => 
                ap_NS_fsm <= ap_ST_fsm_state45;
            when ap_ST_fsm_state45 => 
                ap_NS_fsm <= ap_ST_fsm_state46;
            when ap_ST_fsm_state46 => 
                ap_NS_fsm <= ap_ST_fsm_state47;
            when ap_ST_fsm_state47 => 
                ap_NS_fsm <= ap_ST_fsm_state48;
            when ap_ST_fsm_state48 => 
                ap_NS_fsm <= ap_ST_fsm_state49;
            when ap_ST_fsm_state49 => 
                ap_NS_fsm <= ap_ST_fsm_state50;
            when ap_ST_fsm_state50 => 
                ap_NS_fsm <= ap_ST_fsm_state51;
            when ap_ST_fsm_state51 => 
                ap_NS_fsm <= ap_ST_fsm_state52;
            when ap_ST_fsm_state52 => 
                ap_NS_fsm <= ap_ST_fsm_state53;
            when ap_ST_fsm_state53 => 
                ap_NS_fsm <= ap_ST_fsm_state54;
            when ap_ST_fsm_state54 => 
                ap_NS_fsm <= ap_ST_fsm_state55;
            when ap_ST_fsm_state55 => 
                ap_NS_fsm <= ap_ST_fsm_state56;
            when ap_ST_fsm_state56 => 
                ap_NS_fsm <= ap_ST_fsm_state57;
            when ap_ST_fsm_state57 => 
                ap_NS_fsm <= ap_ST_fsm_state58;
            when ap_ST_fsm_state58 => 
                ap_NS_fsm <= ap_ST_fsm_state59;
            when ap_ST_fsm_state59 => 
                ap_NS_fsm <= ap_ST_fsm_state60;
            when ap_ST_fsm_state60 => 
                ap_NS_fsm <= ap_ST_fsm_state61;
            when ap_ST_fsm_state61 => 
                ap_NS_fsm <= ap_ST_fsm_state62;
            when ap_ST_fsm_state62 => 
                ap_NS_fsm <= ap_ST_fsm_state63;
            when ap_ST_fsm_state63 => 
                ap_NS_fsm <= ap_ST_fsm_state64;
            when ap_ST_fsm_state64 => 
                ap_NS_fsm <= ap_ST_fsm_state65;
            when ap_ST_fsm_state65 => 
                ap_NS_fsm <= ap_ST_fsm_state66;
            when ap_ST_fsm_state66 => 
                if (((io_acc_block_signal_op470 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state66))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state66;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(1);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state4 <= ap_CS_fsm(2);
    ap_CS_fsm_state65 <= ap_CS_fsm(63);
    ap_CS_fsm_state66 <= ap_CS_fsm(64);
    ap_NS_fsm_state4 <= ap_NS_fsm(2);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_11001_assign_proc : process(ap_enable_reg_pp0_iter1, io_acc_block_signal_op237)
    begin
                ap_block_pp0_stage0_11001 <= ((io_acc_block_signal_op237 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_enable_reg_pp0_iter1, io_acc_block_signal_op237)
    begin
                ap_block_pp0_stage0_subdone <= ((io_acc_block_signal_op237 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1));
    end process;


    ap_block_state1_assign_proc : process(real_start, ap_done_reg)
    begin
                ap_block_state1 <= ((ap_done_reg = ap_const_logic_1) or (real_start = ap_const_logic_0));
    end process;

        ap_block_state2_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state3_pp0_stage0_iter1_assign_proc : process(io_acc_block_signal_op237)
    begin
                ap_block_state3_pp0_stage0_iter1 <= (io_acc_block_signal_op237 = ap_const_logic_0);
    end process;


    ap_condition_pp0_exit_iter0_state2_assign_proc : process(icmp_ln36_fu_516_p2)
    begin
        if ((icmp_ln36_fu_516_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_done_reg, ap_CS_fsm_state66, io_acc_block_signal_op470)
    begin
        if (((io_acc_block_signal_op470 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state66))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(real_start, ap_CS_fsm_state1)
    begin
        if (((real_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_i_in_0_phi_fu_432_p4_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, i_in_0_reg_428, icmp_ln36_reg_1672, i_in_reg_1676)
    begin
        if (((icmp_ln36_reg_1672 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            ap_phi_mux_i_in_0_phi_fu_432_p4 <= i_in_reg_1676;
        else 
            ap_phi_mux_i_in_0_phi_fu_432_p4 <= i_in_0_reg_428;
        end if; 
    end process;

    ap_ready <= internal_ap_ready;

    data_stream_V_data_0_V_blk_n_assign_proc : process(data_stream_V_data_0_V_empty_n, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            data_stream_V_data_0_V_blk_n <= data_stream_V_data_0_V_empty_n;
        else 
            data_stream_V_data_0_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    data_stream_V_data_0_V_read_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            data_stream_V_data_0_V_read <= ap_const_logic_1;
        else 
            data_stream_V_data_0_V_read <= ap_const_logic_0;
        end if; 
    end process;


    data_stream_V_data_1_V_blk_n_assign_proc : process(data_stream_V_data_1_V_empty_n, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            data_stream_V_data_1_V_blk_n <= data_stream_V_data_1_V_empty_n;
        else 
            data_stream_V_data_1_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    data_stream_V_data_1_V_read_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            data_stream_V_data_1_V_read <= ap_const_logic_1;
        else 
            data_stream_V_data_1_V_read <= ap_const_logic_0;
        end if; 
    end process;


    data_stream_V_data_2_V_blk_n_assign_proc : process(data_stream_V_data_2_V_empty_n, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            data_stream_V_data_2_V_blk_n <= data_stream_V_data_2_V_empty_n;
        else 
            data_stream_V_data_2_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    data_stream_V_data_2_V_read_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            data_stream_V_data_2_V_read <= ap_const_logic_1;
        else 
            data_stream_V_data_2_V_read <= ap_const_logic_0;
        end if; 
    end process;


    data_stream_V_data_3_V_blk_n_assign_proc : process(data_stream_V_data_3_V_empty_n, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            data_stream_V_data_3_V_blk_n <= data_stream_V_data_3_V_empty_n;
        else 
            data_stream_V_data_3_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    data_stream_V_data_3_V_read_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            data_stream_V_data_3_V_read <= ap_const_logic_1;
        else 
            data_stream_V_data_3_V_read <= ap_const_logic_0;
        end if; 
    end process;


    data_stream_V_data_4_V_blk_n_assign_proc : process(data_stream_V_data_4_V_empty_n, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            data_stream_V_data_4_V_blk_n <= data_stream_V_data_4_V_empty_n;
        else 
            data_stream_V_data_4_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    data_stream_V_data_4_V_read_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            data_stream_V_data_4_V_read <= ap_const_logic_1;
        else 
            data_stream_V_data_4_V_read <= ap_const_logic_0;
        end if; 
    end process;


    data_stream_V_data_5_V_blk_n_assign_proc : process(data_stream_V_data_5_V_empty_n, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            data_stream_V_data_5_V_blk_n <= data_stream_V_data_5_V_empty_n;
        else 
            data_stream_V_data_5_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    data_stream_V_data_5_V_read_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            data_stream_V_data_5_V_read <= ap_const_logic_1;
        else 
            data_stream_V_data_5_V_read <= ap_const_logic_0;
        end if; 
    end process;


    data_stream_V_data_6_V_blk_n_assign_proc : process(data_stream_V_data_6_V_empty_n, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            data_stream_V_data_6_V_blk_n <= data_stream_V_data_6_V_empty_n;
        else 
            data_stream_V_data_6_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    data_stream_V_data_6_V_read_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            data_stream_V_data_6_V_read <= ap_const_logic_1;
        else 
            data_stream_V_data_6_V_read <= ap_const_logic_0;
        end if; 
    end process;


    data_stream_V_data_7_V_blk_n_assign_proc : process(data_stream_V_data_7_V_empty_n, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            data_stream_V_data_7_V_blk_n <= data_stream_V_data_7_V_empty_n;
        else 
            data_stream_V_data_7_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    data_stream_V_data_7_V_read_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            data_stream_V_data_7_V_read <= ap_const_logic_1;
        else 
            data_stream_V_data_7_V_read <= ap_const_logic_0;
        end if; 
    end process;

    grp_dense_wrapper_ap_fixed_20_8_5_3_0_ap_fixed_20_8_5_3_0_config18_s_fu_440_ap_start <= grp_dense_wrapper_ap_fixed_20_8_5_3_0_ap_fixed_20_8_5_3_0_config18_s_fu_440_ap_start_reg;
    i_in_fu_522_p2 <= std_logic_vector(unsigned(ap_phi_mux_i_in_0_phi_fu_432_p4) + unsigned(ap_const_lv4_1));
    icmp_ln36_fu_516_p2 <= "1" when (ap_phi_mux_i_in_0_phi_fu_432_p4 = ap_const_lv4_9) else "0";

    internal_ap_ready_assign_proc : process(ap_CS_fsm_state66, io_acc_block_signal_op470)
    begin
        if (((io_acc_block_signal_op470 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state66))) then 
            internal_ap_ready <= ap_const_logic_1;
        else 
            internal_ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    io_acc_block_signal_op237 <= (data_stream_V_data_7_V_empty_n and data_stream_V_data_6_V_empty_n and data_stream_V_data_5_V_empty_n and data_stream_V_data_4_V_empty_n and data_stream_V_data_3_V_empty_n and data_stream_V_data_2_V_empty_n and data_stream_V_data_1_V_empty_n and data_stream_V_data_0_V_empty_n);
    io_acc_block_signal_op470 <= (res_stream_V_data_7_V_full_n and res_stream_V_data_6_V_full_n and res_stream_V_data_5_V_full_n and res_stream_V_data_4_V_full_n and res_stream_V_data_3_V_full_n and res_stream_V_data_2_V_full_n and res_stream_V_data_1_V_full_n and res_stream_V_data_0_V_full_n);

    real_start_assign_proc : process(ap_start, start_full_n, start_once_reg)
    begin
        if (((start_once_reg = ap_const_logic_0) and (start_full_n = ap_const_logic_0))) then 
            real_start <= ap_const_logic_0;
        else 
            real_start <= ap_start;
        end if; 
    end process;


    res_stream_V_data_0_V_blk_n_assign_proc : process(res_stream_V_data_0_V_full_n, ap_CS_fsm_state66)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state66)) then 
            res_stream_V_data_0_V_blk_n <= res_stream_V_data_0_V_full_n;
        else 
            res_stream_V_data_0_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    res_stream_V_data_0_V_din <= tmp_data_0_V_reg_2026;

    res_stream_V_data_0_V_write_assign_proc : process(ap_CS_fsm_state66, io_acc_block_signal_op470)
    begin
        if (((io_acc_block_signal_op470 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state66))) then 
            res_stream_V_data_0_V_write <= ap_const_logic_1;
        else 
            res_stream_V_data_0_V_write <= ap_const_logic_0;
        end if; 
    end process;


    res_stream_V_data_1_V_blk_n_assign_proc : process(res_stream_V_data_1_V_full_n, ap_CS_fsm_state66)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state66)) then 
            res_stream_V_data_1_V_blk_n <= res_stream_V_data_1_V_full_n;
        else 
            res_stream_V_data_1_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    res_stream_V_data_1_V_din <= tmp_data_1_V_reg_2031;

    res_stream_V_data_1_V_write_assign_proc : process(ap_CS_fsm_state66, io_acc_block_signal_op470)
    begin
        if (((io_acc_block_signal_op470 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state66))) then 
            res_stream_V_data_1_V_write <= ap_const_logic_1;
        else 
            res_stream_V_data_1_V_write <= ap_const_logic_0;
        end if; 
    end process;


    res_stream_V_data_2_V_blk_n_assign_proc : process(res_stream_V_data_2_V_full_n, ap_CS_fsm_state66)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state66)) then 
            res_stream_V_data_2_V_blk_n <= res_stream_V_data_2_V_full_n;
        else 
            res_stream_V_data_2_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    res_stream_V_data_2_V_din <= tmp_data_2_V_reg_2036;

    res_stream_V_data_2_V_write_assign_proc : process(ap_CS_fsm_state66, io_acc_block_signal_op470)
    begin
        if (((io_acc_block_signal_op470 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state66))) then 
            res_stream_V_data_2_V_write <= ap_const_logic_1;
        else 
            res_stream_V_data_2_V_write <= ap_const_logic_0;
        end if; 
    end process;


    res_stream_V_data_3_V_blk_n_assign_proc : process(res_stream_V_data_3_V_full_n, ap_CS_fsm_state66)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state66)) then 
            res_stream_V_data_3_V_blk_n <= res_stream_V_data_3_V_full_n;
        else 
            res_stream_V_data_3_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    res_stream_V_data_3_V_din <= tmp_data_3_V_reg_2041;

    res_stream_V_data_3_V_write_assign_proc : process(ap_CS_fsm_state66, io_acc_block_signal_op470)
    begin
        if (((io_acc_block_signal_op470 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state66))) then 
            res_stream_V_data_3_V_write <= ap_const_logic_1;
        else 
            res_stream_V_data_3_V_write <= ap_const_logic_0;
        end if; 
    end process;


    res_stream_V_data_4_V_blk_n_assign_proc : process(res_stream_V_data_4_V_full_n, ap_CS_fsm_state66)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state66)) then 
            res_stream_V_data_4_V_blk_n <= res_stream_V_data_4_V_full_n;
        else 
            res_stream_V_data_4_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    res_stream_V_data_4_V_din <= tmp_data_4_V_reg_2046;

    res_stream_V_data_4_V_write_assign_proc : process(ap_CS_fsm_state66, io_acc_block_signal_op470)
    begin
        if (((io_acc_block_signal_op470 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state66))) then 
            res_stream_V_data_4_V_write <= ap_const_logic_1;
        else 
            res_stream_V_data_4_V_write <= ap_const_logic_0;
        end if; 
    end process;


    res_stream_V_data_5_V_blk_n_assign_proc : process(res_stream_V_data_5_V_full_n, ap_CS_fsm_state66)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state66)) then 
            res_stream_V_data_5_V_blk_n <= res_stream_V_data_5_V_full_n;
        else 
            res_stream_V_data_5_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    res_stream_V_data_5_V_din <= tmp_data_5_V_reg_2051;

    res_stream_V_data_5_V_write_assign_proc : process(ap_CS_fsm_state66, io_acc_block_signal_op470)
    begin
        if (((io_acc_block_signal_op470 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state66))) then 
            res_stream_V_data_5_V_write <= ap_const_logic_1;
        else 
            res_stream_V_data_5_V_write <= ap_const_logic_0;
        end if; 
    end process;


    res_stream_V_data_6_V_blk_n_assign_proc : process(res_stream_V_data_6_V_full_n, ap_CS_fsm_state66)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state66)) then 
            res_stream_V_data_6_V_blk_n <= res_stream_V_data_6_V_full_n;
        else 
            res_stream_V_data_6_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    res_stream_V_data_6_V_din <= tmp_data_6_V_reg_2056;

    res_stream_V_data_6_V_write_assign_proc : process(ap_CS_fsm_state66, io_acc_block_signal_op470)
    begin
        if (((io_acc_block_signal_op470 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state66))) then 
            res_stream_V_data_6_V_write <= ap_const_logic_1;
        else 
            res_stream_V_data_6_V_write <= ap_const_logic_0;
        end if; 
    end process;


    res_stream_V_data_7_V_blk_n_assign_proc : process(res_stream_V_data_7_V_full_n, ap_CS_fsm_state66)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state66)) then 
            res_stream_V_data_7_V_blk_n <= res_stream_V_data_7_V_full_n;
        else 
            res_stream_V_data_7_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    res_stream_V_data_7_V_din <= tmp_data_7_V_reg_2061;

    res_stream_V_data_7_V_write_assign_proc : process(ap_CS_fsm_state66, io_acc_block_signal_op470)
    begin
        if (((io_acc_block_signal_op470 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state66))) then 
            res_stream_V_data_7_V_write <= ap_const_logic_1;
        else 
            res_stream_V_data_7_V_write <= ap_const_logic_0;
        end if; 
    end process;

    start_out <= real_start;

    start_write_assign_proc : process(real_start, start_once_reg)
    begin
        if (((start_once_reg = ap_const_logic_0) and (real_start = ap_const_logic_1))) then 
            start_write <= ap_const_logic_1;
        else 
            start_write <= ap_const_logic_0;
        end if; 
    end process;

end behav;
