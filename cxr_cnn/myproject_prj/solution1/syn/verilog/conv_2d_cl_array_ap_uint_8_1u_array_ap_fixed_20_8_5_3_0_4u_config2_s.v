// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module conv_2d_cl_array_ap_uint_8_1u_array_ap_fixed_20_8_5_3_0_4u_config2_s (
        ap_clk,
        ap_rst,
        ap_start,
        start_full_n,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        start_out,
        start_write,
        data_V_data_V_dout,
        data_V_data_V_empty_n,
        data_V_data_V_read,
        res_V_data_0_V_din,
        res_V_data_0_V_full_n,
        res_V_data_0_V_write,
        res_V_data_1_V_din,
        res_V_data_1_V_full_n,
        res_V_data_1_V_write,
        res_V_data_2_V_din,
        res_V_data_2_V_full_n,
        res_V_data_2_V_write,
        res_V_data_3_V_din,
        res_V_data_3_V_full_n,
        res_V_data_3_V_write
);

parameter    ap_ST_fsm_state1 = 16'd1;
parameter    ap_ST_fsm_state2 = 16'd2;
parameter    ap_ST_fsm_state3 = 16'd4;
parameter    ap_ST_fsm_state4 = 16'd8;
parameter    ap_ST_fsm_state5 = 16'd16;
parameter    ap_ST_fsm_state6 = 16'd32;
parameter    ap_ST_fsm_state7 = 16'd64;
parameter    ap_ST_fsm_state8 = 16'd128;
parameter    ap_ST_fsm_state9 = 16'd256;
parameter    ap_ST_fsm_state10 = 16'd512;
parameter    ap_ST_fsm_state11 = 16'd1024;
parameter    ap_ST_fsm_state12 = 16'd2048;
parameter    ap_ST_fsm_state13 = 16'd4096;
parameter    ap_ST_fsm_state14 = 16'd8192;
parameter    ap_ST_fsm_state15 = 16'd16384;
parameter    ap_ST_fsm_state16 = 16'd32768;

input   ap_clk;
input   ap_rst;
input   ap_start;
input   start_full_n;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
output   start_out;
output   start_write;
input  [7:0] data_V_data_V_dout;
input   data_V_data_V_empty_n;
output   data_V_data_V_read;
output  [19:0] res_V_data_0_V_din;
input   res_V_data_0_V_full_n;
output   res_V_data_0_V_write;
output  [19:0] res_V_data_1_V_din;
input   res_V_data_1_V_full_n;
output   res_V_data_1_V_write;
output  [19:0] res_V_data_2_V_din;
input   res_V_data_2_V_full_n;
output   res_V_data_2_V_write;
output  [19:0] res_V_data_3_V_din;
input   res_V_data_3_V_full_n;
output   res_V_data_3_V_write;

reg ap_done;
reg ap_idle;
reg start_write;
reg data_V_data_V_read;
reg res_V_data_0_V_write;
reg res_V_data_1_V_write;
reg res_V_data_2_V_write;
reg res_V_data_3_V_write;

reg    real_start;
reg    start_once_reg;
reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [15:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    internal_ap_ready;
reg   [31:0] pX_3;
reg   [31:0] sX_3;
reg   [31:0] pY_3;
reg   [31:0] sY_3;
reg   [7:0] kernel_data_V_2_1;
reg   [7:0] kernel_data_V_2_4;
reg   [7:0] kernel_data_V_2_7;
reg   [7:0] kernel_data_V_2_2;
reg   [7:0] kernel_data_V_2_5;
reg   [7:0] kernel_data_V_2_8;
reg    line_buffer_Array_V_2_0_0_ce0;
reg    line_buffer_Array_V_2_0_0_we0;
wire   [7:0] line_buffer_Array_V_2_0_0_q0;
reg    line_buffer_Array_V_2_1_0_ce0;
reg    line_buffer_Array_V_2_1_0_we0;
wire   [7:0] line_buffer_Array_V_2_1_0_q0;
reg    data_V_data_V_blk_n;
wire    ap_CS_fsm_state3;
reg    res_V_data_0_V_blk_n;
wire    ap_CS_fsm_state15;
reg   [0:0] icmp_ln79_reg_890;
reg   [0:0] and_ln289_2_reg_939;
reg    res_V_data_1_V_blk_n;
reg    res_V_data_2_V_blk_n;
reg    res_V_data_3_V_blk_n;
wire   [16:0] grp_fu_200_p2;
reg   [15:0] reg_209;
wire    ap_CS_fsm_state2;
wire   [0:0] icmp_ln79_fu_252_p2;
wire   [0:0] and_ln289_2_fu_340_p2;
wire    ap_CS_fsm_state5;
wire    ap_CS_fsm_state9;
wire    ap_CS_fsm_state10;
wire    ap_CS_fsm_state11;
reg   [15:0] mul_ln703_1_reg_215;
reg   [14:0] reg_221;
wire    ap_CS_fsm_state4;
wire    ap_CS_fsm_state12;
reg   [16:0] reg_229;
wire    ap_CS_fsm_state6;
wire    ap_CS_fsm_state13;
reg   [13:0] reg_235;
wire    ap_CS_fsm_state7;
wire    ap_CS_fsm_state8;
wire   [14:0] add_ln79_fu_258_p2;
reg   [14:0] add_ln79_reg_894;
reg   [7:0] kernel_data_V_2_2_load_reg_899;
reg   [31:0] sX_3_load_reg_907;
wire   [0:0] icmp_ln289_fu_272_p2;
reg   [0:0] icmp_ln289_reg_912;
reg   [31:0] sY_3_load_reg_917;
wire   [0:0] icmp_ln289_1_fu_282_p2;
reg   [0:0] icmp_ln289_1_reg_922;
reg   [31:0] pY_3_load_reg_927;
reg   [31:0] pX_3_load_reg_933;
reg   [7:0] tmp_data_0_V_reg_943;
reg   [7:0] DataOut_V_75_reg_950;
reg   [7:0] DataOut_V_reg_956;
reg   [7:0] kernel_data_V_2_4_load_reg_963;
reg   [7:0] kernel_data_V_2_7_load_reg_969;
reg   [7:0] kernel_data_V_2_5_load_reg_976;
reg   [7:0] kernel_data_V_2_8_load_reg_982;
wire   [13:0] add_ln703_fu_444_p2;
reg   [13:0] add_ln703_reg_988;
wire   [0:0] icmp_ln313_fu_455_p2;
reg   [0:0] icmp_ln313_reg_993;
wire   [31:0] select_ln328_fu_476_p3;
reg   [31:0] select_ln328_reg_997;
wire   [0:0] icmp_ln317_fu_495_p2;
reg   [0:0] icmp_ln317_reg_1002;
wire   [31:0] select_ln323_fu_516_p3;
reg   [31:0] select_ln323_reg_1006;
wire   [14:0] add_ln703_400_fu_546_p2;
reg   [14:0] add_ln703_400_reg_1011;
wire   [13:0] sub_ln703_4_fu_635_p2;
reg   [13:0] sub_ln703_4_reg_1016;
wire   [13:0] add_ln703_398_fu_670_p2;
reg   [13:0] add_ln703_398_reg_1021;
wire   [14:0] add_ln703_409_fu_690_p2;
reg   [14:0] add_ln703_409_reg_1026;
wire   [14:0] add_ln703_410_fu_696_p2;
reg   [14:0] add_ln703_410_reg_1031;
wire   [14:0] add_ln703_404_fu_717_p2;
reg   [14:0] add_ln703_404_reg_1036;
wire   [14:0] tmp_data_1_V_fu_728_p2;
reg   [14:0] tmp_data_1_V_reg_1041;
wire   [15:0] add_ln703_407_fu_737_p2;
reg   [15:0] add_ln703_407_reg_1046;
wire   [14:0] sub_ln703_2_fu_768_p2;
reg   [14:0] sub_ln703_2_reg_1051;
wire   [14:0] add_ln703_414_fu_777_p2;
reg   [14:0] add_ln703_414_reg_1056;
wire   [15:0] tmp_data_2_V_fu_816_p2;
reg   [15:0] tmp_data_2_V_reg_1061;
wire   [15:0] add_ln703_413_fu_822_p2;
reg   [15:0] add_ln703_413_reg_1066;
wire   [15:0] add_ln703_401_fu_836_p2;
reg   [15:0] add_ln703_401_reg_1071;
wire   [15:0] tmp_data_0_V_4_fu_851_p2;
reg   [15:0] tmp_data_0_V_4_reg_1076;
wire   [16:0] tmp_data_3_V_fu_868_p2;
reg   [16:0] tmp_data_3_V_reg_1081;
wire    ap_CS_fsm_state14;
reg   [14:0] indvar_flatten_reg_178;
reg    ap_block_state1;
wire    io_acc_block_signal_op180;
reg    ap_predicate_op180_write_state15;
reg    ap_block_state15;
reg   [31:0] storemerge_i_i_reg_189;
wire   [31:0] add_ln326_fu_460_p2;
wire   [31:0] add_ln321_fu_500_p2;
reg   [7:0] grp_fu_200_p0;
wire   [13:0] zext_ln703_4_fu_346_p1;
wire   [15:0] zext_ln703_3_fu_351_p1;
wire   [14:0] zext_ln703_12_fu_450_p1;
wire   [13:0] zext_ln703_11_fu_536_p1;
wire   [15:0] zext_ln703_10_fu_557_p1;
wire   [13:0] zext_ln703_21_fu_567_p1;
wire   [13:0] zext_ln703_16_fu_641_p1;
wire   [15:0] zext_ln703_15_fu_709_p1;
wire   [14:0] zext_ln703_24_fu_733_p1;
wire   [14:0] zext_ln703_8_fu_743_p1;
wire   [14:0] zext_ln703_22_fu_790_p1;
wire   [16:0] zext_ln703_7_fu_828_p1;
reg  signed [8:0] grp_fu_200_p1;
wire   [30:0] tmp_fu_292_p4;
wire   [30:0] tmp_19_fu_312_p4;
wire   [0:0] icmp_ln289_2_fu_302_p2;
wire   [0:0] icmp_ln289_3_fu_322_p2;
wire   [0:0] and_ln289_1_fu_334_p2;
wire   [0:0] and_ln289_fu_328_p2;
wire   [12:0] shl_ln_fu_432_p3;
wire   [13:0] zext_ln703_fu_428_p1;
wire   [13:0] zext_ln703_1_fu_440_p1;
wire   [31:0] add_ln328_fu_471_p2;
wire   [31:0] add_ln323_fu_511_p2;
wire   [13:0] sext_ln703_4_fu_532_p0;
wire   [14:0] zext_ln703_2_fu_529_p1;
wire  signed [14:0] sext_ln703_4_fu_532_p1;
wire   [14:0] add_ln703_399_fu_540_p2;
wire   [12:0] shl_ln703_1_fu_571_p3;
wire   [9:0] shl_ln703_2_fu_582_p3;
wire   [13:0] zext_ln703_5_fu_578_p1;
wire   [13:0] zext_ln703_6_fu_589_p1;
wire   [13:0] sub_ln703_fu_593_p2;
wire   [11:0] shl_ln703_4_fu_603_p3;
wire   [12:0] zext_ln703_13_fu_610_p1;
wire   [12:0] sub_ln703_3_fu_614_p2;
wire   [9:0] shl_ln703_5_fu_624_p3;
wire  signed [13:0] sext_ln703_9_fu_620_p1;
wire   [13:0] zext_ln703_14_fu_631_p1;
wire   [12:0] shl_ln703_6_fu_648_p3;
wire   [10:0] shl_ln703_7_fu_659_p3;
wire   [13:0] zext_ln703_19_fu_666_p1;
wire   [13:0] zext_ln703_18_fu_655_p1;
wire   [13:0] zext_ln703_17_fu_645_p1;
wire   [13:0] sub_ln703_5_fu_676_p2;
wire  signed [14:0] sext_ln703_fu_599_p1;
wire   [14:0] zext_ln703_23_fu_686_p1;
wire  signed [14:0] sext_ln703_12_fu_682_p1;
wire   [13:0] sext_ln703_47_fu_702_p0;
wire  signed [14:0] sext_ln703_48_fu_713_p1;
wire  signed [14:0] sext_ln703_47_fu_702_p1;
wire  signed [14:0] sext_ln703_10_fu_706_p1;
wire   [14:0] add_ln703_411_fu_723_p2;
wire   [15:0] add_ln703_407_fu_737_p1;
wire   [12:0] shl_ln703_3_fu_747_p3;
wire   [13:0] zext_ln703_9_fu_754_p1;
wire   [13:0] sub_ln703_1_fu_758_p2;
wire  signed [14:0] sext_ln703_5_fu_764_p1;
wire   [14:0] zext_ln703_20_fu_774_p1;
wire   [14:0] add_ln703_414_fu_777_p1;
wire   [14:0] add_ln703_402_fu_797_p0;
wire   [14:0] add_ln703_402_fu_797_p2;
wire   [15:0] zext_ln703_25_fu_794_p1;
wire  signed [15:0] sext_ln703_6_fu_783_p1;
wire   [15:0] add_ln703_403_fu_807_p2;
wire  signed [15:0] sext_ln703_49_fu_813_p1;
wire   [15:0] zext_ln703_26_fu_803_p1;
wire  signed [15:0] sext_ln703_7_fu_786_p1;
wire  signed [15:0] sext_ln703_13_fu_832_p1;
wire  signed [15:0] sext_ln703_53_fu_842_p1;
wire   [15:0] add_ln703_415_fu_845_p2;
wire  signed [16:0] sext_ln703_15_fu_856_p1;
wire   [16:0] add_ln703_406_fu_859_p2;
wire   [16:0] zext_ln703_27_fu_865_p1;
wire    ap_CS_fsm_state16;
reg   [15:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 start_once_reg = 1'b0;
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 16'd1;
#0 pX_3 = 32'd0;
#0 sX_3 = 32'd0;
#0 pY_3 = 32'd0;
#0 sY_3 = 32'd0;
#0 kernel_data_V_2_1 = 8'd0;
#0 kernel_data_V_2_4 = 8'd0;
#0 kernel_data_V_2_7 = 8'd0;
#0 kernel_data_V_2_2 = 8'd0;
#0 kernel_data_V_2_5 = 8'd0;
#0 kernel_data_V_2_8 = 8'd0;
end

conv_2d_cl_array_ap_uint_8_1u_array_ap_fixed_20_8_5_3_0_4u_config2_s_line_bufbkb #(
    .DataWidth( 8 ),
    .AddressRange( 128 ),
    .AddressWidth( 7 ))
line_buffer_Array_V_2_0_0_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(7'd127),
    .ce0(line_buffer_Array_V_2_0_0_ce0),
    .we0(line_buffer_Array_V_2_0_0_we0),
    .d0(tmp_data_0_V_reg_943),
    .q0(line_buffer_Array_V_2_0_0_q0)
);

conv_2d_cl_array_ap_uint_8_1u_array_ap_fixed_20_8_5_3_0_4u_config2_s_line_bufbkb #(
    .DataWidth( 8 ),
    .AddressRange( 128 ),
    .AddressWidth( 7 ))
line_buffer_Array_V_2_1_0_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(7'd127),
    .ce0(line_buffer_Array_V_2_1_0_ce0),
    .we0(line_buffer_Array_V_2_1_0_we0),
    .d0(line_buffer_Array_V_2_0_0_q0),
    .q0(line_buffer_Array_V_2_1_0_q0)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state16)) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        start_once_reg <= 1'b0;
    end else begin
        if (((internal_ap_ready == 1'b0) & (real_start == 1'b1))) begin
            start_once_reg <= 1'b1;
        end else if ((internal_ap_ready == 1'b1)) begin
            start_once_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((~((io_acc_block_signal_op180 == 1'b0) & (ap_predicate_op180_write_state15 == 1'b1)) & (1'b1 == ap_CS_fsm_state15) & (icmp_ln79_reg_890 == 1'd0))) begin
        indvar_flatten_reg_178 <= add_ln79_reg_894;
    end else if ((~((ap_done_reg == 1'b1) | (real_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        indvar_flatten_reg_178 <= 15'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        if ((icmp_ln313_fu_455_p2 == 1'd1)) begin
            pX_3 <= 32'd0;
        end else if ((icmp_ln313_fu_455_p2 == 1'd0)) begin
            pX_3 <= add_ln326_fu_460_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state4) & (icmp_ln313_fu_455_p2 == 1'd1))) begin
        if ((icmp_ln317_fu_495_p2 == 1'd1)) begin
            pY_3 <= 32'd0;
        end else if ((icmp_ln317_fu_495_p2 == 1'd0)) begin
            pY_3 <= add_ln321_fu_500_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state5) & (icmp_ln313_reg_993 == 1'd0) & (icmp_ln79_reg_890 == 1'd0))) begin
        sX_3 <= select_ln328_reg_997;
    end else if (((1'b1 == ap_CS_fsm_state4) & (icmp_ln313_fu_455_p2 == 1'd1))) begin
        sX_3 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state4) & (icmp_ln317_fu_495_p2 == 1'd1) & (icmp_ln313_fu_455_p2 == 1'd1))) begin
        storemerge_i_i_reg_189 <= 32'd0;
    end else if (((1'b1 == ap_CS_fsm_state5) & (icmp_ln313_reg_993 == 1'd1) & (icmp_ln317_reg_1002 == 1'd0) & (icmp_ln79_reg_890 == 1'd0))) begin
        storemerge_i_i_reg_189 <= select_ln323_reg_1006;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        DataOut_V_75_reg_950 <= line_buffer_Array_V_2_0_0_q0;
        DataOut_V_reg_956 <= line_buffer_Array_V_2_1_0_q0;
        icmp_ln313_reg_993 <= icmp_ln313_fu_455_p2;
        kernel_data_V_2_1 <= kernel_data_V_2_2_load_reg_899;
        kernel_data_V_2_2 <= line_buffer_Array_V_2_1_0_q0;
        kernel_data_V_2_4 <= kernel_data_V_2_5;
        kernel_data_V_2_4_load_reg_963 <= kernel_data_V_2_4;
        kernel_data_V_2_5 <= line_buffer_Array_V_2_0_0_q0;
        kernel_data_V_2_5_load_reg_976 <= kernel_data_V_2_5;
        kernel_data_V_2_7 <= kernel_data_V_2_8;
        kernel_data_V_2_7_load_reg_969 <= kernel_data_V_2_7;
        kernel_data_V_2_8 <= tmp_data_0_V_reg_943;
        kernel_data_V_2_8_load_reg_982 <= kernel_data_V_2_8;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state8) & (1'd1 == and_ln289_2_reg_939) & (icmp_ln79_reg_890 == 1'd0))) begin
        add_ln703_398_reg_1021[13 : 3] <= add_ln703_398_fu_670_p2[13 : 3];
        add_ln703_409_reg_1026[14 : 2] <= add_ln703_409_fu_690_p2[14 : 2];
        add_ln703_410_reg_1031 <= add_ln703_410_fu_696_p2;
        sub_ln703_4_reg_1016[13 : 2] <= sub_ln703_4_fu_635_p2[13 : 2];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state5) & (1'd1 == and_ln289_2_reg_939) & (icmp_ln79_reg_890 == 1'd0))) begin
        add_ln703_400_reg_1011 <= add_ln703_400_fu_546_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state13) & (1'd1 == and_ln289_2_reg_939) & (icmp_ln79_reg_890 == 1'd0))) begin
        add_ln703_401_reg_1071 <= add_ln703_401_fu_836_p2;
        tmp_data_0_V_4_reg_1076 <= tmp_data_0_V_4_fu_851_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state9) & (1'd1 == and_ln289_2_reg_939) & (icmp_ln79_reg_890 == 1'd0))) begin
        add_ln703_404_reg_1036 <= add_ln703_404_fu_717_p2;
        tmp_data_1_V_reg_1041 <= tmp_data_1_V_fu_728_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state10) & (1'd1 == and_ln289_2_reg_939) & (icmp_ln79_reg_890 == 1'd0))) begin
        add_ln703_407_reg_1046 <= add_ln703_407_fu_737_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state12) & (1'd1 == and_ln289_2_reg_939) & (icmp_ln79_reg_890 == 1'd0))) begin
        add_ln703_413_reg_1066 <= add_ln703_413_fu_822_p2;
        tmp_data_2_V_reg_1061 <= tmp_data_2_V_fu_816_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state11) & (1'd1 == and_ln289_2_reg_939) & (icmp_ln79_reg_890 == 1'd0))) begin
        add_ln703_414_reg_1056 <= add_ln703_414_fu_777_p2;
        sub_ln703_2_reg_1051 <= sub_ln703_2_fu_768_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state4) & (1'd1 == and_ln289_2_reg_939))) begin
        add_ln703_reg_988 <= add_ln703_fu_444_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        add_ln79_reg_894 <= add_ln79_fu_258_p2;
        icmp_ln79_reg_890 <= icmp_ln79_fu_252_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln79_fu_252_p2 == 1'd0))) begin
        and_ln289_2_reg_939 <= and_ln289_2_fu_340_p2;
        icmp_ln289_1_reg_922 <= icmp_ln289_1_fu_282_p2;
        icmp_ln289_reg_912 <= icmp_ln289_fu_272_p2;
        kernel_data_V_2_2_load_reg_899 <= kernel_data_V_2_2;
        pX_3_load_reg_933 <= pX_3;
        pY_3_load_reg_927 <= pY_3;
        sX_3_load_reg_907 <= sX_3;
        sY_3_load_reg_917 <= sY_3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state4) & (icmp_ln313_fu_455_p2 == 1'd1))) begin
        icmp_ln317_reg_1002 <= icmp_ln317_fu_495_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((data_V_data_V_empty_n == 1'b1) & (1'b1 == ap_CS_fsm_state3) & (1'd1 == and_ln289_2_reg_939))) begin
        mul_ln703_1_reg_215 <= grp_fu_200_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((((1'b1 == ap_CS_fsm_state2) & (1'd1 == and_ln289_2_fu_340_p2) & (icmp_ln79_fu_252_p2 == 1'd0)) | ((1'b1 == ap_CS_fsm_state11) & (1'd1 == and_ln289_2_reg_939) & (icmp_ln79_reg_890 == 1'd0)) | ((1'b1 == ap_CS_fsm_state10) & (1'd1 == and_ln289_2_reg_939) & (icmp_ln79_reg_890 == 1'd0)) | ((1'b1 == ap_CS_fsm_state9) & (1'd1 == and_ln289_2_reg_939) & (icmp_ln79_reg_890 == 1'd0)) | ((1'b1 == ap_CS_fsm_state5) & (1'd1 == and_ln289_2_reg_939) & (icmp_ln79_reg_890 == 1'd0)))) begin
        reg_209 <= grp_fu_200_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((((1'b1 == ap_CS_fsm_state4) & (1'd1 == and_ln289_2_reg_939)) | ((1'b1 == ap_CS_fsm_state12) & (1'd1 == and_ln289_2_reg_939) & (icmp_ln79_reg_890 == 1'd0)))) begin
        reg_221 <= grp_fu_200_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((((1'b1 == ap_CS_fsm_state13) & (1'd1 == and_ln289_2_reg_939) & (icmp_ln79_reg_890 == 1'd0)) | ((1'b1 == ap_CS_fsm_state6) & (1'd1 == and_ln289_2_reg_939) & (icmp_ln79_reg_890 == 1'd0)))) begin
        reg_229 <= grp_fu_200_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((((1'b1 == ap_CS_fsm_state8) & (1'd1 == and_ln289_2_reg_939) & (icmp_ln79_reg_890 == 1'd0)) | ((1'b1 == ap_CS_fsm_state7) & (1'd1 == and_ln289_2_reg_939) & (icmp_ln79_reg_890 == 1'd0)))) begin
        reg_235 <= grp_fu_200_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state6) & (icmp_ln313_reg_993 == 1'd1) & (icmp_ln79_reg_890 == 1'd0))) begin
        sY_3 <= storemerge_i_i_reg_189;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state4) & (icmp_ln313_fu_455_p2 == 1'd1) & (icmp_ln317_fu_495_p2 == 1'd0))) begin
        select_ln323_reg_1006 <= select_ln323_fu_516_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state4) & (icmp_ln313_fu_455_p2 == 1'd0))) begin
        select_ln328_reg_997 <= select_ln328_fu_476_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((data_V_data_V_empty_n == 1'b1) & (1'b1 == ap_CS_fsm_state3))) begin
        tmp_data_0_V_reg_943 <= data_V_data_V_dout;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state14) & (1'd1 == and_ln289_2_reg_939) & (icmp_ln79_reg_890 == 1'd0))) begin
        tmp_data_3_V_reg_1081 <= tmp_data_3_V_fu_868_p2;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state16)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((real_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        data_V_data_V_blk_n = data_V_data_V_empty_n;
    end else begin
        data_V_data_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((data_V_data_V_empty_n == 1'b1) & (1'b1 == ap_CS_fsm_state3))) begin
        data_V_data_V_read = 1'b1;
    end else begin
        data_V_data_V_read = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        grp_fu_200_p0 = zext_ln703_7_fu_828_p1;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        grp_fu_200_p0 = zext_ln703_22_fu_790_p1;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        grp_fu_200_p0 = zext_ln703_8_fu_743_p1;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        grp_fu_200_p0 = zext_ln703_24_fu_733_p1;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        grp_fu_200_p0 = zext_ln703_15_fu_709_p1;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        grp_fu_200_p0 = zext_ln703_16_fu_641_p1;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        grp_fu_200_p0 = zext_ln703_21_fu_567_p1;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        grp_fu_200_p0 = zext_ln703_10_fu_557_p1;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        grp_fu_200_p0 = zext_ln703_11_fu_536_p1;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        grp_fu_200_p0 = zext_ln703_12_fu_450_p1;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        grp_fu_200_p0 = zext_ln703_3_fu_351_p1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        grp_fu_200_p0 = zext_ln703_4_fu_346_p1;
    end else begin
        grp_fu_200_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        grp_fu_200_p1 = 17'd130921;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        grp_fu_200_p1 = 15'd32717;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        grp_fu_200_p1 = 15'd45;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        grp_fu_200_p1 = 15'd32726;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        grp_fu_200_p1 = 16'd116;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        grp_fu_200_p1 = 14'd16363;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        grp_fu_200_p1 = 14'd25;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        grp_fu_200_p1 = 16'd85;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        grp_fu_200_p1 = 14'd16359;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        grp_fu_200_p1 = 15'd32710;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        grp_fu_200_p1 = 16'd65435;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        grp_fu_200_p1 = 14'd16361;
    end else begin
        grp_fu_200_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state16)) begin
        internal_ap_ready = 1'b1;
    end else begin
        internal_ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        line_buffer_Array_V_2_0_0_ce0 = 1'd1;
    end else begin
        line_buffer_Array_V_2_0_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        line_buffer_Array_V_2_0_0_we0 = 1'd1;
    end else begin
        line_buffer_Array_V_2_0_0_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        line_buffer_Array_V_2_1_0_ce0 = 1'd1;
    end else begin
        line_buffer_Array_V_2_1_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        line_buffer_Array_V_2_1_0_we0 = 1'd1;
    end else begin
        line_buffer_Array_V_2_1_0_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (start_full_n == 1'b0))) begin
        real_start = 1'b0;
    end else begin
        real_start = ap_start;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state15) & (1'd1 == and_ln289_2_reg_939) & (icmp_ln79_reg_890 == 1'd0))) begin
        res_V_data_0_V_blk_n = res_V_data_0_V_full_n;
    end else begin
        res_V_data_0_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((io_acc_block_signal_op180 == 1'b0) & (ap_predicate_op180_write_state15 == 1'b1)) & (ap_predicate_op180_write_state15 == 1'b1) & (1'b1 == ap_CS_fsm_state15))) begin
        res_V_data_0_V_write = 1'b1;
    end else begin
        res_V_data_0_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state15) & (1'd1 == and_ln289_2_reg_939) & (icmp_ln79_reg_890 == 1'd0))) begin
        res_V_data_1_V_blk_n = res_V_data_1_V_full_n;
    end else begin
        res_V_data_1_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((io_acc_block_signal_op180 == 1'b0) & (ap_predicate_op180_write_state15 == 1'b1)) & (ap_predicate_op180_write_state15 == 1'b1) & (1'b1 == ap_CS_fsm_state15))) begin
        res_V_data_1_V_write = 1'b1;
    end else begin
        res_V_data_1_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state15) & (1'd1 == and_ln289_2_reg_939) & (icmp_ln79_reg_890 == 1'd0))) begin
        res_V_data_2_V_blk_n = res_V_data_2_V_full_n;
    end else begin
        res_V_data_2_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((io_acc_block_signal_op180 == 1'b0) & (ap_predicate_op180_write_state15 == 1'b1)) & (ap_predicate_op180_write_state15 == 1'b1) & (1'b1 == ap_CS_fsm_state15))) begin
        res_V_data_2_V_write = 1'b1;
    end else begin
        res_V_data_2_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state15) & (1'd1 == and_ln289_2_reg_939) & (icmp_ln79_reg_890 == 1'd0))) begin
        res_V_data_3_V_blk_n = res_V_data_3_V_full_n;
    end else begin
        res_V_data_3_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((io_acc_block_signal_op180 == 1'b0) & (ap_predicate_op180_write_state15 == 1'b1)) & (ap_predicate_op180_write_state15 == 1'b1) & (1'b1 == ap_CS_fsm_state15))) begin
        res_V_data_3_V_write = 1'b1;
    end else begin
        res_V_data_3_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (real_start == 1'b1))) begin
        start_write = 1'b1;
    end else begin
        start_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((ap_done_reg == 1'b1) | (real_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln79_fu_252_p2 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state16;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((data_V_data_V_empty_n == 1'b1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            if ((~((io_acc_block_signal_op180 == 1'b0) & (ap_predicate_op180_write_state15 == 1'b1)) & (1'b1 == ap_CS_fsm_state15))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state15;
            end
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln321_fu_500_p2 = (pY_3_load_reg_927 + 32'd1);

assign add_ln323_fu_511_p2 = (sY_3_load_reg_917 + 32'd1);

assign add_ln326_fu_460_p2 = (pX_3_load_reg_933 + 32'd1);

assign add_ln328_fu_471_p2 = (sX_3_load_reg_907 + 32'd1);

assign add_ln703_398_fu_670_p2 = (zext_ln703_19_fu_666_p1 + zext_ln703_18_fu_655_p1);

assign add_ln703_399_fu_540_p2 = (zext_ln703_2_fu_529_p1 + 15'd8510);

assign add_ln703_400_fu_546_p2 = ($signed(sext_ln703_4_fu_532_p1) + $signed(add_ln703_399_fu_540_p2));

assign add_ln703_401_fu_836_p2 = (mul_ln703_1_reg_215 + 16'd5591);

assign add_ln703_402_fu_797_p0 = reg_209;

assign add_ln703_402_fu_797_p2 = (add_ln703_402_fu_797_p0 + 15'd8301);

assign add_ln703_403_fu_807_p2 = ($signed(zext_ln703_25_fu_794_p1) + $signed(sext_ln703_6_fu_783_p1));

assign add_ln703_404_fu_717_p2 = ($signed(sext_ln703_48_fu_713_p1) + $signed(sext_ln703_47_fu_702_p1));

assign add_ln703_406_fu_859_p2 = ($signed(sext_ln703_15_fu_856_p1) + $signed(reg_229));

assign add_ln703_407_fu_737_p1 = reg_229;

assign add_ln703_407_fu_737_p2 = (reg_209 + add_ln703_407_fu_737_p1);

assign add_ln703_409_fu_690_p2 = ($signed(sext_ln703_fu_599_p1) + $signed(15'd24441));

assign add_ln703_410_fu_696_p2 = ($signed(zext_ln703_23_fu_686_p1) + $signed(sext_ln703_12_fu_682_p1));

assign add_ln703_411_fu_723_p2 = ($signed(sext_ln703_10_fu_706_p1) + $signed(add_ln703_410_reg_1031));

assign add_ln703_413_fu_822_p2 = ($signed(zext_ln703_26_fu_803_p1) + $signed(sext_ln703_7_fu_786_p1));

assign add_ln703_414_fu_777_p1 = reg_209;

assign add_ln703_414_fu_777_p2 = (zext_ln703_20_fu_774_p1 + add_ln703_414_fu_777_p1);

assign add_ln703_415_fu_845_p2 = ($signed(sext_ln703_13_fu_832_p1) + $signed(sext_ln703_53_fu_842_p1));

assign add_ln703_fu_444_p2 = (zext_ln703_fu_428_p1 + zext_ln703_1_fu_440_p1);

assign add_ln79_fu_258_p2 = (indvar_flatten_reg_178 + 15'd1);

assign and_ln289_1_fu_334_p2 = (icmp_ln289_3_fu_322_p2 & icmp_ln289_2_fu_302_p2);

assign and_ln289_2_fu_340_p2 = (and_ln289_fu_328_p2 & and_ln289_1_fu_334_p2);

assign and_ln289_fu_328_p2 = (icmp_ln289_fu_272_p2 & icmp_ln289_1_fu_282_p2);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state15 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_state16 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

always @ (*) begin
    ap_block_state1 = ((ap_done_reg == 1'b1) | (real_start == 1'b0));
end

always @ (*) begin
    ap_block_state15 = ((io_acc_block_signal_op180 == 1'b0) & (ap_predicate_op180_write_state15 == 1'b1));
end

always @ (*) begin
    ap_predicate_op180_write_state15 = ((1'd1 == and_ln289_2_reg_939) & (icmp_ln79_reg_890 == 1'd0));
end

assign ap_ready = internal_ap_ready;

assign grp_fu_200_p2 = ($signed({{1'b0}, {grp_fu_200_p0}}) * $signed(grp_fu_200_p1));

assign icmp_ln289_1_fu_282_p2 = ((sY_3 == 32'd2) ? 1'b1 : 1'b0);

assign icmp_ln289_2_fu_302_p2 = (($signed(tmp_fu_292_p4) > $signed(31'd0)) ? 1'b1 : 1'b0);

assign icmp_ln289_3_fu_322_p2 = (($signed(tmp_19_fu_312_p4) > $signed(31'd0)) ? 1'b1 : 1'b0);

assign icmp_ln289_fu_272_p2 = ((sX_3 == 32'd2) ? 1'b1 : 1'b0);

assign icmp_ln313_fu_455_p2 = ((pX_3_load_reg_933 == 32'd127) ? 1'b1 : 1'b0);

assign icmp_ln317_fu_495_p2 = ((pY_3_load_reg_927 == 32'd127) ? 1'b1 : 1'b0);

assign icmp_ln79_fu_252_p2 = ((indvar_flatten_reg_178 == 15'd16384) ? 1'b1 : 1'b0);

assign io_acc_block_signal_op180 = (res_V_data_3_V_full_n & res_V_data_2_V_full_n & res_V_data_1_V_full_n & res_V_data_0_V_full_n);

assign res_V_data_0_V_din = $signed(tmp_data_0_V_4_reg_1076);

assign res_V_data_1_V_din = $signed(tmp_data_1_V_reg_1041);

assign res_V_data_2_V_din = $signed(tmp_data_2_V_reg_1061);

assign res_V_data_3_V_din = $signed(tmp_data_3_V_reg_1081);

assign select_ln323_fu_516_p3 = ((icmp_ln289_1_reg_922[0:0] === 1'b1) ? 32'd2 : add_ln323_fu_511_p2);

assign select_ln328_fu_476_p3 = ((icmp_ln289_reg_912[0:0] === 1'b1) ? 32'd2 : add_ln328_fu_471_p2);

assign sext_ln703_10_fu_706_p1 = $signed(sub_ln703_4_reg_1016);

assign sext_ln703_12_fu_682_p1 = $signed(sub_ln703_5_fu_676_p2);

assign sext_ln703_13_fu_832_p1 = $signed(reg_221);

assign sext_ln703_15_fu_856_p1 = $signed(add_ln703_401_reg_1071);

assign sext_ln703_47_fu_702_p0 = reg_209;

assign sext_ln703_47_fu_702_p1 = $signed(sext_ln703_47_fu_702_p0);

assign sext_ln703_48_fu_713_p1 = $signed(reg_235);

assign sext_ln703_49_fu_813_p1 = $signed(add_ln703_404_reg_1036);

assign sext_ln703_4_fu_532_p0 = reg_209;

assign sext_ln703_4_fu_532_p1 = $signed(sext_ln703_4_fu_532_p0);

assign sext_ln703_53_fu_842_p1 = $signed(add_ln703_414_reg_1056);

assign sext_ln703_5_fu_764_p1 = $signed(sub_ln703_1_fu_758_p2);

assign sext_ln703_6_fu_783_p1 = $signed(sub_ln703_2_reg_1051);

assign sext_ln703_7_fu_786_p1 = $signed(reg_221);

assign sext_ln703_9_fu_620_p1 = $signed(sub_ln703_3_fu_614_p2);

assign sext_ln703_fu_599_p1 = $signed(sub_ln703_fu_593_p2);

assign shl_ln703_1_fu_571_p3 = {{kernel_data_V_2_2_load_reg_899}, {5'd0}};

assign shl_ln703_2_fu_582_p3 = {{kernel_data_V_2_2_load_reg_899}, {2'd0}};

assign shl_ln703_3_fu_747_p3 = {{DataOut_V_reg_956}, {5'd0}};

assign shl_ln703_4_fu_603_p3 = {{kernel_data_V_2_5_load_reg_976}, {4'd0}};

assign shl_ln703_5_fu_624_p3 = {{kernel_data_V_2_5_load_reg_976}, {2'd0}};

assign shl_ln703_6_fu_648_p3 = {{kernel_data_V_2_7_load_reg_969}, {5'd0}};

assign shl_ln703_7_fu_659_p3 = {{kernel_data_V_2_7_load_reg_969}, {3'd0}};

assign shl_ln_fu_432_p3 = {{kernel_data_V_2_1}, {5'd0}};

assign start_out = real_start;

assign sub_ln703_1_fu_758_p2 = (14'd0 - zext_ln703_9_fu_754_p1);

assign sub_ln703_2_fu_768_p2 = ($signed(sext_ln703_5_fu_764_p1) - $signed(zext_ln703_8_fu_743_p1));

assign sub_ln703_3_fu_614_p2 = (13'd0 - zext_ln703_13_fu_610_p1);

assign sub_ln703_4_fu_635_p2 = ($signed(sext_ln703_9_fu_620_p1) - $signed(zext_ln703_14_fu_631_p1));

assign sub_ln703_5_fu_676_p2 = (zext_ln703_18_fu_655_p1 - zext_ln703_17_fu_645_p1);

assign sub_ln703_fu_593_p2 = (zext_ln703_5_fu_578_p1 - zext_ln703_6_fu_589_p1);

assign tmp_19_fu_312_p4 = {{pX_3[31:1]}};

assign tmp_data_0_V_4_fu_851_p2 = (add_ln703_413_reg_1066 + add_ln703_415_fu_845_p2);

assign tmp_data_1_V_fu_728_p2 = (add_ln703_409_reg_1026 + add_ln703_411_fu_723_p2);

assign tmp_data_2_V_fu_816_p2 = ($signed(add_ln703_403_fu_807_p2) + $signed(sext_ln703_49_fu_813_p1));

assign tmp_data_3_V_fu_868_p2 = (add_ln703_406_fu_859_p2 + zext_ln703_27_fu_865_p1);

assign tmp_fu_292_p4 = {{pY_3[31:1]}};

assign zext_ln703_10_fu_557_p1 = kernel_data_V_2_4_load_reg_963;

assign zext_ln703_11_fu_536_p1 = kernel_data_V_2_4_load_reg_963;

assign zext_ln703_12_fu_450_p1 = kernel_data_V_2_4;

assign zext_ln703_13_fu_610_p1 = shl_ln703_4_fu_603_p3;

assign zext_ln703_14_fu_631_p1 = shl_ln703_5_fu_624_p3;

assign zext_ln703_15_fu_709_p1 = DataOut_V_75_reg_950;

assign zext_ln703_16_fu_641_p1 = DataOut_V_75_reg_950;

assign zext_ln703_17_fu_645_p1 = kernel_data_V_2_7_load_reg_969;

assign zext_ln703_18_fu_655_p1 = shl_ln703_6_fu_648_p3;

assign zext_ln703_19_fu_666_p1 = shl_ln703_7_fu_659_p3;

assign zext_ln703_1_fu_440_p1 = shl_ln_fu_432_p3;

assign zext_ln703_20_fu_774_p1 = add_ln703_398_reg_1021;

assign zext_ln703_21_fu_567_p1 = kernel_data_V_2_8_load_reg_982;

assign zext_ln703_22_fu_790_p1 = kernel_data_V_2_8_load_reg_982;

assign zext_ln703_23_fu_686_p1 = reg_235;

assign zext_ln703_24_fu_733_p1 = tmp_data_0_V_reg_943;

assign zext_ln703_25_fu_794_p1 = add_ln703_400_reg_1011;

assign zext_ln703_26_fu_803_p1 = add_ln703_402_fu_797_p2;

assign zext_ln703_27_fu_865_p1 = add_ln703_407_reg_1046;

assign zext_ln703_2_fu_529_p1 = add_ln703_reg_988;

assign zext_ln703_3_fu_351_p1 = kernel_data_V_2_2_load_reg_899;

assign zext_ln703_4_fu_346_p1 = kernel_data_V_2_2;

assign zext_ln703_5_fu_578_p1 = shl_ln703_1_fu_571_p3;

assign zext_ln703_6_fu_589_p1 = shl_ln703_2_fu_582_p3;

assign zext_ln703_7_fu_828_p1 = DataOut_V_reg_956;

assign zext_ln703_8_fu_743_p1 = DataOut_V_reg_956;

assign zext_ln703_9_fu_754_p1 = shl_ln703_3_fu_747_p3;

assign zext_ln703_fu_428_p1 = kernel_data_V_2_1;

always @ (posedge ap_clk) begin
    sub_ln703_4_reg_1016[1:0] <= 2'b00;
    add_ln703_398_reg_1021[2:0] <= 3'b000;
    add_ln703_409_reg_1026[1:0] <= 2'b01;
end

endmodule //conv_2d_cl_array_ap_uint_8_1u_array_ap_fixed_20_8_5_3_0_4u_config2_s
